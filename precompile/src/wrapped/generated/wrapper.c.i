# 0 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 559 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 560 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 561 "/usr/include/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4






# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;



typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;






__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;







__extension__ typedef long long int __intmax_t;
__extension__ typedef unsigned long long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __uint64_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __uint64_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __int64_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __uint64_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;
__extension__ typedef __int64_t __suseconds64_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __int64_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __uint64_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __uint64_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;







__extension__ typedef __int64_t __time64_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4
# 144 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4

# 102 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/sys/select.h" 3 4

# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;





  int __kind;






  unsigned int __nusers;
  __extension__ union
  {
    struct
    {
      short __espins;
      short __eelision;


    } __elision_data;
    __pthread_slist_t __list;
  };


};
# 77 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;
# 49 "/usr/include/bits/struct_rwlock.h" 3 4
  unsigned char __flags;
  unsigned char __shared;
  signed char __rwelision;
  unsigned char __pad2;
  int __cur_writer;

};
# 90 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 6 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 93 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 7 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2

# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h" 1






# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 8 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h" 2


# 9 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
typedef struct x86emu_s x86emu_t;


typedef void (*wrapper_t)(x86emu_t* emu, uintptr_t fnc);
# 33 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void vFv(x86emu_t *emu, uintptr_t fnc);
void vFc(x86emu_t *emu, uintptr_t fnc);
void vFw(x86emu_t *emu, uintptr_t fnc);
void vFi(x86emu_t *emu, uintptr_t fnc);
void vFC(x86emu_t *emu, uintptr_t fnc);
void vFW(x86emu_t *emu, uintptr_t fnc);
void vFu(x86emu_t *emu, uintptr_t fnc);
void vFU(x86emu_t *emu, uintptr_t fnc);
void vFf(x86emu_t *emu, uintptr_t fnc);
void vFd(x86emu_t *emu, uintptr_t fnc);
void vFl(x86emu_t *emu, uintptr_t fnc);
void vFL(x86emu_t *emu, uintptr_t fnc);
void vFp(x86emu_t *emu, uintptr_t fnc);
void vFS(x86emu_t *emu, uintptr_t fnc);
void vFG(x86emu_t *emu, uintptr_t fnc);
void cFv(x86emu_t *emu, uintptr_t fnc);
void cFi(x86emu_t *emu, uintptr_t fnc);
void cFu(x86emu_t *emu, uintptr_t fnc);
void cFf(x86emu_t *emu, uintptr_t fnc);
void cFp(x86emu_t *emu, uintptr_t fnc);
void cFG(x86emu_t *emu, uintptr_t fnc);
void wFp(x86emu_t *emu, uintptr_t fnc);
void iFv(x86emu_t *emu, uintptr_t fnc);
void iFw(x86emu_t *emu, uintptr_t fnc);
void iFi(x86emu_t *emu, uintptr_t fnc);
void iFI(x86emu_t *emu, uintptr_t fnc);
void iFC(x86emu_t *emu, uintptr_t fnc);
void iFW(x86emu_t *emu, uintptr_t fnc);
void iFu(x86emu_t *emu, uintptr_t fnc);
void iFU(x86emu_t *emu, uintptr_t fnc);
void iFf(x86emu_t *emu, uintptr_t fnc);
void iFd(x86emu_t *emu, uintptr_t fnc);
void iFL(x86emu_t *emu, uintptr_t fnc);
void iFp(x86emu_t *emu, uintptr_t fnc);
void iFS(x86emu_t *emu, uintptr_t fnc);
void iFG(x86emu_t *emu, uintptr_t fnc);
void IFv(x86emu_t *emu, uintptr_t fnc);
void IFi(x86emu_t *emu, uintptr_t fnc);
void IFf(x86emu_t *emu, uintptr_t fnc);
void IFd(x86emu_t *emu, uintptr_t fnc);
void IFp(x86emu_t *emu, uintptr_t fnc);
void IFG(x86emu_t *emu, uintptr_t fnc);
void CFv(x86emu_t *emu, uintptr_t fnc);
void CFC(x86emu_t *emu, uintptr_t fnc);
void CFu(x86emu_t *emu, uintptr_t fnc);
void CFl(x86emu_t *emu, uintptr_t fnc);
void CFL(x86emu_t *emu, uintptr_t fnc);
void CFp(x86emu_t *emu, uintptr_t fnc);
void CFG(x86emu_t *emu, uintptr_t fnc);
void WFi(x86emu_t *emu, uintptr_t fnc);
void WFu(x86emu_t *emu, uintptr_t fnc);
void WFp(x86emu_t *emu, uintptr_t fnc);
void uFv(x86emu_t *emu, uintptr_t fnc);
void uFi(x86emu_t *emu, uintptr_t fnc);
void uFu(x86emu_t *emu, uintptr_t fnc);
void uFU(x86emu_t *emu, uintptr_t fnc);
void uFd(x86emu_t *emu, uintptr_t fnc);
void uFl(x86emu_t *emu, uintptr_t fnc);
void uFp(x86emu_t *emu, uintptr_t fnc);
void uFG(x86emu_t *emu, uintptr_t fnc);
void UFv(x86emu_t *emu, uintptr_t fnc);
void UFu(x86emu_t *emu, uintptr_t fnc);
void UFU(x86emu_t *emu, uintptr_t fnc);
void UFp(x86emu_t *emu, uintptr_t fnc);
void UFG(x86emu_t *emu, uintptr_t fnc);
void UFs(x86emu_t *emu, uintptr_t fnc);
void fFi(x86emu_t *emu, uintptr_t fnc);
void fFf(x86emu_t *emu, uintptr_t fnc);
void fFp(x86emu_t *emu, uintptr_t fnc);
void fFG(x86emu_t *emu, uintptr_t fnc);
void dFv(x86emu_t *emu, uintptr_t fnc);
void dFi(x86emu_t *emu, uintptr_t fnc);
void dFu(x86emu_t *emu, uintptr_t fnc);
void dFd(x86emu_t *emu, uintptr_t fnc);
void dFp(x86emu_t *emu, uintptr_t fnc);
void dFG(x86emu_t *emu, uintptr_t fnc);
void lFv(x86emu_t *emu, uintptr_t fnc);
void lFu(x86emu_t *emu, uintptr_t fnc);
void lFl(x86emu_t *emu, uintptr_t fnc);
void lFp(x86emu_t *emu, uintptr_t fnc);
void lFG(x86emu_t *emu, uintptr_t fnc);
void LFv(x86emu_t *emu, uintptr_t fnc);
void LFi(x86emu_t *emu, uintptr_t fnc);
void LFu(x86emu_t *emu, uintptr_t fnc);
void LFL(x86emu_t *emu, uintptr_t fnc);
void LFp(x86emu_t *emu, uintptr_t fnc);
void LFG(x86emu_t *emu, uintptr_t fnc);
void pFv(x86emu_t *emu, uintptr_t fnc);
void pFw(x86emu_t *emu, uintptr_t fnc);
void pFi(x86emu_t *emu, uintptr_t fnc);
void pFI(x86emu_t *emu, uintptr_t fnc);
void pFC(x86emu_t *emu, uintptr_t fnc);
void pFW(x86emu_t *emu, uintptr_t fnc);
void pFu(x86emu_t *emu, uintptr_t fnc);
void pFU(x86emu_t *emu, uintptr_t fnc);
void pFd(x86emu_t *emu, uintptr_t fnc);
void pFl(x86emu_t *emu, uintptr_t fnc);
void pFL(x86emu_t *emu, uintptr_t fnc);
void pFp(x86emu_t *emu, uintptr_t fnc);
void pFV(x86emu_t *emu, uintptr_t fnc);
void pFG(x86emu_t *emu, uintptr_t fnc);
void vFEv(x86emu_t *emu, uintptr_t fnc);
void vFEi(x86emu_t *emu, uintptr_t fnc);
void vFEp(x86emu_t *emu, uintptr_t fnc);
void vFcc(x86emu_t *emu, uintptr_t fnc);
void vFww(x86emu_t *emu, uintptr_t fnc);
void vFii(x86emu_t *emu, uintptr_t fnc);
void vFiI(x86emu_t *emu, uintptr_t fnc);
void vFiW(x86emu_t *emu, uintptr_t fnc);
void vFiu(x86emu_t *emu, uintptr_t fnc);
void vFiU(x86emu_t *emu, uintptr_t fnc);
void vFif(x86emu_t *emu, uintptr_t fnc);
void vFid(x86emu_t *emu, uintptr_t fnc);
void vFil(x86emu_t *emu, uintptr_t fnc);
void vFiL(x86emu_t *emu, uintptr_t fnc);
void vFip(x86emu_t *emu, uintptr_t fnc);
void vFWW(x86emu_t *emu, uintptr_t fnc);
void vFWp(x86emu_t *emu, uintptr_t fnc);
void vFuc(x86emu_t *emu, uintptr_t fnc);
void vFuw(x86emu_t *emu, uintptr_t fnc);
void vFui(x86emu_t *emu, uintptr_t fnc);
void vFuC(x86emu_t *emu, uintptr_t fnc);
void vFuW(x86emu_t *emu, uintptr_t fnc);
void vFuu(x86emu_t *emu, uintptr_t fnc);
void vFuU(x86emu_t *emu, uintptr_t fnc);
void vFuf(x86emu_t *emu, uintptr_t fnc);
void vFud(x86emu_t *emu, uintptr_t fnc);
void vFul(x86emu_t *emu, uintptr_t fnc);
void vFuL(x86emu_t *emu, uintptr_t fnc);
void vFup(x86emu_t *emu, uintptr_t fnc);
void vFUi(x86emu_t *emu, uintptr_t fnc);
void vFfi(x86emu_t *emu, uintptr_t fnc);
void vFfC(x86emu_t *emu, uintptr_t fnc);
void vFff(x86emu_t *emu, uintptr_t fnc);
void vFfp(x86emu_t *emu, uintptr_t fnc);
void vFdd(x86emu_t *emu, uintptr_t fnc);
void vFlu(x86emu_t *emu, uintptr_t fnc);
void vFlp(x86emu_t *emu, uintptr_t fnc);
void vFLu(x86emu_t *emu, uintptr_t fnc);
void vFLp(x86emu_t *emu, uintptr_t fnc);
void vFpi(x86emu_t *emu, uintptr_t fnc);
void vFpI(x86emu_t *emu, uintptr_t fnc);
void vFpC(x86emu_t *emu, uintptr_t fnc);
void vFpW(x86emu_t *emu, uintptr_t fnc);
void vFpu(x86emu_t *emu, uintptr_t fnc);
void vFpU(x86emu_t *emu, uintptr_t fnc);
void vFpf(x86emu_t *emu, uintptr_t fnc);
void vFpd(x86emu_t *emu, uintptr_t fnc);
void vFpl(x86emu_t *emu, uintptr_t fnc);
void vFpL(x86emu_t *emu, uintptr_t fnc);
void vFpp(x86emu_t *emu, uintptr_t fnc);
void vFpV(x86emu_t *emu, uintptr_t fnc);
void vFpS(x86emu_t *emu, uintptr_t fnc);
void vFpP(x86emu_t *emu, uintptr_t fnc);
void vFpG(x86emu_t *emu, uintptr_t fnc);
void vFSi(x86emu_t *emu, uintptr_t fnc);
void vFGc(x86emu_t *emu, uintptr_t fnc);
void vFGi(x86emu_t *emu, uintptr_t fnc);
void vFGI(x86emu_t *emu, uintptr_t fnc);
void vFGC(x86emu_t *emu, uintptr_t fnc);
void vFGu(x86emu_t *emu, uintptr_t fnc);
void vFGU(x86emu_t *emu, uintptr_t fnc);
void vFGf(x86emu_t *emu, uintptr_t fnc);
void vFGd(x86emu_t *emu, uintptr_t fnc);
void vFGl(x86emu_t *emu, uintptr_t fnc);
void vFGL(x86emu_t *emu, uintptr_t fnc);
void vFGp(x86emu_t *emu, uintptr_t fnc);
void vFGG(x86emu_t *emu, uintptr_t fnc);
void cFpp(x86emu_t *emu, uintptr_t fnc);
void iFEv(x86emu_t *emu, uintptr_t fnc);
void iFEi(x86emu_t *emu, uintptr_t fnc);
void iFEu(x86emu_t *emu, uintptr_t fnc);
void iFEf(x86emu_t *emu, uintptr_t fnc);
void iFEd(x86emu_t *emu, uintptr_t fnc);
void iFEL(x86emu_t *emu, uintptr_t fnc);
void iFEp(x86emu_t *emu, uintptr_t fnc);
void iFwp(x86emu_t *emu, uintptr_t fnc);
void iFii(x86emu_t *emu, uintptr_t fnc);
void iFiI(x86emu_t *emu, uintptr_t fnc);
void iFiu(x86emu_t *emu, uintptr_t fnc);
void iFiU(x86emu_t *emu, uintptr_t fnc);
void iFil(x86emu_t *emu, uintptr_t fnc);
void iFip(x86emu_t *emu, uintptr_t fnc);
void iFiV(x86emu_t *emu, uintptr_t fnc);
void iFIi(x86emu_t *emu, uintptr_t fnc);
void iFui(x86emu_t *emu, uintptr_t fnc);
void iFuu(x86emu_t *emu, uintptr_t fnc);
void iFup(x86emu_t *emu, uintptr_t fnc);
void iFli(x86emu_t *emu, uintptr_t fnc);
void iFLL(x86emu_t *emu, uintptr_t fnc);
void iFLp(x86emu_t *emu, uintptr_t fnc);
void iFpw(x86emu_t *emu, uintptr_t fnc);
void iFpi(x86emu_t *emu, uintptr_t fnc);
void iFpI(x86emu_t *emu, uintptr_t fnc);
void iFpC(x86emu_t *emu, uintptr_t fnc);
void iFpW(x86emu_t *emu, uintptr_t fnc);
void iFpu(x86emu_t *emu, uintptr_t fnc);
void iFpU(x86emu_t *emu, uintptr_t fnc);
void iFpf(x86emu_t *emu, uintptr_t fnc);
void iFpd(x86emu_t *emu, uintptr_t fnc);
void iFpl(x86emu_t *emu, uintptr_t fnc);
void iFpL(x86emu_t *emu, uintptr_t fnc);
void iFpp(x86emu_t *emu, uintptr_t fnc);
void iFpV(x86emu_t *emu, uintptr_t fnc);
void iFpO(x86emu_t *emu, uintptr_t fnc);
void iFpP(x86emu_t *emu, uintptr_t fnc);
void iFpG(x86emu_t *emu, uintptr_t fnc);
void iFSi(x86emu_t *emu, uintptr_t fnc);
void iFGG(x86emu_t *emu, uintptr_t fnc);
void IFEf(x86emu_t *emu, uintptr_t fnc);
void IFEd(x86emu_t *emu, uintptr_t fnc);
void IFEp(x86emu_t *emu, uintptr_t fnc);
void IFII(x86emu_t *emu, uintptr_t fnc);
void IFpu(x86emu_t *emu, uintptr_t fnc);
void IFpd(x86emu_t *emu, uintptr_t fnc);
void CFip(x86emu_t *emu, uintptr_t fnc);
void CFui(x86emu_t *emu, uintptr_t fnc);
void CFuu(x86emu_t *emu, uintptr_t fnc);
void CFuL(x86emu_t *emu, uintptr_t fnc);
void CFpi(x86emu_t *emu, uintptr_t fnc);
void CFpu(x86emu_t *emu, uintptr_t fnc);
void CFpp(x86emu_t *emu, uintptr_t fnc);
void WFpp(x86emu_t *emu, uintptr_t fnc);
void uFEu(x86emu_t *emu, uintptr_t fnc);
void uFEp(x86emu_t *emu, uintptr_t fnc);
void uFii(x86emu_t *emu, uintptr_t fnc);
void uFiu(x86emu_t *emu, uintptr_t fnc);
void uFui(x86emu_t *emu, uintptr_t fnc);
void uFuu(x86emu_t *emu, uintptr_t fnc);
void uFup(x86emu_t *emu, uintptr_t fnc);
void uFpw(x86emu_t *emu, uintptr_t fnc);
void uFpi(x86emu_t *emu, uintptr_t fnc);
void uFpu(x86emu_t *emu, uintptr_t fnc);
void uFpf(x86emu_t *emu, uintptr_t fnc);
void uFpL(x86emu_t *emu, uintptr_t fnc);
void uFpp(x86emu_t *emu, uintptr_t fnc);
void uFp2(x86emu_t *emu, uintptr_t fnc);
void UFEp(x86emu_t *emu, uintptr_t fnc);
void UFii(x86emu_t *emu, uintptr_t fnc);
void UFuu(x86emu_t *emu, uintptr_t fnc);
void UFUU(x86emu_t *emu, uintptr_t fnc);
void UFUp(x86emu_t *emu, uintptr_t fnc);
void UFpp(x86emu_t *emu, uintptr_t fnc);
void UFss(x86emu_t *emu, uintptr_t fnc);
void fFEf(x86emu_t *emu, uintptr_t fnc);
void fFEp(x86emu_t *emu, uintptr_t fnc);
void fFif(x86emu_t *emu, uintptr_t fnc);
void fFfi(x86emu_t *emu, uintptr_t fnc);
void fFff(x86emu_t *emu, uintptr_t fnc);
void fFfD(x86emu_t *emu, uintptr_t fnc);
void fFfp(x86emu_t *emu, uintptr_t fnc);
void fFpp(x86emu_t *emu, uintptr_t fnc);
void dFEd(x86emu_t *emu, uintptr_t fnc);
void dFid(x86emu_t *emu, uintptr_t fnc);
void dFuu(x86emu_t *emu, uintptr_t fnc);
void dFdi(x86emu_t *emu, uintptr_t fnc);
void dFdd(x86emu_t *emu, uintptr_t fnc);
void dFdD(x86emu_t *emu, uintptr_t fnc);
void dFdp(x86emu_t *emu, uintptr_t fnc);
void dFpi(x86emu_t *emu, uintptr_t fnc);
void dFpd(x86emu_t *emu, uintptr_t fnc);
void dFpp(x86emu_t *emu, uintptr_t fnc);
void DFpp(x86emu_t *emu, uintptr_t fnc);
void lFEv(x86emu_t *emu, uintptr_t fnc);
void lFEi(x86emu_t *emu, uintptr_t fnc);
void lFui(x86emu_t *emu, uintptr_t fnc);
void lFll(x86emu_t *emu, uintptr_t fnc);
void lFpi(x86emu_t *emu, uintptr_t fnc);
void lFpp(x86emu_t *emu, uintptr_t fnc);
void LFii(x86emu_t *emu, uintptr_t fnc);
void LFuu(x86emu_t *emu, uintptr_t fnc);
void LFUp(x86emu_t *emu, uintptr_t fnc);
void LFLi(x86emu_t *emu, uintptr_t fnc);
void LFpi(x86emu_t *emu, uintptr_t fnc);
void LFpL(x86emu_t *emu, uintptr_t fnc);
void LFpp(x86emu_t *emu, uintptr_t fnc);
void pFEv(x86emu_t *emu, uintptr_t fnc);
void pFEi(x86emu_t *emu, uintptr_t fnc);
void pFEu(x86emu_t *emu, uintptr_t fnc);
void pFEp(x86emu_t *emu, uintptr_t fnc);
void pFii(x86emu_t *emu, uintptr_t fnc);
void pFiI(x86emu_t *emu, uintptr_t fnc);
void pFiu(x86emu_t *emu, uintptr_t fnc);
void pFip(x86emu_t *emu, uintptr_t fnc);
void pFiV(x86emu_t *emu, uintptr_t fnc);
void pFII(x86emu_t *emu, uintptr_t fnc);
void pFui(x86emu_t *emu, uintptr_t fnc);
void pFuC(x86emu_t *emu, uintptr_t fnc);
void pFuu(x86emu_t *emu, uintptr_t fnc);
void pFup(x86emu_t *emu, uintptr_t fnc);
void pFuV(x86emu_t *emu, uintptr_t fnc);
void pFUi(x86emu_t *emu, uintptr_t fnc);
void pFUU(x86emu_t *emu, uintptr_t fnc);
void pFdi(x86emu_t *emu, uintptr_t fnc);
void pFdd(x86emu_t *emu, uintptr_t fnc);
void pFlp(x86emu_t *emu, uintptr_t fnc);
void pFLL(x86emu_t *emu, uintptr_t fnc);
void pFLp(x86emu_t *emu, uintptr_t fnc);
void pFpi(x86emu_t *emu, uintptr_t fnc);
void pFpC(x86emu_t *emu, uintptr_t fnc);
void pFpu(x86emu_t *emu, uintptr_t fnc);
void pFpU(x86emu_t *emu, uintptr_t fnc);
void pFpd(x86emu_t *emu, uintptr_t fnc);
void pFpl(x86emu_t *emu, uintptr_t fnc);
void pFpL(x86emu_t *emu, uintptr_t fnc);
void pFpp(x86emu_t *emu, uintptr_t fnc);
void pFpV(x86emu_t *emu, uintptr_t fnc);
void pFpG(x86emu_t *emu, uintptr_t fnc);
void pFps(x86emu_t *emu, uintptr_t fnc);
void pFSi(x86emu_t *emu, uintptr_t fnc);
void vFEip(x86emu_t *emu, uintptr_t fnc);
void vFEpi(x86emu_t *emu, uintptr_t fnc);
void vFEpu(x86emu_t *emu, uintptr_t fnc);
void vFEpp(x86emu_t *emu, uintptr_t fnc);
void vFEpV(x86emu_t *emu, uintptr_t fnc);
void vFccc(x86emu_t *emu, uintptr_t fnc);
void vFwww(x86emu_t *emu, uintptr_t fnc);
void vFiii(x86emu_t *emu, uintptr_t fnc);
void vFiif(x86emu_t *emu, uintptr_t fnc);
void vFiip(x86emu_t *emu, uintptr_t fnc);
void vFiui(x86emu_t *emu, uintptr_t fnc);
void vFiuu(x86emu_t *emu, uintptr_t fnc);
void vFiuU(x86emu_t *emu, uintptr_t fnc);
void vFiup(x86emu_t *emu, uintptr_t fnc);
void vFiff(x86emu_t *emu, uintptr_t fnc);
void vFidd(x86emu_t *emu, uintptr_t fnc);
void vFill(x86emu_t *emu, uintptr_t fnc);
void vFilp(x86emu_t *emu, uintptr_t fnc);
void vFiLL(x86emu_t *emu, uintptr_t fnc);
void vFipi(x86emu_t *emu, uintptr_t fnc);
void vFipu(x86emu_t *emu, uintptr_t fnc);
void vFipp(x86emu_t *emu, uintptr_t fnc);
void vFipV(x86emu_t *emu, uintptr_t fnc);
void vFCCC(x86emu_t *emu, uintptr_t fnc);
void vFWWW(x86emu_t *emu, uintptr_t fnc);
void vFucc(x86emu_t *emu, uintptr_t fnc);
void vFuww(x86emu_t *emu, uintptr_t fnc);
void vFuii(x86emu_t *emu, uintptr_t fnc);
void vFuiI(x86emu_t *emu, uintptr_t fnc);
void vFuiu(x86emu_t *emu, uintptr_t fnc);
void vFuiU(x86emu_t *emu, uintptr_t fnc);
void vFuif(x86emu_t *emu, uintptr_t fnc);
void vFuid(x86emu_t *emu, uintptr_t fnc);
void vFuil(x86emu_t *emu, uintptr_t fnc);
void vFuiL(x86emu_t *emu, uintptr_t fnc);
void vFuip(x86emu_t *emu, uintptr_t fnc);
void vFuWW(x86emu_t *emu, uintptr_t fnc);
void vFuui(x86emu_t *emu, uintptr_t fnc);
void vFuuC(x86emu_t *emu, uintptr_t fnc);
void vFuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuU(x86emu_t *emu, uintptr_t fnc);
void vFuuf(x86emu_t *emu, uintptr_t fnc);
void vFuud(x86emu_t *emu, uintptr_t fnc);
void vFuuL(x86emu_t *emu, uintptr_t fnc);
void vFuup(x86emu_t *emu, uintptr_t fnc);
void vFuff(x86emu_t *emu, uintptr_t fnc);
void vFufp(x86emu_t *emu, uintptr_t fnc);
void vFudd(x86emu_t *emu, uintptr_t fnc);
void vFull(x86emu_t *emu, uintptr_t fnc);
void vFulp(x86emu_t *emu, uintptr_t fnc);
void vFuLL(x86emu_t *emu, uintptr_t fnc);
void vFupu(x86emu_t *emu, uintptr_t fnc);
void vFupp(x86emu_t *emu, uintptr_t fnc);
void vFfff(x86emu_t *emu, uintptr_t fnc);
void vFfpp(x86emu_t *emu, uintptr_t fnc);
void vFddd(x86emu_t *emu, uintptr_t fnc);
void vFdpp(x86emu_t *emu, uintptr_t fnc);
void vFlii(x86emu_t *emu, uintptr_t fnc);
void vFlip(x86emu_t *emu, uintptr_t fnc);
void vFllp(x86emu_t *emu, uintptr_t fnc);
void vFlpp(x86emu_t *emu, uintptr_t fnc);
void vFLpL(x86emu_t *emu, uintptr_t fnc);
void vFpii(x86emu_t *emu, uintptr_t fnc);
void vFpiI(x86emu_t *emu, uintptr_t fnc);
void vFpiC(x86emu_t *emu, uintptr_t fnc);
void vFpiu(x86emu_t *emu, uintptr_t fnc);
void vFpif(x86emu_t *emu, uintptr_t fnc);
void vFpid(x86emu_t *emu, uintptr_t fnc);
void vFpip(x86emu_t *emu, uintptr_t fnc);
void vFpui(x86emu_t *emu, uintptr_t fnc);
void vFpuI(x86emu_t *emu, uintptr_t fnc);
void vFpuu(x86emu_t *emu, uintptr_t fnc);
void vFpuU(x86emu_t *emu, uintptr_t fnc);
void vFpuL(x86emu_t *emu, uintptr_t fnc);
void vFpup(x86emu_t *emu, uintptr_t fnc);
void vFpUi(x86emu_t *emu, uintptr_t fnc);
void vFpUu(x86emu_t *emu, uintptr_t fnc);
void vFpUU(x86emu_t *emu, uintptr_t fnc);
void vFpUp(x86emu_t *emu, uintptr_t fnc);
void vFpUP(x86emu_t *emu, uintptr_t fnc);
void vFpff(x86emu_t *emu, uintptr_t fnc);
void vFpdd(x86emu_t *emu, uintptr_t fnc);
void vFpll(x86emu_t *emu, uintptr_t fnc);
void vFplp(x86emu_t *emu, uintptr_t fnc);
void vFpLi(x86emu_t *emu, uintptr_t fnc);
void vFpLL(x86emu_t *emu, uintptr_t fnc);
void vFpLp(x86emu_t *emu, uintptr_t fnc);
void vFppi(x86emu_t *emu, uintptr_t fnc);
void vFppu(x86emu_t *emu, uintptr_t fnc);
void vFppU(x86emu_t *emu, uintptr_t fnc);
void vFppd(x86emu_t *emu, uintptr_t fnc);
void vFppL(x86emu_t *emu, uintptr_t fnc);
void vFppp(x86emu_t *emu, uintptr_t fnc);
void vFppV(x86emu_t *emu, uintptr_t fnc);
void vFppG(x86emu_t *emu, uintptr_t fnc);
void vFpPp(x86emu_t *emu, uintptr_t fnc);
void vFpPP(x86emu_t *emu, uintptr_t fnc);
void iFEiw(x86emu_t *emu, uintptr_t fnc);
void iFEip(x86emu_t *emu, uintptr_t fnc);
void iFEWW(x86emu_t *emu, uintptr_t fnc);
void iFEup(x86emu_t *emu, uintptr_t fnc);
void iFELp(x86emu_t *emu, uintptr_t fnc);
void iFEpi(x86emu_t *emu, uintptr_t fnc);
void iFEpL(x86emu_t *emu, uintptr_t fnc);
void iFEpp(x86emu_t *emu, uintptr_t fnc);
void iFEpV(x86emu_t *emu, uintptr_t fnc);
void iFESp(x86emu_t *emu, uintptr_t fnc);
void iFwww(x86emu_t *emu, uintptr_t fnc);
void iFwpp(x86emu_t *emu, uintptr_t fnc);
void iFiwC(x86emu_t *emu, uintptr_t fnc);
void iFiii(x86emu_t *emu, uintptr_t fnc);
void iFiiI(x86emu_t *emu, uintptr_t fnc);
void iFiiu(x86emu_t *emu, uintptr_t fnc);
void iFiip(x86emu_t *emu, uintptr_t fnc);
void iFiiO(x86emu_t *emu, uintptr_t fnc);
void iFiII(x86emu_t *emu, uintptr_t fnc);
void iFiui(x86emu_t *emu, uintptr_t fnc);
void iFiuu(x86emu_t *emu, uintptr_t fnc);
void iFiup(x86emu_t *emu, uintptr_t fnc);
void iFiLN(x86emu_t *emu, uintptr_t fnc);
void iFipi(x86emu_t *emu, uintptr_t fnc);
void iFipu(x86emu_t *emu, uintptr_t fnc);
void iFipL(x86emu_t *emu, uintptr_t fnc);
void iFipp(x86emu_t *emu, uintptr_t fnc);
void iFCiW(x86emu_t *emu, uintptr_t fnc);
void iFuwp(x86emu_t *emu, uintptr_t fnc);
void iFuii(x86emu_t *emu, uintptr_t fnc);
void iFuip(x86emu_t *emu, uintptr_t fnc);
void iFuui(x86emu_t *emu, uintptr_t fnc);
void iFuuu(x86emu_t *emu, uintptr_t fnc);
void iFuup(x86emu_t *emu, uintptr_t fnc);
void iFuLp(x86emu_t *emu, uintptr_t fnc);
void iFupi(x86emu_t *emu, uintptr_t fnc);
void iFupp(x86emu_t *emu, uintptr_t fnc);
void iFfff(x86emu_t *emu, uintptr_t fnc);
void iFpwp(x86emu_t *emu, uintptr_t fnc);
void iFpii(x86emu_t *emu, uintptr_t fnc);
void iFpiI(x86emu_t *emu, uintptr_t fnc);
void iFpiu(x86emu_t *emu, uintptr_t fnc);
void iFpiU(x86emu_t *emu, uintptr_t fnc);
void iFpil(x86emu_t *emu, uintptr_t fnc);
void iFpiL(x86emu_t *emu, uintptr_t fnc);
void iFpip(x86emu_t *emu, uintptr_t fnc);
void iFpiV(x86emu_t *emu, uintptr_t fnc);
void iFpIi(x86emu_t *emu, uintptr_t fnc);
void iFpII(x86emu_t *emu, uintptr_t fnc);
void iFpCp(x86emu_t *emu, uintptr_t fnc);
void iFpui(x86emu_t *emu, uintptr_t fnc);
void iFpuu(x86emu_t *emu, uintptr_t fnc);
void iFpuU(x86emu_t *emu, uintptr_t fnc);
void iFpuL(x86emu_t *emu, uintptr_t fnc);
void iFpup(x86emu_t *emu, uintptr_t fnc);
void iFpuV(x86emu_t *emu, uintptr_t fnc);
void iFpu2(x86emu_t *emu, uintptr_t fnc);
void iFpuP(x86emu_t *emu, uintptr_t fnc);
void iFpUi(x86emu_t *emu, uintptr_t fnc);
void iFpUU(x86emu_t *emu, uintptr_t fnc);
void iFpUp(x86emu_t *emu, uintptr_t fnc);
void iFpUP(x86emu_t *emu, uintptr_t fnc);
void iFpfu(x86emu_t *emu, uintptr_t fnc);
void iFpff(x86emu_t *emu, uintptr_t fnc);
void iFpdd(x86emu_t *emu, uintptr_t fnc);
void iFpli(x86emu_t *emu, uintptr_t fnc);
void iFpll(x86emu_t *emu, uintptr_t fnc);
void iFplp(x86emu_t *emu, uintptr_t fnc);
void iFpLi(x86emu_t *emu, uintptr_t fnc);
void iFpLL(x86emu_t *emu, uintptr_t fnc);
void iFpLp(x86emu_t *emu, uintptr_t fnc);
void iFppi(x86emu_t *emu, uintptr_t fnc);
void iFppI(x86emu_t *emu, uintptr_t fnc);
void iFppC(x86emu_t *emu, uintptr_t fnc);
void iFppW(x86emu_t *emu, uintptr_t fnc);
void iFppu(x86emu_t *emu, uintptr_t fnc);
void iFppU(x86emu_t *emu, uintptr_t fnc);
void iFppd(x86emu_t *emu, uintptr_t fnc);
void iFppl(x86emu_t *emu, uintptr_t fnc);
void iFppL(x86emu_t *emu, uintptr_t fnc);
void iFppp(x86emu_t *emu, uintptr_t fnc);
void iFppV(x86emu_t *emu, uintptr_t fnc);
void iFppP(x86emu_t *emu, uintptr_t fnc);
void iFppG(x86emu_t *emu, uintptr_t fnc);
void iFpOu(x86emu_t *emu, uintptr_t fnc);
void iFpPU(x86emu_t *emu, uintptr_t fnc);
void iFpPp(x86emu_t *emu, uintptr_t fnc);
void iFpPP(x86emu_t *emu, uintptr_t fnc);
void iFpGG(x86emu_t *emu, uintptr_t fnc);
void iFSpi(x86emu_t *emu, uintptr_t fnc);
void iFSpL(x86emu_t *emu, uintptr_t fnc);
void IFiIi(x86emu_t *emu, uintptr_t fnc);
void IFpIi(x86emu_t *emu, uintptr_t fnc);
void IFppi(x86emu_t *emu, uintptr_t fnc);
void IFppI(x86emu_t *emu, uintptr_t fnc);
void IFppu(x86emu_t *emu, uintptr_t fnc);
void IFSIi(x86emu_t *emu, uintptr_t fnc);
void CFipp(x86emu_t *emu, uintptr_t fnc);
void CFuff(x86emu_t *emu, uintptr_t fnc);
void CFuLu(x86emu_t *emu, uintptr_t fnc);
void uFEpW(x86emu_t *emu, uintptr_t fnc);
void uFEpu(x86emu_t *emu, uintptr_t fnc);
void uFEpU(x86emu_t *emu, uintptr_t fnc);
void uFEpp(x86emu_t *emu, uintptr_t fnc);
void uFipu(x86emu_t *emu, uintptr_t fnc);
void uFuip(x86emu_t *emu, uintptr_t fnc);
void uFuuu(x86emu_t *emu, uintptr_t fnc);
void uFuup(x86emu_t *emu, uintptr_t fnc);
void uFufp(x86emu_t *emu, uintptr_t fnc);
void uFupi(x86emu_t *emu, uintptr_t fnc);
void uFupu(x86emu_t *emu, uintptr_t fnc);
void uFupp(x86emu_t *emu, uintptr_t fnc);
void uFpii(x86emu_t *emu, uintptr_t fnc);
void uFpip(x86emu_t *emu, uintptr_t fnc);
void uFpCi(x86emu_t *emu, uintptr_t fnc);
void uFpWi(x86emu_t *emu, uintptr_t fnc);
void uFpWu(x86emu_t *emu, uintptr_t fnc);
void uFpWf(x86emu_t *emu, uintptr_t fnc);
void uFpWp(x86emu_t *emu, uintptr_t fnc);
void uFpui(x86emu_t *emu, uintptr_t fnc);
void uFpuC(x86emu_t *emu, uintptr_t fnc);
void uFpuu(x86emu_t *emu, uintptr_t fnc);
void uFpuL(x86emu_t *emu, uintptr_t fnc);
void uFpup(x86emu_t *emu, uintptr_t fnc);
void uFpfu(x86emu_t *emu, uintptr_t fnc);
void uFpLp(x86emu_t *emu, uintptr_t fnc);
void uFppi(x86emu_t *emu, uintptr_t fnc);
void uFppu(x86emu_t *emu, uintptr_t fnc);
void uFppp(x86emu_t *emu, uintptr_t fnc);
void UFUUU(x86emu_t *emu, uintptr_t fnc);
void UFpiU(x86emu_t *emu, uintptr_t fnc);
void UFppi(x86emu_t *emu, uintptr_t fnc);
void UFppu(x86emu_t *emu, uintptr_t fnc);
void fFuii(x86emu_t *emu, uintptr_t fnc);
void fFfff(x86emu_t *emu, uintptr_t fnc);
void fFffp(x86emu_t *emu, uintptr_t fnc);
void fFppu(x86emu_t *emu, uintptr_t fnc);
void fFppp(x86emu_t *emu, uintptr_t fnc);
void dFddd(x86emu_t *emu, uintptr_t fnc);
void dFddp(x86emu_t *emu, uintptr_t fnc);
void dFpdd(x86emu_t *emu, uintptr_t fnc);
void dFppi(x86emu_t *emu, uintptr_t fnc);
void dFppu(x86emu_t *emu, uintptr_t fnc);
void dFppp(x86emu_t *emu, uintptr_t fnc);
void lFipi(x86emu_t *emu, uintptr_t fnc);
void lFipL(x86emu_t *emu, uintptr_t fnc);
void lFlll(x86emu_t *emu, uintptr_t fnc);
void lFlpi(x86emu_t *emu, uintptr_t fnc);
void lFpli(x86emu_t *emu, uintptr_t fnc);
void lFpLp(x86emu_t *emu, uintptr_t fnc);
void lFppi(x86emu_t *emu, uintptr_t fnc);
void lFppL(x86emu_t *emu, uintptr_t fnc);
void lFSpl(x86emu_t *emu, uintptr_t fnc);
void LFiii(x86emu_t *emu, uintptr_t fnc);
void LFLLl(x86emu_t *emu, uintptr_t fnc);
void LFLpu(x86emu_t *emu, uintptr_t fnc);
void LFLpL(x86emu_t *emu, uintptr_t fnc);
void LFpii(x86emu_t *emu, uintptr_t fnc);
void LFpip(x86emu_t *emu, uintptr_t fnc);
void LFpLi(x86emu_t *emu, uintptr_t fnc);
void LFpLp(x86emu_t *emu, uintptr_t fnc);
void LFppi(x86emu_t *emu, uintptr_t fnc);
void LFppL(x86emu_t *emu, uintptr_t fnc);
void LFppp(x86emu_t *emu, uintptr_t fnc);
void LFSpL(x86emu_t *emu, uintptr_t fnc);
void pFEip(x86emu_t *emu, uintptr_t fnc);
void pFEiV(x86emu_t *emu, uintptr_t fnc);
void pFEup(x86emu_t *emu, uintptr_t fnc);
void pFEpi(x86emu_t *emu, uintptr_t fnc);
void pFEpu(x86emu_t *emu, uintptr_t fnc);
void pFEpp(x86emu_t *emu, uintptr_t fnc);
void pFEpV(x86emu_t *emu, uintptr_t fnc);
void pFiii(x86emu_t *emu, uintptr_t fnc);
void pFiiu(x86emu_t *emu, uintptr_t fnc);
void pFiip(x86emu_t *emu, uintptr_t fnc);
void pFiIi(x86emu_t *emu, uintptr_t fnc);
void pFiIp(x86emu_t *emu, uintptr_t fnc);
void pFiup(x86emu_t *emu, uintptr_t fnc);
void pFipi(x86emu_t *emu, uintptr_t fnc);
void pFipu(x86emu_t *emu, uintptr_t fnc);
void pFipp(x86emu_t *emu, uintptr_t fnc);
void pFIpi(x86emu_t *emu, uintptr_t fnc);
void pFCiW(x86emu_t *emu, uintptr_t fnc);
void pFWWW(x86emu_t *emu, uintptr_t fnc);
void pFuui(x86emu_t *emu, uintptr_t fnc);
void pFuuu(x86emu_t *emu, uintptr_t fnc);
void pFulu(x86emu_t *emu, uintptr_t fnc);
void pFupi(x86emu_t *emu, uintptr_t fnc);
void pFupL(x86emu_t *emu, uintptr_t fnc);
void pFUpi(x86emu_t *emu, uintptr_t fnc);
void pFdUU(x86emu_t *emu, uintptr_t fnc);
void pFddd(x86emu_t *emu, uintptr_t fnc);
void pFLLp(x86emu_t *emu, uintptr_t fnc);
void pFLpp(x86emu_t *emu, uintptr_t fnc);
void pFpii(x86emu_t *emu, uintptr_t fnc);
void pFpiu(x86emu_t *emu, uintptr_t fnc);
void pFpiU(x86emu_t *emu, uintptr_t fnc);
void pFpid(x86emu_t *emu, uintptr_t fnc);
void pFpil(x86emu_t *emu, uintptr_t fnc);
void pFpiL(x86emu_t *emu, uintptr_t fnc);
void pFpip(x86emu_t *emu, uintptr_t fnc);
void pFpIi(x86emu_t *emu, uintptr_t fnc);
void pFpCu(x86emu_t *emu, uintptr_t fnc);
void pFpWW(x86emu_t *emu, uintptr_t fnc);
void pFpui(x86emu_t *emu, uintptr_t fnc);
void pFpuu(x86emu_t *emu, uintptr_t fnc);
void pFpuL(x86emu_t *emu, uintptr_t fnc);
void pFpup(x86emu_t *emu, uintptr_t fnc);
void pFpuG(x86emu_t *emu, uintptr_t fnc);
void pFpUi(x86emu_t *emu, uintptr_t fnc);
void pFpUp(x86emu_t *emu, uintptr_t fnc);
void pFpdu(x86emu_t *emu, uintptr_t fnc);
void pFpdd(x86emu_t *emu, uintptr_t fnc);
void pFplC(x86emu_t *emu, uintptr_t fnc);
void pFplu(x86emu_t *emu, uintptr_t fnc);
void pFpll(x86emu_t *emu, uintptr_t fnc);
void pFplp(x86emu_t *emu, uintptr_t fnc);
void pFpLu(x86emu_t *emu, uintptr_t fnc);
void pFpLL(x86emu_t *emu, uintptr_t fnc);
void pFpLp(x86emu_t *emu, uintptr_t fnc);
void pFppi(x86emu_t *emu, uintptr_t fnc);
void pFppI(x86emu_t *emu, uintptr_t fnc);
void pFppC(x86emu_t *emu, uintptr_t fnc);
void pFppu(x86emu_t *emu, uintptr_t fnc);
void pFppU(x86emu_t *emu, uintptr_t fnc);
void pFppf(x86emu_t *emu, uintptr_t fnc);
void pFppl(x86emu_t *emu, uintptr_t fnc);
void pFppL(x86emu_t *emu, uintptr_t fnc);
void pFppp(x86emu_t *emu, uintptr_t fnc);
void pFppV(x86emu_t *emu, uintptr_t fnc);
void pFpOM(x86emu_t *emu, uintptr_t fnc);
void pFpss(x86emu_t *emu, uintptr_t fnc);
void pFSpl(x86emu_t *emu, uintptr_t fnc);
void pFSpp(x86emu_t *emu, uintptr_t fnc);
void vFEiip(x86emu_t *emu, uintptr_t fnc);
void vFEipp(x86emu_t *emu, uintptr_t fnc);
void vFEipV(x86emu_t *emu, uintptr_t fnc);
void vFEpii(x86emu_t *emu, uintptr_t fnc);
void vFEpiL(x86emu_t *emu, uintptr_t fnc);
void vFEpip(x86emu_t *emu, uintptr_t fnc);
void vFEpuu(x86emu_t *emu, uintptr_t fnc);
void vFEpup(x86emu_t *emu, uintptr_t fnc);
void vFEpUp(x86emu_t *emu, uintptr_t fnc);
void vFEppp(x86emu_t *emu, uintptr_t fnc);
void vFEppV(x86emu_t *emu, uintptr_t fnc);
void vFEpPp(x86emu_t *emu, uintptr_t fnc);
void vFcccc(x86emu_t *emu, uintptr_t fnc);
void vFwwww(x86emu_t *emu, uintptr_t fnc);
void vFiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiip(x86emu_t *emu, uintptr_t fnc);
void vFiiCp(x86emu_t *emu, uintptr_t fnc);
void vFiill(x86emu_t *emu, uintptr_t fnc);
void vFiipp(x86emu_t *emu, uintptr_t fnc);
void vFiipV(x86emu_t *emu, uintptr_t fnc);
void vFiuip(x86emu_t *emu, uintptr_t fnc);
void vFiuuu(x86emu_t *emu, uintptr_t fnc);
void vFiulp(x86emu_t *emu, uintptr_t fnc);
void vFiupV(x86emu_t *emu, uintptr_t fnc);
void vFifff(x86emu_t *emu, uintptr_t fnc);
void vFiddd(x86emu_t *emu, uintptr_t fnc);
void vFilip(x86emu_t *emu, uintptr_t fnc);
void vFilll(x86emu_t *emu, uintptr_t fnc);
void vFilpu(x86emu_t *emu, uintptr_t fnc);
void vFilpp(x86emu_t *emu, uintptr_t fnc);
void vFiLLL(x86emu_t *emu, uintptr_t fnc);
void vFipii(x86emu_t *emu, uintptr_t fnc);
void vFipup(x86emu_t *emu, uintptr_t fnc);
void vFipll(x86emu_t *emu, uintptr_t fnc);
void vFippp(x86emu_t *emu, uintptr_t fnc);
void vFCCCC(x86emu_t *emu, uintptr_t fnc);
void vFWWWW(x86emu_t *emu, uintptr_t fnc);
void vFuccc(x86emu_t *emu, uintptr_t fnc);
void vFuwww(x86emu_t *emu, uintptr_t fnc);
void vFuiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiip(x86emu_t *emu, uintptr_t fnc);
void vFuiui(x86emu_t *emu, uintptr_t fnc);
void vFuiuC(x86emu_t *emu, uintptr_t fnc);
void vFuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiup(x86emu_t *emu, uintptr_t fnc);
void vFuifi(x86emu_t *emu, uintptr_t fnc);
void vFuiff(x86emu_t *emu, uintptr_t fnc);
void vFuidd(x86emu_t *emu, uintptr_t fnc);
void vFuill(x86emu_t *emu, uintptr_t fnc);
void vFuilp(x86emu_t *emu, uintptr_t fnc);
void vFuiLL(x86emu_t *emu, uintptr_t fnc);
void vFuipi(x86emu_t *emu, uintptr_t fnc);
void vFuipu(x86emu_t *emu, uintptr_t fnc);
void vFuipp(x86emu_t *emu, uintptr_t fnc);
void vFuWWW(x86emu_t *emu, uintptr_t fnc);
void vFuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuiu(x86emu_t *emu, uintptr_t fnc);
void vFuuil(x86emu_t *emu, uintptr_t fnc);
void vFuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuCu(x86emu_t *emu, uintptr_t fnc);
void vFuuCp(x86emu_t *emu, uintptr_t fnc);
void vFuuui(x86emu_t *emu, uintptr_t fnc);
void vFuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuf(x86emu_t *emu, uintptr_t fnc);
void vFuuud(x86emu_t *emu, uintptr_t fnc);
void vFuuul(x86emu_t *emu, uintptr_t fnc);
void vFuuup(x86emu_t *emu, uintptr_t fnc);
void vFuuff(x86emu_t *emu, uintptr_t fnc);
void vFuuli(x86emu_t *emu, uintptr_t fnc);
void vFuulp(x86emu_t *emu, uintptr_t fnc);
void vFuuLl(x86emu_t *emu, uintptr_t fnc);
void vFuupi(x86emu_t *emu, uintptr_t fnc);
void vFuupp(x86emu_t *emu, uintptr_t fnc);
void vFufff(x86emu_t *emu, uintptr_t fnc);
void vFuddd(x86emu_t *emu, uintptr_t fnc);
void vFuluL(x86emu_t *emu, uintptr_t fnc);
void vFullC(x86emu_t *emu, uintptr_t fnc);
void vFulll(x86emu_t *emu, uintptr_t fnc);
void vFullp(x86emu_t *emu, uintptr_t fnc);
void vFulpi(x86emu_t *emu, uintptr_t fnc);
void vFulpu(x86emu_t *emu, uintptr_t fnc);
void vFulpp(x86emu_t *emu, uintptr_t fnc);
void vFuLui(x86emu_t *emu, uintptr_t fnc);
void vFuLup(x86emu_t *emu, uintptr_t fnc);
void vFuLLL(x86emu_t *emu, uintptr_t fnc);
void vFupii(x86emu_t *emu, uintptr_t fnc);
void vFuppi(x86emu_t *emu, uintptr_t fnc);
void vFuppu(x86emu_t *emu, uintptr_t fnc);
void vFUUpi(x86emu_t *emu, uintptr_t fnc);
void vFffff(x86emu_t *emu, uintptr_t fnc);
void vFdddd(x86emu_t *emu, uintptr_t fnc);
void vFllii(x86emu_t *emu, uintptr_t fnc);
void vFLppi(x86emu_t *emu, uintptr_t fnc);
void vFpiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiu(x86emu_t *emu, uintptr_t fnc);
void vFpiip(x86emu_t *emu, uintptr_t fnc);
void vFpiuu(x86emu_t *emu, uintptr_t fnc);
void vFpiuL(x86emu_t *emu, uintptr_t fnc);
void vFpiup(x86emu_t *emu, uintptr_t fnc);
void vFpiUu(x86emu_t *emu, uintptr_t fnc);
void vFpiUU(x86emu_t *emu, uintptr_t fnc);
void vFpifi(x86emu_t *emu, uintptr_t fnc);
void vFpipi(x86emu_t *emu, uintptr_t fnc);
void vFpipu(x86emu_t *emu, uintptr_t fnc);
void vFpipp(x86emu_t *emu, uintptr_t fnc);
void vFpipG(x86emu_t *emu, uintptr_t fnc);
void vFpIdi(x86emu_t *emu, uintptr_t fnc);
void vFpCiW(x86emu_t *emu, uintptr_t fnc);
void vFpuip(x86emu_t *emu, uintptr_t fnc);
void vFpuui(x86emu_t *emu, uintptr_t fnc);
void vFpuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuup(x86emu_t *emu, uintptr_t fnc);
void vFpuuV(x86emu_t *emu, uintptr_t fnc);
void vFpudd(x86emu_t *emu, uintptr_t fnc);
void vFpupp(x86emu_t *emu, uintptr_t fnc);
void vFpupP(x86emu_t *emu, uintptr_t fnc);
void vFpUui(x86emu_t *emu, uintptr_t fnc);
void vFpUuu(x86emu_t *emu, uintptr_t fnc);
void vFpUup(x86emu_t *emu, uintptr_t fnc);
void vFpUUi(x86emu_t *emu, uintptr_t fnc);
void vFpUUu(x86emu_t *emu, uintptr_t fnc);
void vFpUUp(x86emu_t *emu, uintptr_t fnc);
void vFpUpp(x86emu_t *emu, uintptr_t fnc);
void vFpUPP(x86emu_t *emu, uintptr_t fnc);
void vFpfff(x86emu_t *emu, uintptr_t fnc);
void vFpdii(x86emu_t *emu, uintptr_t fnc);
void vFpddi(x86emu_t *emu, uintptr_t fnc);
void vFpddd(x86emu_t *emu, uintptr_t fnc);
void vFplpp(x86emu_t *emu, uintptr_t fnc);
void vFpLLL(x86emu_t *emu, uintptr_t fnc);
void vFppii(x86emu_t *emu, uintptr_t fnc);
void vFppiu(x86emu_t *emu, uintptr_t fnc);
void vFppid(x86emu_t *emu, uintptr_t fnc);
void vFppil(x86emu_t *emu, uintptr_t fnc);
void vFppiL(x86emu_t *emu, uintptr_t fnc);
void vFppip(x86emu_t *emu, uintptr_t fnc);
void vFppiG(x86emu_t *emu, uintptr_t fnc);
void vFppui(x86emu_t *emu, uintptr_t fnc);
void vFppuu(x86emu_t *emu, uintptr_t fnc);
void vFppup(x86emu_t *emu, uintptr_t fnc);
void vFppfi(x86emu_t *emu, uintptr_t fnc);
void vFppdu(x86emu_t *emu, uintptr_t fnc);
void vFppdd(x86emu_t *emu, uintptr_t fnc);
void vFppdp(x86emu_t *emu, uintptr_t fnc);
void vFpplp(x86emu_t *emu, uintptr_t fnc);
void vFppLp(x86emu_t *emu, uintptr_t fnc);
void vFpppi(x86emu_t *emu, uintptr_t fnc);
void vFpppI(x86emu_t *emu, uintptr_t fnc);
void vFpppu(x86emu_t *emu, uintptr_t fnc);
void vFpppU(x86emu_t *emu, uintptr_t fnc);
void vFpppd(x86emu_t *emu, uintptr_t fnc);
void vFpppL(x86emu_t *emu, uintptr_t fnc);
void vFpppp(x86emu_t *emu, uintptr_t fnc);
void vFpppV(x86emu_t *emu, uintptr_t fnc);
void vFpppG(x86emu_t *emu, uintptr_t fnc);
void vFppGu(x86emu_t *emu, uintptr_t fnc);
void vFpPpp(x86emu_t *emu, uintptr_t fnc);
void vFSppi(x86emu_t *emu, uintptr_t fnc);
void cFpiii(x86emu_t *emu, uintptr_t fnc);
void iFEiip(x86emu_t *emu, uintptr_t fnc);
void iFEiiN(x86emu_t *emu, uintptr_t fnc);
void iFEipL(x86emu_t *emu, uintptr_t fnc);
void iFEipp(x86emu_t *emu, uintptr_t fnc);
void iFEupu(x86emu_t *emu, uintptr_t fnc);
void iFEupp(x86emu_t *emu, uintptr_t fnc);
void iFELup(x86emu_t *emu, uintptr_t fnc);
void iFEpii(x86emu_t *emu, uintptr_t fnc);
void iFEpip(x86emu_t *emu, uintptr_t fnc);
void iFEpuu(x86emu_t *emu, uintptr_t fnc);
void iFEpup(x86emu_t *emu, uintptr_t fnc);
void iFEpUp(x86emu_t *emu, uintptr_t fnc);
void iFEpLi(x86emu_t *emu, uintptr_t fnc);
void iFEppi(x86emu_t *emu, uintptr_t fnc);
void iFEppu(x86emu_t *emu, uintptr_t fnc);
void iFEppd(x86emu_t *emu, uintptr_t fnc);
void iFEppL(x86emu_t *emu, uintptr_t fnc);
void iFEppp(x86emu_t *emu, uintptr_t fnc);
void iFEppV(x86emu_t *emu, uintptr_t fnc);
void iFEpOu(x86emu_t *emu, uintptr_t fnc);
void iFEpOV(x86emu_t *emu, uintptr_t fnc);
void iFEpPp(x86emu_t *emu, uintptr_t fnc);
void iFEPpp(x86emu_t *emu, uintptr_t fnc);
void iFwwww(x86emu_t *emu, uintptr_t fnc);
void iFwppp(x86emu_t *emu, uintptr_t fnc);
void iFiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiu(x86emu_t *emu, uintptr_t fnc);
void iFiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiII(x86emu_t *emu, uintptr_t fnc);
void iFiiui(x86emu_t *emu, uintptr_t fnc);
void iFiipi(x86emu_t *emu, uintptr_t fnc);
void iFiipp(x86emu_t *emu, uintptr_t fnc);
void iFiuwp(x86emu_t *emu, uintptr_t fnc);
void iFiuii(x86emu_t *emu, uintptr_t fnc);
void iFiuui(x86emu_t *emu, uintptr_t fnc);
void iFiLpL(x86emu_t *emu, uintptr_t fnc);
void iFipii(x86emu_t *emu, uintptr_t fnc);
void iFipip(x86emu_t *emu, uintptr_t fnc);
void iFipui(x86emu_t *emu, uintptr_t fnc);
void iFipup(x86emu_t *emu, uintptr_t fnc);
void iFipLi(x86emu_t *emu, uintptr_t fnc);
void iFipLp(x86emu_t *emu, uintptr_t fnc);
void iFippi(x86emu_t *emu, uintptr_t fnc);
void iFippu(x86emu_t *emu, uintptr_t fnc);
void iFippL(x86emu_t *emu, uintptr_t fnc);
void iFippp(x86emu_t *emu, uintptr_t fnc);
void iFipON(x86emu_t *emu, uintptr_t fnc);
void iFuiup(x86emu_t *emu, uintptr_t fnc);
void iFuipu(x86emu_t *emu, uintptr_t fnc);
void iFuipp(x86emu_t *emu, uintptr_t fnc);
void iFupup(x86emu_t *emu, uintptr_t fnc);
void iFuppi(x86emu_t *emu, uintptr_t fnc);
void iFuppp(x86emu_t *emu, uintptr_t fnc);
void iFLppp(x86emu_t *emu, uintptr_t fnc);
void iFpwww(x86emu_t *emu, uintptr_t fnc);
void iFpwpp(x86emu_t *emu, uintptr_t fnc);
void iFpiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiI(x86emu_t *emu, uintptr_t fnc);
void iFpiiu(x86emu_t *emu, uintptr_t fnc);
void iFpiid(x86emu_t *emu, uintptr_t fnc);
void iFpiiL(x86emu_t *emu, uintptr_t fnc);
void iFpiip(x86emu_t *emu, uintptr_t fnc);
void iFpiuu(x86emu_t *emu, uintptr_t fnc);
void iFpiuL(x86emu_t *emu, uintptr_t fnc);
void iFpiup(x86emu_t *emu, uintptr_t fnc);
void iFpiUp(x86emu_t *emu, uintptr_t fnc);
void iFpild(x86emu_t *emu, uintptr_t fnc);
void iFpipi(x86emu_t *emu, uintptr_t fnc);
void iFpipC(x86emu_t *emu, uintptr_t fnc);
void iFpipL(x86emu_t *emu, uintptr_t fnc);
void iFpipp(x86emu_t *emu, uintptr_t fnc);
void iFpipV(x86emu_t *emu, uintptr_t fnc);
void iFpIip(x86emu_t *emu, uintptr_t fnc);
void iFpCCC(x86emu_t *emu, uintptr_t fnc);
void iFpCpi(x86emu_t *emu, uintptr_t fnc);
void iFpWWu(x86emu_t *emu, uintptr_t fnc);
void iFpuwp(x86emu_t *emu, uintptr_t fnc);
void iFpuii(x86emu_t *emu, uintptr_t fnc);
void iFpuiu(x86emu_t *emu, uintptr_t fnc);
void iFpuiL(x86emu_t *emu, uintptr_t fnc);
void iFpuip(x86emu_t *emu, uintptr_t fnc);
void iFpuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuu(x86emu_t *emu, uintptr_t fnc);
void iFpuup(x86emu_t *emu, uintptr_t fnc);
void iFpuUp(x86emu_t *emu, uintptr_t fnc);
void iFpuLL(x86emu_t *emu, uintptr_t fnc);
void iFpuLp(x86emu_t *emu, uintptr_t fnc);
void iFpupi(x86emu_t *emu, uintptr_t fnc);
void iFpupu(x86emu_t *emu, uintptr_t fnc);
void iFpupp(x86emu_t *emu, uintptr_t fnc);
void iFpupV(x86emu_t *emu, uintptr_t fnc);
void iFpuPU(x86emu_t *emu, uintptr_t fnc);
void iFpUup(x86emu_t *emu, uintptr_t fnc);
void iFpUUU(x86emu_t *emu, uintptr_t fnc);
void iFpUpp(x86emu_t *emu, uintptr_t fnc);
void iFplii(x86emu_t *emu, uintptr_t fnc);
void iFplip(x86emu_t *emu, uintptr_t fnc);
void iFpLpi(x86emu_t *emu, uintptr_t fnc);
void iFpLpL(x86emu_t *emu, uintptr_t fnc);
void iFppii(x86emu_t *emu, uintptr_t fnc);
void iFppiu(x86emu_t *emu, uintptr_t fnc);
void iFppiU(x86emu_t *emu, uintptr_t fnc);
void iFppiL(x86emu_t *emu, uintptr_t fnc);
void iFppip(x86emu_t *emu, uintptr_t fnc);
void iFppIL(x86emu_t *emu, uintptr_t fnc);
void iFppCC(x86emu_t *emu, uintptr_t fnc);
void iFppuw(x86emu_t *emu, uintptr_t fnc);
void iFppui(x86emu_t *emu, uintptr_t fnc);
void iFppuW(x86emu_t *emu, uintptr_t fnc);
void iFppuu(x86emu_t *emu, uintptr_t fnc);
void iFppup(x86emu_t *emu, uintptr_t fnc);
void iFppdp(x86emu_t *emu, uintptr_t fnc);
void iFppll(x86emu_t *emu, uintptr_t fnc);
void iFpplp(x86emu_t *emu, uintptr_t fnc);
void iFppLi(x86emu_t *emu, uintptr_t fnc);
void iFppLL(x86emu_t *emu, uintptr_t fnc);
void iFppLp(x86emu_t *emu, uintptr_t fnc);
void iFpppi(x86emu_t *emu, uintptr_t fnc);
void iFpppC(x86emu_t *emu, uintptr_t fnc);
void iFpppu(x86emu_t *emu, uintptr_t fnc);
void iFpppU(x86emu_t *emu, uintptr_t fnc);
void iFpppL(x86emu_t *emu, uintptr_t fnc);
void iFpppp(x86emu_t *emu, uintptr_t fnc);
void iFpPpp(x86emu_t *emu, uintptr_t fnc);
void iFpGGi(x86emu_t *emu, uintptr_t fnc);
void IFEpIi(x86emu_t *emu, uintptr_t fnc);
void IFpIip(x86emu_t *emu, uintptr_t fnc);
void IFppii(x86emu_t *emu, uintptr_t fnc);
void IFppip(x86emu_t *emu, uintptr_t fnc);
void IFpppp(x86emu_t *emu, uintptr_t fnc);
void IFSIii(x86emu_t *emu, uintptr_t fnc);
void CFuuff(x86emu_t *emu, uintptr_t fnc);
void uFEipp(x86emu_t *emu, uintptr_t fnc);
void uFEupp(x86emu_t *emu, uintptr_t fnc);
void uFEpup(x86emu_t *emu, uintptr_t fnc);
void uFEppu(x86emu_t *emu, uintptr_t fnc);
void uFEppp(x86emu_t *emu, uintptr_t fnc);
void uFifff(x86emu_t *emu, uintptr_t fnc);
void uFippu(x86emu_t *emu, uintptr_t fnc);
void uFuuuu(x86emu_t *emu, uintptr_t fnc);
void uFpipu(x86emu_t *emu, uintptr_t fnc);
void uFpipp(x86emu_t *emu, uintptr_t fnc);
void uFpCCC(x86emu_t *emu, uintptr_t fnc);
void uFpuip(x86emu_t *emu, uintptr_t fnc);
void uFpuuu(x86emu_t *emu, uintptr_t fnc);
void uFpuup(x86emu_t *emu, uintptr_t fnc);
void uFpupu(x86emu_t *emu, uintptr_t fnc);
void uFppiu(x86emu_t *emu, uintptr_t fnc);
void uFppip(x86emu_t *emu, uintptr_t fnc);
void uFppuu(x86emu_t *emu, uintptr_t fnc);
void uFppup(x86emu_t *emu, uintptr_t fnc);
void uFppLp(x86emu_t *emu, uintptr_t fnc);
void uFpppi(x86emu_t *emu, uintptr_t fnc);
void uFpppu(x86emu_t *emu, uintptr_t fnc);
void uFpppp(x86emu_t *emu, uintptr_t fnc);
void uFpppV(x86emu_t *emu, uintptr_t fnc);
void UFpipp(x86emu_t *emu, uintptr_t fnc);
void UFppii(x86emu_t *emu, uintptr_t fnc);
void UFppip(x86emu_t *emu, uintptr_t fnc);
void UFpppp(x86emu_t *emu, uintptr_t fnc);
void UFSUii(x86emu_t *emu, uintptr_t fnc);
void dFpppp(x86emu_t *emu, uintptr_t fnc);
void lFEpip(x86emu_t *emu, uintptr_t fnc);
void lFiipL(x86emu_t *emu, uintptr_t fnc);
void lFipLi(x86emu_t *emu, uintptr_t fnc);
void lFipLI(x86emu_t *emu, uintptr_t fnc);
void lFipLl(x86emu_t *emu, uintptr_t fnc);
void lFipLL(x86emu_t *emu, uintptr_t fnc);
void lFippL(x86emu_t *emu, uintptr_t fnc);
void lFpili(x86emu_t *emu, uintptr_t fnc);
void lFpilp(x86emu_t *emu, uintptr_t fnc);
void lFpuip(x86emu_t *emu, uintptr_t fnc);
void lFpupp(x86emu_t *emu, uintptr_t fnc);
void lFpppL(x86emu_t *emu, uintptr_t fnc);
void LFippp(x86emu_t *emu, uintptr_t fnc);
void LFpLCL(x86emu_t *emu, uintptr_t fnc);
void LFpLLp(x86emu_t *emu, uintptr_t fnc);
void LFpLpL(x86emu_t *emu, uintptr_t fnc);
void LFpLpp(x86emu_t *emu, uintptr_t fnc);
void LFppii(x86emu_t *emu, uintptr_t fnc);
void LFppip(x86emu_t *emu, uintptr_t fnc);
void LFppLu(x86emu_t *emu, uintptr_t fnc);
void LFppLL(x86emu_t *emu, uintptr_t fnc);
void LFppLp(x86emu_t *emu, uintptr_t fnc);
void LFpppi(x86emu_t *emu, uintptr_t fnc);
void LFpppL(x86emu_t *emu, uintptr_t fnc);
void LFpppp(x86emu_t *emu, uintptr_t fnc);
void pFEipi(x86emu_t *emu, uintptr_t fnc);
void pFEipp(x86emu_t *emu, uintptr_t fnc);
void pFEipV(x86emu_t *emu, uintptr_t fnc);
void pFEupp(x86emu_t *emu, uintptr_t fnc);
void pFEpii(x86emu_t *emu, uintptr_t fnc);
void pFEpip(x86emu_t *emu, uintptr_t fnc);
void pFEplp(x86emu_t *emu, uintptr_t fnc);
void pFEppi(x86emu_t *emu, uintptr_t fnc);
void pFEppC(x86emu_t *emu, uintptr_t fnc);
void pFEppu(x86emu_t *emu, uintptr_t fnc);
void pFEppp(x86emu_t *emu, uintptr_t fnc);
void pFEppV(x86emu_t *emu, uintptr_t fnc);
void pFiiii(x86emu_t *emu, uintptr_t fnc);
void pFiiiu(x86emu_t *emu, uintptr_t fnc);
void pFiiuu(x86emu_t *emu, uintptr_t fnc);
void pFiiup(x86emu_t *emu, uintptr_t fnc);
void pFiipi(x86emu_t *emu, uintptr_t fnc);
void pFiipp(x86emu_t *emu, uintptr_t fnc);
void pFiIIi(x86emu_t *emu, uintptr_t fnc);
void pFillu(x86emu_t *emu, uintptr_t fnc);
void pFipii(x86emu_t *emu, uintptr_t fnc);
void pFipip(x86emu_t *emu, uintptr_t fnc);
void pFipup(x86emu_t *emu, uintptr_t fnc);
void pFippi(x86emu_t *emu, uintptr_t fnc);
void pFippu(x86emu_t *emu, uintptr_t fnc);
void pFuuii(x86emu_t *emu, uintptr_t fnc);
void pFuuuu(x86emu_t *emu, uintptr_t fnc);
void pFullu(x86emu_t *emu, uintptr_t fnc);
void pFffff(x86emu_t *emu, uintptr_t fnc);
void pFdipp(x86emu_t *emu, uintptr_t fnc);
void pFdddd(x86emu_t *emu, uintptr_t fnc);
void pFlfff(x86emu_t *emu, uintptr_t fnc);
void pFLiip(x86emu_t *emu, uintptr_t fnc);
void pFLppp(x86emu_t *emu, uintptr_t fnc);
void pFpiii(x86emu_t *emu, uintptr_t fnc);
void pFpiiu(x86emu_t *emu, uintptr_t fnc);
void pFpiip(x86emu_t *emu, uintptr_t fnc);
void pFpiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiLL(x86emu_t *emu, uintptr_t fnc);
void pFpipd(x86emu_t *emu, uintptr_t fnc);
void pFpipp(x86emu_t *emu, uintptr_t fnc);
void pFpipV(x86emu_t *emu, uintptr_t fnc);
void pFpuii(x86emu_t *emu, uintptr_t fnc);
void pFpuil(x86emu_t *emu, uintptr_t fnc);
void pFpuip(x86emu_t *emu, uintptr_t fnc);
void pFpuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupi(x86emu_t *emu, uintptr_t fnc);
void pFpupu(x86emu_t *emu, uintptr_t fnc);
void pFpdIU(x86emu_t *emu, uintptr_t fnc);
void pFplpl(x86emu_t *emu, uintptr_t fnc);
void pFpLip(x86emu_t *emu, uintptr_t fnc);
void pFpLLp(x86emu_t *emu, uintptr_t fnc);
void pFppii(x86emu_t *emu, uintptr_t fnc);
void pFppiu(x86emu_t *emu, uintptr_t fnc);
void pFppiL(x86emu_t *emu, uintptr_t fnc);
void pFppip(x86emu_t *emu, uintptr_t fnc);
void pFppuu(x86emu_t *emu, uintptr_t fnc);
void pFppuL(x86emu_t *emu, uintptr_t fnc);
void pFppup(x86emu_t *emu, uintptr_t fnc);
void pFppUU(x86emu_t *emu, uintptr_t fnc);
void pFppdd(x86emu_t *emu, uintptr_t fnc);
void pFppll(x86emu_t *emu, uintptr_t fnc);
void pFppLL(x86emu_t *emu, uintptr_t fnc);
void pFppLp(x86emu_t *emu, uintptr_t fnc);
void pFpppi(x86emu_t *emu, uintptr_t fnc);
void pFpppu(x86emu_t *emu, uintptr_t fnc);
void pFpppL(x86emu_t *emu, uintptr_t fnc);
void pFpppp(x86emu_t *emu, uintptr_t fnc);
void pFpppV(x86emu_t *emu, uintptr_t fnc);
void pFSppi(x86emu_t *emu, uintptr_t fnc);
void vFEippp(x86emu_t *emu, uintptr_t fnc);
void vFEpipu(x86emu_t *emu, uintptr_t fnc);
void vFEpuup(x86emu_t *emu, uintptr_t fnc);
void vFEpupp(x86emu_t *emu, uintptr_t fnc);
void vFEpLLp(x86emu_t *emu, uintptr_t fnc);
void vFEppip(x86emu_t *emu, uintptr_t fnc);
void vFEppiV(x86emu_t *emu, uintptr_t fnc);
void vFEppup(x86emu_t *emu, uintptr_t fnc);
void vFEpppi(x86emu_t *emu, uintptr_t fnc);
void vFEpppp(x86emu_t *emu, uintptr_t fnc);
void vFEpPpp(x86emu_t *emu, uintptr_t fnc);
void vFiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFiiuii(x86emu_t *emu, uintptr_t fnc);
void vFiiuup(x86emu_t *emu, uintptr_t fnc);
void vFiillu(x86emu_t *emu, uintptr_t fnc);
void vFiilll(x86emu_t *emu, uintptr_t fnc);
void vFiipii(x86emu_t *emu, uintptr_t fnc);
void vFiipll(x86emu_t *emu, uintptr_t fnc);
void vFiuiip(x86emu_t *emu, uintptr_t fnc);
void vFiuipi(x86emu_t *emu, uintptr_t fnc);
void vFiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFiulpp(x86emu_t *emu, uintptr_t fnc);
void vFiffff(x86emu_t *emu, uintptr_t fnc);
void vFidddd(x86emu_t *emu, uintptr_t fnc);
void vFilill(x86emu_t *emu, uintptr_t fnc);
void vFilipi(x86emu_t *emu, uintptr_t fnc);
void vFilipl(x86emu_t *emu, uintptr_t fnc);
void vFillll(x86emu_t *emu, uintptr_t fnc);
void vFiLLLL(x86emu_t *emu, uintptr_t fnc);
void vFipipu(x86emu_t *emu, uintptr_t fnc);
void vFipipp(x86emu_t *emu, uintptr_t fnc);
void vFipupi(x86emu_t *emu, uintptr_t fnc);
void vFucccc(x86emu_t *emu, uintptr_t fnc);
void vFuwwww(x86emu_t *emu, uintptr_t fnc);
void vFuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuiiup(x86emu_t *emu, uintptr_t fnc);
void vFuiill(x86emu_t *emu, uintptr_t fnc);
void vFuiIII(x86emu_t *emu, uintptr_t fnc);
void vFuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiuCi(x86emu_t *emu, uintptr_t fnc);
void vFuiuCu(x86emu_t *emu, uintptr_t fnc);
void vFuiuuu(x86emu_t *emu, uintptr_t fnc);
void vFuiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiupi(x86emu_t *emu, uintptr_t fnc);
void vFuifff(x86emu_t *emu, uintptr_t fnc);
void vFuiddd(x86emu_t *emu, uintptr_t fnc);
void vFuilll(x86emu_t *emu, uintptr_t fnc);
void vFuiLLL(x86emu_t *emu, uintptr_t fnc);
void vFuipii(x86emu_t *emu, uintptr_t fnc);
void vFuipip(x86emu_t *emu, uintptr_t fnc);
void vFuipup(x86emu_t *emu, uintptr_t fnc);
void vFuippp(x86emu_t *emu, uintptr_t fnc);
void vFuCCCC(x86emu_t *emu, uintptr_t fnc);
void vFuCuip(x86emu_t *emu, uintptr_t fnc);
void vFuCuup(x86emu_t *emu, uintptr_t fnc);
void vFuWWWW(x86emu_t *emu, uintptr_t fnc);
void vFuuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiip(x86emu_t *emu, uintptr_t fnc);
void vFuuiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiup(x86emu_t *emu, uintptr_t fnc);
void vFuuifi(x86emu_t *emu, uintptr_t fnc);
void vFuuipC(x86emu_t *emu, uintptr_t fnc);
void vFuuipu(x86emu_t *emu, uintptr_t fnc);
void vFuuipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiu(x86emu_t *emu, uintptr_t fnc);
void vFuuuil(x86emu_t *emu, uintptr_t fnc);
void vFuuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuuui(x86emu_t *emu, uintptr_t fnc);
void vFuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuli(x86emu_t *emu, uintptr_t fnc);
void vFuuull(x86emu_t *emu, uintptr_t fnc);
void vFuulll(x86emu_t *emu, uintptr_t fnc);
void vFuullp(x86emu_t *emu, uintptr_t fnc);
void vFuupii(x86emu_t *emu, uintptr_t fnc);
void vFuuppu(x86emu_t *emu, uintptr_t fnc);
void vFuffff(x86emu_t *emu, uintptr_t fnc);
void vFudddd(x86emu_t *emu, uintptr_t fnc);
void vFulill(x86emu_t *emu, uintptr_t fnc);
void vFullll(x86emu_t *emu, uintptr_t fnc);
void vFullpu(x86emu_t *emu, uintptr_t fnc);
void vFuLLLL(x86emu_t *emu, uintptr_t fnc);
void vFupiii(x86emu_t *emu, uintptr_t fnc);
void vFupupi(x86emu_t *emu, uintptr_t fnc);
void vFupupp(x86emu_t *emu, uintptr_t fnc);
void vFuplii(x86emu_t *emu, uintptr_t fnc);
void vFuppip(x86emu_t *emu, uintptr_t fnc);
void vFupppp(x86emu_t *emu, uintptr_t fnc);
void vFfffff(x86emu_t *emu, uintptr_t fnc);
void vFddddp(x86emu_t *emu, uintptr_t fnc);
void vFluipp(x86emu_t *emu, uintptr_t fnc);
void vFLpppi(x86emu_t *emu, uintptr_t fnc);
void vFpiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiiI(x86emu_t *emu, uintptr_t fnc);
void vFpiiiu(x86emu_t *emu, uintptr_t fnc);
void vFpiiip(x86emu_t *emu, uintptr_t fnc);
void vFpiiII(x86emu_t *emu, uintptr_t fnc);
void vFpiiff(x86emu_t *emu, uintptr_t fnc);
void vFpiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiIiI(x86emu_t *emu, uintptr_t fnc);
void vFpiIII(x86emu_t *emu, uintptr_t fnc);
void vFpiUUp(x86emu_t *emu, uintptr_t fnc);
void vFpilpp(x86emu_t *emu, uintptr_t fnc);
void vFpipii(x86emu_t *emu, uintptr_t fnc);
void vFpipiu(x86emu_t *emu, uintptr_t fnc);
void vFpuiip(x86emu_t *emu, uintptr_t fnc);
void vFpuipp(x86emu_t *emu, uintptr_t fnc);
void vFpuipV(x86emu_t *emu, uintptr_t fnc);
void vFpuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuuup(x86emu_t *emu, uintptr_t fnc);
void vFpuupp(x86emu_t *emu, uintptr_t fnc);
void vFpuUUu(x86emu_t *emu, uintptr_t fnc);
void vFpuddd(x86emu_t *emu, uintptr_t fnc);
void vFpupup(x86emu_t *emu, uintptr_t fnc);
void vFpUuiu(x86emu_t *emu, uintptr_t fnc);
void vFpUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpUUup(x86emu_t *emu, uintptr_t fnc);
void vFpUUUu(x86emu_t *emu, uintptr_t fnc);
void vFpUUUp(x86emu_t *emu, uintptr_t fnc);
void vFpffff(x86emu_t *emu, uintptr_t fnc);
void vFpdiII(x86emu_t *emu, uintptr_t fnc);
void vFpddii(x86emu_t *emu, uintptr_t fnc);
void vFpdddd(x86emu_t *emu, uintptr_t fnc);
void vFpddpp(x86emu_t *emu, uintptr_t fnc);
void vFpliil(x86emu_t *emu, uintptr_t fnc);
void vFplppp(x86emu_t *emu, uintptr_t fnc);
void vFpLLpp(x86emu_t *emu, uintptr_t fnc);
void vFppiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiu(x86emu_t *emu, uintptr_t fnc);
void vFppiip(x86emu_t *emu, uintptr_t fnc);
void vFppiup(x86emu_t *emu, uintptr_t fnc);
void vFppiff(x86emu_t *emu, uintptr_t fnc);
void vFppipi(x86emu_t *emu, uintptr_t fnc);
void vFppipp(x86emu_t *emu, uintptr_t fnc);
void vFppWui(x86emu_t *emu, uintptr_t fnc);
void vFppuui(x86emu_t *emu, uintptr_t fnc);
void vFppuuu(x86emu_t *emu, uintptr_t fnc);
void vFppuup(x86emu_t *emu, uintptr_t fnc);
void vFppudd(x86emu_t *emu, uintptr_t fnc);
void vFppupi(x86emu_t *emu, uintptr_t fnc);
void vFppupp(x86emu_t *emu, uintptr_t fnc);
void vFppddp(x86emu_t *emu, uintptr_t fnc);
void vFpppii(x86emu_t *emu, uintptr_t fnc);
void vFpppip(x86emu_t *emu, uintptr_t fnc);
void vFpppuu(x86emu_t *emu, uintptr_t fnc);
void vFpppup(x86emu_t *emu, uintptr_t fnc);
void vFpppdd(x86emu_t *emu, uintptr_t fnc);
void vFppppi(x86emu_t *emu, uintptr_t fnc);
void vFppppu(x86emu_t *emu, uintptr_t fnc);
void vFppppL(x86emu_t *emu, uintptr_t fnc);
void vFppppp(x86emu_t *emu, uintptr_t fnc);
void iFEiipp(x86emu_t *emu, uintptr_t fnc);
void iFEiipV(x86emu_t *emu, uintptr_t fnc);
void iFEiupp(x86emu_t *emu, uintptr_t fnc);
void iFEipip(x86emu_t *emu, uintptr_t fnc);
void iFEipuu(x86emu_t *emu, uintptr_t fnc);
void iFEippi(x86emu_t *emu, uintptr_t fnc);
void iFEippL(x86emu_t *emu, uintptr_t fnc);
void iFEippp(x86emu_t *emu, uintptr_t fnc);
void iFEuuuu(x86emu_t *emu, uintptr_t fnc);
void iFEpiii(x86emu_t *emu, uintptr_t fnc);
void iFEpiup(x86emu_t *emu, uintptr_t fnc);
void iFEpipi(x86emu_t *emu, uintptr_t fnc);
void iFEpipp(x86emu_t *emu, uintptr_t fnc);
void iFEpipV(x86emu_t *emu, uintptr_t fnc);
void iFEpupU(x86emu_t *emu, uintptr_t fnc);
void iFEpupp(x86emu_t *emu, uintptr_t fnc);
void iFEpupV(x86emu_t *emu, uintptr_t fnc);
void iFEpUup(x86emu_t *emu, uintptr_t fnc);
void iFEpUpP(x86emu_t *emu, uintptr_t fnc);
void iFEpLpp(x86emu_t *emu, uintptr_t fnc);
void iFEpLpV(x86emu_t *emu, uintptr_t fnc);
void iFEppii(x86emu_t *emu, uintptr_t fnc);
void iFEppip(x86emu_t *emu, uintptr_t fnc);
void iFEppiV(x86emu_t *emu, uintptr_t fnc);
void iFEpplp(x86emu_t *emu, uintptr_t fnc);
void iFEpppi(x86emu_t *emu, uintptr_t fnc);
void iFEpppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppV(x86emu_t *emu, uintptr_t fnc);
void iFEpPpp(x86emu_t *emu, uintptr_t fnc);
void iFiiipu(x86emu_t *emu, uintptr_t fnc);
void iFiiipp(x86emu_t *emu, uintptr_t fnc);
void iFiiupp(x86emu_t *emu, uintptr_t fnc);
void iFiipip(x86emu_t *emu, uintptr_t fnc);
void iFipiii(x86emu_t *emu, uintptr_t fnc);
void iFipipi(x86emu_t *emu, uintptr_t fnc);
void iFipipu(x86emu_t *emu, uintptr_t fnc);
void iFipuii(x86emu_t *emu, uintptr_t fnc);
void iFipuui(x86emu_t *emu, uintptr_t fnc);
void iFippui(x86emu_t *emu, uintptr_t fnc);
void iFippuu(x86emu_t *emu, uintptr_t fnc);
void iFippup(x86emu_t *emu, uintptr_t fnc);
void iFipppi(x86emu_t *emu, uintptr_t fnc);
void iFipppp(x86emu_t *emu, uintptr_t fnc);
void iFuppup(x86emu_t *emu, uintptr_t fnc);
void iFLpppp(x86emu_t *emu, uintptr_t fnc);
void iFpwwww(x86emu_t *emu, uintptr_t fnc);
void iFpwppp(x86emu_t *emu, uintptr_t fnc);
void iFpiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiu(x86emu_t *emu, uintptr_t fnc);
void iFpiiiL(x86emu_t *emu, uintptr_t fnc);
void iFpiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiui(x86emu_t *emu, uintptr_t fnc);
void iFpiiuu(x86emu_t *emu, uintptr_t fnc);
void iFpiipi(x86emu_t *emu, uintptr_t fnc);
void iFpiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiIip(x86emu_t *emu, uintptr_t fnc);
void iFpiuwp(x86emu_t *emu, uintptr_t fnc);
void iFpiupu(x86emu_t *emu, uintptr_t fnc);
void iFpiUUU(x86emu_t *emu, uintptr_t fnc);
void iFpipii(x86emu_t *emu, uintptr_t fnc);
void iFpipiL(x86emu_t *emu, uintptr_t fnc);
void iFpipip(x86emu_t *emu, uintptr_t fnc);
void iFpippi(x86emu_t *emu, uintptr_t fnc);
void iFpippp(x86emu_t *emu, uintptr_t fnc);
void iFpipGp(x86emu_t *emu, uintptr_t fnc);
void iFpIppp(x86emu_t *emu, uintptr_t fnc);
void iFpCCCC(x86emu_t *emu, uintptr_t fnc);
void iFpuiii(x86emu_t *emu, uintptr_t fnc);
void iFpuiup(x86emu_t *emu, uintptr_t fnc);
void iFpuill(x86emu_t *emu, uintptr_t fnc);
void iFpuipi(x86emu_t *emu, uintptr_t fnc);
void iFpuuip(x86emu_t *emu, uintptr_t fnc);
void iFpuuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuup(x86emu_t *emu, uintptr_t fnc);
void iFpuuLL(x86emu_t *emu, uintptr_t fnc);
void iFpuupu(x86emu_t *emu, uintptr_t fnc);
void iFpuupp(x86emu_t *emu, uintptr_t fnc);
void iFpuLpL(x86emu_t *emu, uintptr_t fnc);
void iFpuLpp(x86emu_t *emu, uintptr_t fnc);
void iFpupiU(x86emu_t *emu, uintptr_t fnc);
void iFpupuu(x86emu_t *emu, uintptr_t fnc);
void iFpupup(x86emu_t *emu, uintptr_t fnc);
void iFpuppu(x86emu_t *emu, uintptr_t fnc);
void iFpuppp(x86emu_t *emu, uintptr_t fnc);
void iFpuPpp(x86emu_t *emu, uintptr_t fnc);
void iFpUiUi(x86emu_t *emu, uintptr_t fnc);
void iFplluu(x86emu_t *emu, uintptr_t fnc);
void iFpLlpp(x86emu_t *emu, uintptr_t fnc);
void iFpLLpp(x86emu_t *emu, uintptr_t fnc);
void iFppiiu(x86emu_t *emu, uintptr_t fnc);
void iFppiip(x86emu_t *emu, uintptr_t fnc);
void iFppiIp(x86emu_t *emu, uintptr_t fnc);
void iFppiup(x86emu_t *emu, uintptr_t fnc);
void iFppiLL(x86emu_t *emu, uintptr_t fnc);
void iFppipi(x86emu_t *emu, uintptr_t fnc);
void iFppipu(x86emu_t *emu, uintptr_t fnc);
void iFppipp(x86emu_t *emu, uintptr_t fnc);
void iFppuwp(x86emu_t *emu, uintptr_t fnc);
void iFppuip(x86emu_t *emu, uintptr_t fnc);
void iFppupi(x86emu_t *emu, uintptr_t fnc);
void iFppupp(x86emu_t *emu, uintptr_t fnc);
void iFppllp(x86emu_t *emu, uintptr_t fnc);
void iFpplpp(x86emu_t *emu, uintptr_t fnc);
void iFppLip(x86emu_t *emu, uintptr_t fnc);
void iFppLpi(x86emu_t *emu, uintptr_t fnc);
void iFppLpL(x86emu_t *emu, uintptr_t fnc);
void iFppLpp(x86emu_t *emu, uintptr_t fnc);
void iFpppii(x86emu_t *emu, uintptr_t fnc);
void iFpppiu(x86emu_t *emu, uintptr_t fnc);
void iFpppip(x86emu_t *emu, uintptr_t fnc);
void iFpppui(x86emu_t *emu, uintptr_t fnc);
void iFpppuu(x86emu_t *emu, uintptr_t fnc);
void iFpppup(x86emu_t *emu, uintptr_t fnc);
void iFpppUi(x86emu_t *emu, uintptr_t fnc);
void iFpppLi(x86emu_t *emu, uintptr_t fnc);
void iFppppi(x86emu_t *emu, uintptr_t fnc);
void iFppppu(x86emu_t *emu, uintptr_t fnc);
void iFppppL(x86emu_t *emu, uintptr_t fnc);
void iFppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppGp(x86emu_t *emu, uintptr_t fnc);
void iFpPPpp(x86emu_t *emu, uintptr_t fnc);
void IFppIII(x86emu_t *emu, uintptr_t fnc);
void uFEippp(x86emu_t *emu, uintptr_t fnc);
void uFEpipp(x86emu_t *emu, uintptr_t fnc);
void uFEppuu(x86emu_t *emu, uintptr_t fnc);
void uFEpppp(x86emu_t *emu, uintptr_t fnc);
void uFiuuuu(x86emu_t *emu, uintptr_t fnc);
void uFipipp(x86emu_t *emu, uintptr_t fnc);
void uFipLpp(x86emu_t *emu, uintptr_t fnc);
void uFpCCCC(x86emu_t *emu, uintptr_t fnc);
void uFpWuip(x86emu_t *emu, uintptr_t fnc);
void uFpuuuu(x86emu_t *emu, uintptr_t fnc);
void uFpuuup(x86emu_t *emu, uintptr_t fnc);
void uFpupuu(x86emu_t *emu, uintptr_t fnc);
void uFppiip(x86emu_t *emu, uintptr_t fnc);
void uFppipp(x86emu_t *emu, uintptr_t fnc);
void uFppuup(x86emu_t *emu, uintptr_t fnc);
void uFppupp(x86emu_t *emu, uintptr_t fnc);
void uFpplip(x86emu_t *emu, uintptr_t fnc);
void uFppLpp(x86emu_t *emu, uintptr_t fnc);
void uFppppp(x86emu_t *emu, uintptr_t fnc);
void UFuiiii(x86emu_t *emu, uintptr_t fnc);
void lFEipiI(x86emu_t *emu, uintptr_t fnc);
void lFipLli(x86emu_t *emu, uintptr_t fnc);
void lFipLlL(x86emu_t *emu, uintptr_t fnc);
void lFpuipC(x86emu_t *emu, uintptr_t fnc);
void lFppiip(x86emu_t *emu, uintptr_t fnc);
void LFEpppp(x86emu_t *emu, uintptr_t fnc);
void LFuiCiu(x86emu_t *emu, uintptr_t fnc);
void LFLpppL(x86emu_t *emu, uintptr_t fnc);
void LFLpppp(x86emu_t *emu, uintptr_t fnc);
void LFpuipp(x86emu_t *emu, uintptr_t fnc);
void LFpuppi(x86emu_t *emu, uintptr_t fnc);
void LFpLppL(x86emu_t *emu, uintptr_t fnc);
void LFpLppp(x86emu_t *emu, uintptr_t fnc);
void LFppLLp(x86emu_t *emu, uintptr_t fnc);
void LFpppii(x86emu_t *emu, uintptr_t fnc);
void LFppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpiii(x86emu_t *emu, uintptr_t fnc);
void pFEpipi(x86emu_t *emu, uintptr_t fnc);
void pFEpipL(x86emu_t *emu, uintptr_t fnc);
void pFEpipp(x86emu_t *emu, uintptr_t fnc);
void pFEpupp(x86emu_t *emu, uintptr_t fnc);
void pFEpUpp(x86emu_t *emu, uintptr_t fnc);
void pFEppii(x86emu_t *emu, uintptr_t fnc);
void pFEppip(x86emu_t *emu, uintptr_t fnc);
void pFEppCC(x86emu_t *emu, uintptr_t fnc);
void pFEppuW(x86emu_t *emu, uintptr_t fnc);
void pFEppuu(x86emu_t *emu, uintptr_t fnc);
void pFEppup(x86emu_t *emu, uintptr_t fnc);
void pFEppLp(x86emu_t *emu, uintptr_t fnc);
void pFEpppi(x86emu_t *emu, uintptr_t fnc);
void pFEpppu(x86emu_t *emu, uintptr_t fnc);
void pFEpppp(x86emu_t *emu, uintptr_t fnc);
void pFiiiii(x86emu_t *emu, uintptr_t fnc);
void pFipipL(x86emu_t *emu, uintptr_t fnc);
void pFipppi(x86emu_t *emu, uintptr_t fnc);
void pFipppu(x86emu_t *emu, uintptr_t fnc);
void pFipppp(x86emu_t *emu, uintptr_t fnc);
void pFuiiiu(x86emu_t *emu, uintptr_t fnc);
void pFuiupp(x86emu_t *emu, uintptr_t fnc);
void pFpiiii(x86emu_t *emu, uintptr_t fnc);
void pFpiiip(x86emu_t *emu, uintptr_t fnc);
void pFpiiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiipi(x86emu_t *emu, uintptr_t fnc);
void pFpiipp(x86emu_t *emu, uintptr_t fnc);
void pFpiCCC(x86emu_t *emu, uintptr_t fnc);
void pFpiuuu(x86emu_t *emu, uintptr_t fnc);
void pFpiLip(x86emu_t *emu, uintptr_t fnc);
void pFpippi(x86emu_t *emu, uintptr_t fnc);
void pFpippp(x86emu_t *emu, uintptr_t fnc);
void pFpIiip(x86emu_t *emu, uintptr_t fnc);
void pFpuiii(x86emu_t *emu, uintptr_t fnc);
void pFpuiip(x86emu_t *emu, uintptr_t fnc);
void pFpuuip(x86emu_t *emu, uintptr_t fnc);
void pFpuuup(x86emu_t *emu, uintptr_t fnc);
void pFpuupp(x86emu_t *emu, uintptr_t fnc);
void pFpuLpp(x86emu_t *emu, uintptr_t fnc);
void pFpuppp(x86emu_t *emu, uintptr_t fnc);
void pFpUdii(x86emu_t *emu, uintptr_t fnc);
void pFpdddd(x86emu_t *emu, uintptr_t fnc);
void pFplppp(x86emu_t *emu, uintptr_t fnc);
void pFpLpip(x86emu_t *emu, uintptr_t fnc);
void pFppiii(x86emu_t *emu, uintptr_t fnc);
void pFppiip(x86emu_t *emu, uintptr_t fnc);
void pFppiup(x86emu_t *emu, uintptr_t fnc);
void pFppipi(x86emu_t *emu, uintptr_t fnc);
void pFppipp(x86emu_t *emu, uintptr_t fnc);
void pFppuui(x86emu_t *emu, uintptr_t fnc);
void pFppuuu(x86emu_t *emu, uintptr_t fnc);
void pFppuup(x86emu_t *emu, uintptr_t fnc);
void pFppddi(x86emu_t *emu, uintptr_t fnc);
void pFppLLi(x86emu_t *emu, uintptr_t fnc);
void pFppLpp(x86emu_t *emu, uintptr_t fnc);
void pFpppii(x86emu_t *emu, uintptr_t fnc);
void pFpppip(x86emu_t *emu, uintptr_t fnc);
void pFpppui(x86emu_t *emu, uintptr_t fnc);
void pFpppuu(x86emu_t *emu, uintptr_t fnc);
void pFpppup(x86emu_t *emu, uintptr_t fnc);
void pFppppi(x86emu_t *emu, uintptr_t fnc);
void pFppppp(x86emu_t *emu, uintptr_t fnc);
void vFEiiipp(x86emu_t *emu, uintptr_t fnc);
void vFEpiLpp(x86emu_t *emu, uintptr_t fnc);
void vFEpippp(x86emu_t *emu, uintptr_t fnc);
void vFEpuipp(x86emu_t *emu, uintptr_t fnc);
void vFEpupup(x86emu_t *emu, uintptr_t fnc);
void vFEpLLpp(x86emu_t *emu, uintptr_t fnc);
void vFEppipV(x86emu_t *emu, uintptr_t fnc);
void vFEppupp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiu(x86emu_t *emu, uintptr_t fnc);
void vFEppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiuil(x86emu_t *emu, uintptr_t fnc);
void vFiiilpi(x86emu_t *emu, uintptr_t fnc);
void vFiiuilp(x86emu_t *emu, uintptr_t fnc);
void vFiffiff(x86emu_t *emu, uintptr_t fnc);
void vFiddidd(x86emu_t *emu, uintptr_t fnc);
void vFilipli(x86emu_t *emu, uintptr_t fnc);
void vFiliplu(x86emu_t *emu, uintptr_t fnc);
void vFillill(x86emu_t *emu, uintptr_t fnc);
void vFipiplp(x86emu_t *emu, uintptr_t fnc);
void vFCCCCff(x86emu_t *emu, uintptr_t fnc);
void vFuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiuii(x86emu_t *emu, uintptr_t fnc);
void vFuiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiuiil(x86emu_t *emu, uintptr_t fnc);
void vFuiuiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuCip(x86emu_t *emu, uintptr_t fnc);
void vFuiuuip(x86emu_t *emu, uintptr_t fnc);
void vFuiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuiupii(x86emu_t *emu, uintptr_t fnc);
void vFuiupiu(x86emu_t *emu, uintptr_t fnc);
void vFuiffff(x86emu_t *emu, uintptr_t fnc);
void vFuidddd(x86emu_t *emu, uintptr_t fnc);
void vFuillll(x86emu_t *emu, uintptr_t fnc);
void vFuiLLLL(x86emu_t *emu, uintptr_t fnc);
void vFuipiup(x86emu_t *emu, uintptr_t fnc);
void vFuCuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuil(x86emu_t *emu, uintptr_t fnc);
void vFuuiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiuCu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuippp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiup(x86emu_t *emu, uintptr_t fnc);
void vFuuuipi(x86emu_t *emu, uintptr_t fnc);
void vFuuuipC(x86emu_t *emu, uintptr_t fnc);
void vFuuuipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuull(x86emu_t *emu, uintptr_t fnc);
void vFuuuppi(x86emu_t *emu, uintptr_t fnc);
void vFuuuppp(x86emu_t *emu, uintptr_t fnc);
void vFuuffff(x86emu_t *emu, uintptr_t fnc);
void vFuudddd(x86emu_t *emu, uintptr_t fnc);
void vFuupiii(x86emu_t *emu, uintptr_t fnc);
void vFuupupp(x86emu_t *emu, uintptr_t fnc);
void vFuuplii(x86emu_t *emu, uintptr_t fnc);
void vFuffiip(x86emu_t *emu, uintptr_t fnc);
void vFufffff(x86emu_t *emu, uintptr_t fnc);
void vFuddiip(x86emu_t *emu, uintptr_t fnc);
void vFullill(x86emu_t *emu, uintptr_t fnc);
void vFulluLC(x86emu_t *emu, uintptr_t fnc);
void vFupiiii(x86emu_t *emu, uintptr_t fnc);
void vFupupip(x86emu_t *emu, uintptr_t fnc);
void vFuppppu(x86emu_t *emu, uintptr_t fnc);
void vFuppppp(x86emu_t *emu, uintptr_t fnc);
void vFffffff(x86emu_t *emu, uintptr_t fnc);
void vFdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiiuuu(x86emu_t *emu, uintptr_t fnc);
void vFpiippi(x86emu_t *emu, uintptr_t fnc);
void vFpiippp(x86emu_t *emu, uintptr_t fnc);
void vFpiUuup(x86emu_t *emu, uintptr_t fnc);
void vFpipiiu(x86emu_t *emu, uintptr_t fnc);
void vFpipipV(x86emu_t *emu, uintptr_t fnc);
void vFpipppi(x86emu_t *emu, uintptr_t fnc);
void vFpipppp(x86emu_t *emu, uintptr_t fnc);
void vFpuiiii(x86emu_t *emu, uintptr_t fnc);
void vFpuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFpuiipp(x86emu_t *emu, uintptr_t fnc);
void vFpuuuiu(x86emu_t *emu, uintptr_t fnc);
void vFpuuppp(x86emu_t *emu, uintptr_t fnc);
void vFpudddd(x86emu_t *emu, uintptr_t fnc);
void vFpupuuu(x86emu_t *emu, uintptr_t fnc);
void vFpupppp(x86emu_t *emu, uintptr_t fnc);
void vFpUiuup(x86emu_t *emu, uintptr_t fnc);
void vFpUiUup(x86emu_t *emu, uintptr_t fnc);
void vFpUipup(x86emu_t *emu, uintptr_t fnc);
void vFpUUiup(x86emu_t *emu, uintptr_t fnc);
void vFpdddii(x86emu_t *emu, uintptr_t fnc);
void vFpddddd(x86emu_t *emu, uintptr_t fnc);
void vFpddddp(x86emu_t *emu, uintptr_t fnc);
void vFppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiip(x86emu_t *emu, uintptr_t fnc);
void vFppiiui(x86emu_t *emu, uintptr_t fnc);
void vFppiiuu(x86emu_t *emu, uintptr_t fnc);
void vFppiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiipp(x86emu_t *emu, uintptr_t fnc);
void vFppilpp(x86emu_t *emu, uintptr_t fnc);
void vFppippi(x86emu_t *emu, uintptr_t fnc);
void vFppippp(x86emu_t *emu, uintptr_t fnc);
void vFppuuuu(x86emu_t *emu, uintptr_t fnc);
void vFppuUUU(x86emu_t *emu, uintptr_t fnc);
void vFppupii(x86emu_t *emu, uintptr_t fnc);
void vFppuppp(x86emu_t *emu, uintptr_t fnc);
void vFppdidd(x86emu_t *emu, uintptr_t fnc);
void vFppdddd(x86emu_t *emu, uintptr_t fnc);
void vFpplppi(x86emu_t *emu, uintptr_t fnc);
void vFpplppp(x86emu_t *emu, uintptr_t fnc);
void vFppLppi(x86emu_t *emu, uintptr_t fnc);
void vFppLppp(x86emu_t *emu, uintptr_t fnc);
void vFpppiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiip(x86emu_t *emu, uintptr_t fnc);
void vFpppiff(x86emu_t *emu, uintptr_t fnc);
void vFpppipu(x86emu_t *emu, uintptr_t fnc);
void vFpppuii(x86emu_t *emu, uintptr_t fnc);
void vFppppii(x86emu_t *emu, uintptr_t fnc);
void vFpppppi(x86emu_t *emu, uintptr_t fnc);
void vFpppppu(x86emu_t *emu, uintptr_t fnc);
void vFpppppL(x86emu_t *emu, uintptr_t fnc);
void vFpppppp(x86emu_t *emu, uintptr_t fnc);
void cFppLppi(x86emu_t *emu, uintptr_t fnc);
void iFEiippi(x86emu_t *emu, uintptr_t fnc);
void iFEiippp(x86emu_t *emu, uintptr_t fnc);
void iFEiLLLL(x86emu_t *emu, uintptr_t fnc);
void iFEipuup(x86emu_t *emu, uintptr_t fnc);
void iFEippLp(x86emu_t *emu, uintptr_t fnc);
void iFEipppi(x86emu_t *emu, uintptr_t fnc);
void iFElpppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpiipV(x86emu_t *emu, uintptr_t fnc);
void iFEpiLpp(x86emu_t *emu, uintptr_t fnc);
void iFEpippi(x86emu_t *emu, uintptr_t fnc);
void iFEpippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuip(x86emu_t *emu, uintptr_t fnc);
void iFEpuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpUPpp(x86emu_t *emu, uintptr_t fnc);
void iFEpLppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppip(x86emu_t *emu, uintptr_t fnc);
void iFEppppp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiiuwp(x86emu_t *emu, uintptr_t fnc);
void iFiuiipi(x86emu_t *emu, uintptr_t fnc);
void iFiuUuUu(x86emu_t *emu, uintptr_t fnc);
void iFipiipi(x86emu_t *emu, uintptr_t fnc);
void iFipipuu(x86emu_t *emu, uintptr_t fnc);
void iFipuIup(x86emu_t *emu, uintptr_t fnc);
void iFipupup(x86emu_t *emu, uintptr_t fnc);
void iFipuppp(x86emu_t *emu, uintptr_t fnc);
void iFipppup(x86emu_t *emu, uintptr_t fnc);
void iFippppp(x86emu_t *emu, uintptr_t fnc);
void iFuppipp(x86emu_t *emu, uintptr_t fnc);
void iFuppppp(x86emu_t *emu, uintptr_t fnc);
void iFdipppL(x86emu_t *emu, uintptr_t fnc);
void iFLpppii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiiuii(x86emu_t *emu, uintptr_t fnc);
void iFpiipip(x86emu_t *emu, uintptr_t fnc);
void iFpiippu(x86emu_t *emu, uintptr_t fnc);
void iFpiippp(x86emu_t *emu, uintptr_t fnc);
void iFpiuuup(x86emu_t *emu, uintptr_t fnc);
void iFpiuupp(x86emu_t *emu, uintptr_t fnc);
void iFpiuppu(x86emu_t *emu, uintptr_t fnc);
void iFpiUUpp(x86emu_t *emu, uintptr_t fnc);
void iFpipipi(x86emu_t *emu, uintptr_t fnc);
void iFpippip(x86emu_t *emu, uintptr_t fnc);
void iFpipppp(x86emu_t *emu, uintptr_t fnc);
void iFpCpipu(x86emu_t *emu, uintptr_t fnc);
void iFpuiiii(x86emu_t *emu, uintptr_t fnc);
void iFpuuupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuLpp(x86emu_t *emu, uintptr_t fnc);
void iFpupipi(x86emu_t *emu, uintptr_t fnc);
void iFpupuui(x86emu_t *emu, uintptr_t fnc);
void iFpUuupp(x86emu_t *emu, uintptr_t fnc);
void iFpUUUip(x86emu_t *emu, uintptr_t fnc);
void iFpUUUUp(x86emu_t *emu, uintptr_t fnc);
void iFpLLppp(x86emu_t *emu, uintptr_t fnc);
void iFppiiii(x86emu_t *emu, uintptr_t fnc);
void iFppiiip(x86emu_t *emu, uintptr_t fnc);
void iFppiiuu(x86emu_t *emu, uintptr_t fnc);
void iFppiipi(x86emu_t *emu, uintptr_t fnc);
void iFppiipp(x86emu_t *emu, uintptr_t fnc);
void iFppipii(x86emu_t *emu, uintptr_t fnc);
void iFppipiL(x86emu_t *emu, uintptr_t fnc);
void iFppipip(x86emu_t *emu, uintptr_t fnc);
void iFppIipp(x86emu_t *emu, uintptr_t fnc);
void iFppIppp(x86emu_t *emu, uintptr_t fnc);
void iFppuiii(x86emu_t *emu, uintptr_t fnc);
void iFppuiiu(x86emu_t *emu, uintptr_t fnc);
void iFppuipp(x86emu_t *emu, uintptr_t fnc);
void iFppuIII(x86emu_t *emu, uintptr_t fnc);
void iFppuupp(x86emu_t *emu, uintptr_t fnc);
void iFppuLpp(x86emu_t *emu, uintptr_t fnc);
void iFppupip(x86emu_t *emu, uintptr_t fnc);
void iFppuppp(x86emu_t *emu, uintptr_t fnc);
void iFppUipp(x86emu_t *emu, uintptr_t fnc);
void iFppUupp(x86emu_t *emu, uintptr_t fnc);
void iFppUUup(x86emu_t *emu, uintptr_t fnc);
void iFppdidd(x86emu_t *emu, uintptr_t fnc);
void iFppLupp(x86emu_t *emu, uintptr_t fnc);
void iFppLpLp(x86emu_t *emu, uintptr_t fnc);
void iFppLppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiuu(x86emu_t *emu, uintptr_t fnc);
void iFpppipi(x86emu_t *emu, uintptr_t fnc);
void iFpppipp(x86emu_t *emu, uintptr_t fnc);
void iFpppuii(x86emu_t *emu, uintptr_t fnc);
void iFpppupu(x86emu_t *emu, uintptr_t fnc);
void iFpppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppii(x86emu_t *emu, uintptr_t fnc);
void iFppppiu(x86emu_t *emu, uintptr_t fnc);
void iFppppip(x86emu_t *emu, uintptr_t fnc);
void iFppppup(x86emu_t *emu, uintptr_t fnc);
void iFpppppi(x86emu_t *emu, uintptr_t fnc);
void iFpppppu(x86emu_t *emu, uintptr_t fnc);
void iFpppppp(x86emu_t *emu, uintptr_t fnc);
void uFEiippp(x86emu_t *emu, uintptr_t fnc);
void uFEiuppp(x86emu_t *emu, uintptr_t fnc);
void uFEpCppp(x86emu_t *emu, uintptr_t fnc);
void uFEpuppp(x86emu_t *emu, uintptr_t fnc);
void uFupuufp(x86emu_t *emu, uintptr_t fnc);
void uFpippup(x86emu_t *emu, uintptr_t fnc);
void uFpWuwCp(x86emu_t *emu, uintptr_t fnc);
void uFpWuipp(x86emu_t *emu, uintptr_t fnc);
void uFpWuuCp(x86emu_t *emu, uintptr_t fnc);
void uFpuippp(x86emu_t *emu, uintptr_t fnc);
void uFppippp(x86emu_t *emu, uintptr_t fnc);
void uFppuuup(x86emu_t *emu, uintptr_t fnc);
void uFppuupu(x86emu_t *emu, uintptr_t fnc);
void uFpppppi(x86emu_t *emu, uintptr_t fnc);
void uFpppppp(x86emu_t *emu, uintptr_t fnc);
void UFpippup(x86emu_t *emu, uintptr_t fnc);
void lFipLipu(x86emu_t *emu, uintptr_t fnc);
void lFipLipp(x86emu_t *emu, uintptr_t fnc);
void lFipLpLL(x86emu_t *emu, uintptr_t fnc);
void LFEupppp(x86emu_t *emu, uintptr_t fnc);
void LFEppppi(x86emu_t *emu, uintptr_t fnc);
void LFpipipi(x86emu_t *emu, uintptr_t fnc);
void LFpLippp(x86emu_t *emu, uintptr_t fnc);
void LFSpLiip(x86emu_t *emu, uintptr_t fnc);
void pFEipppV(x86emu_t *emu, uintptr_t fnc);
void pFEpiupp(x86emu_t *emu, uintptr_t fnc);
void pFEpippp(x86emu_t *emu, uintptr_t fnc);
void pFEpuipp(x86emu_t *emu, uintptr_t fnc);
void pFEpuupp(x86emu_t *emu, uintptr_t fnc);
void pFEpuppp(x86emu_t *emu, uintptr_t fnc);
void pFEpLLiN(x86emu_t *emu, uintptr_t fnc);
void pFEppCWp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuWp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuC(x86emu_t *emu, uintptr_t fnc);
void pFEppuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuup(x86emu_t *emu, uintptr_t fnc);
void pFEppLLp(x86emu_t *emu, uintptr_t fnc);
void pFEpppLp(x86emu_t *emu, uintptr_t fnc);
void pFEppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppppp(x86emu_t *emu, uintptr_t fnc);
void pFiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFiCiiCi(x86emu_t *emu, uintptr_t fnc);
void pFdddddd(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiu(x86emu_t *emu, uintptr_t fnc);
void pFpiiCCC(x86emu_t *emu, uintptr_t fnc);
void pFpiiuuu(x86emu_t *emu, uintptr_t fnc);
void pFpiUUUU(x86emu_t *emu, uintptr_t fnc);
void pFpippip(x86emu_t *emu, uintptr_t fnc);
void pFpipppp(x86emu_t *emu, uintptr_t fnc);
void pFpuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupppp(x86emu_t *emu, uintptr_t fnc);
void pFplpppp(x86emu_t *emu, uintptr_t fnc);
void pFpLiLpp(x86emu_t *emu, uintptr_t fnc);
void pFpLpLLi(x86emu_t *emu, uintptr_t fnc);
void pFppiiii(x86emu_t *emu, uintptr_t fnc);
void pFppiipp(x86emu_t *emu, uintptr_t fnc);
void pFppiCCC(x86emu_t *emu, uintptr_t fnc);
void pFppippi(x86emu_t *emu, uintptr_t fnc);
void pFppippp(x86emu_t *emu, uintptr_t fnc);
void pFpppiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiui(x86emu_t *emu, uintptr_t fnc);
void pFpppupp(x86emu_t *emu, uintptr_t fnc);
void pFppppii(x86emu_t *emu, uintptr_t fnc);
void pFpppppi(x86emu_t *emu, uintptr_t fnc);
void pFpppppu(x86emu_t *emu, uintptr_t fnc);
void pFpppppp(x86emu_t *emu, uintptr_t fnc);
void pFSpiiii(x86emu_t *emu, uintptr_t fnc);
void vFEpipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpuipuV(x86emu_t *emu, uintptr_t fnc);
void vFEppippp(x86emu_t *emu, uintptr_t fnc);
void vFEpppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFiiuilil(x86emu_t *emu, uintptr_t fnc);
void vFiiffffp(x86emu_t *emu, uintptr_t fnc);
void vFiuulipi(x86emu_t *emu, uintptr_t fnc);
void vFiupuuup(x86emu_t *emu, uintptr_t fnc);
void vFilipliu(x86emu_t *emu, uintptr_t fnc);
void vFilulipi(x86emu_t *emu, uintptr_t fnc);
void vFCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuCiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiupiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiupuip(x86emu_t *emu, uintptr_t fnc);
void vFuipiiii(x86emu_t *emu, uintptr_t fnc);
void vFuipffff(x86emu_t *emu, uintptr_t fnc);
void vFuipdddd(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiCiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiCiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuipppp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuil(x86emu_t *emu, uintptr_t fnc);
void vFuuuiupi(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuulll(x86emu_t *emu, uintptr_t fnc);
void vFuuuffff(x86emu_t *emu, uintptr_t fnc);
void vFuuudddd(x86emu_t *emu, uintptr_t fnc);
void vFuuffiip(x86emu_t *emu, uintptr_t fnc);
void vFuuddiip(x86emu_t *emu, uintptr_t fnc);
void vFuulluup(x86emu_t *emu, uintptr_t fnc);
void vFuupiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuppppu(x86emu_t *emu, uintptr_t fnc);
void vFuuppppp(x86emu_t *emu, uintptr_t fnc);
void vFuffffff(x86emu_t *emu, uintptr_t fnc);
void vFudddddd(x86emu_t *emu, uintptr_t fnc);
void vFlipuiip(x86emu_t *emu, uintptr_t fnc);
void vFlliiiip(x86emu_t *emu, uintptr_t fnc);
void vFpiiiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiiliip(x86emu_t *emu, uintptr_t fnc);
void vFpiipCpp(x86emu_t *emu, uintptr_t fnc);
void vFpipipii(x86emu_t *emu, uintptr_t fnc);
void vFpipppii(x86emu_t *emu, uintptr_t fnc);
void vFpuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuuUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpuupppp(x86emu_t *emu, uintptr_t fnc);
void vFpUiUiup(x86emu_t *emu, uintptr_t fnc);
void vFpUUUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpddiidd(x86emu_t *emu, uintptr_t fnc);
void vFpdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpLiLiLp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiip(x86emu_t *emu, uintptr_t fnc);
void vFppiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiipii(x86emu_t *emu, uintptr_t fnc);
void vFppiipuu(x86emu_t *emu, uintptr_t fnc);
void vFppiippp(x86emu_t *emu, uintptr_t fnc);
void vFppilppi(x86emu_t *emu, uintptr_t fnc);
void vFppiLiLp(x86emu_t *emu, uintptr_t fnc);
void vFppipiip(x86emu_t *emu, uintptr_t fnc);
void vFppipipp(x86emu_t *emu, uintptr_t fnc);
void vFppipppp(x86emu_t *emu, uintptr_t fnc);
void vFppddddi(x86emu_t *emu, uintptr_t fnc);
void vFppddpii(x86emu_t *emu, uintptr_t fnc);
void vFppLpppi(x86emu_t *emu, uintptr_t fnc);
void vFppLpppp(x86emu_t *emu, uintptr_t fnc);
void vFpppiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiipi(x86emu_t *emu, uintptr_t fnc);
void vFpppiipp(x86emu_t *emu, uintptr_t fnc);
void vFpppippi(x86emu_t *emu, uintptr_t fnc);
void vFpppuuuu(x86emu_t *emu, uintptr_t fnc);
void vFppppiii(x86emu_t *emu, uintptr_t fnc);
void vFppppiip(x86emu_t *emu, uintptr_t fnc);
void vFppppipi(x86emu_t *emu, uintptr_t fnc);
void vFpppppip(x86emu_t *emu, uintptr_t fnc);
void vFppppppi(x86emu_t *emu, uintptr_t fnc);
void vFppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuiupV(x86emu_t *emu, uintptr_t fnc);
void iFEpupppp(x86emu_t *emu, uintptr_t fnc);
void iFEpUuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpLiipV(x86emu_t *emu, uintptr_t fnc);
void iFEppiuui(x86emu_t *emu, uintptr_t fnc);
void iFEppuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpplppi(x86emu_t *emu, uintptr_t fnc);
void iFEppLpIi(x86emu_t *emu, uintptr_t fnc);
void iFEpppiiu(x86emu_t *emu, uintptr_t fnc);
void iFEpppppp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFippuIup(x86emu_t *emu, uintptr_t fnc);
void iFpiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiiuwp(x86emu_t *emu, uintptr_t fnc);
void iFpiiuuiu(x86emu_t *emu, uintptr_t fnc);
void iFpiiuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpiuiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiupiii(x86emu_t *emu, uintptr_t fnc);
void iFpiupppp(x86emu_t *emu, uintptr_t fnc);
void iFpipipip(x86emu_t *emu, uintptr_t fnc);
void iFpippupp(x86emu_t *emu, uintptr_t fnc);
void iFpippppp(x86emu_t *emu, uintptr_t fnc);
void iFpIIpppp(x86emu_t *emu, uintptr_t fnc);
void iFpuiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpuiiuii(x86emu_t *emu, uintptr_t fnc);
void iFpuipupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuiuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuuppu(x86emu_t *emu, uintptr_t fnc);
void iFpuupppp(x86emu_t *emu, uintptr_t fnc);
void iFpupuuui(x86emu_t *emu, uintptr_t fnc);
void iFpupuufu(x86emu_t *emu, uintptr_t fnc);
void iFpupuupp(x86emu_t *emu, uintptr_t fnc);
void iFpupupui(x86emu_t *emu, uintptr_t fnc);
void iFpuppppp(x86emu_t *emu, uintptr_t fnc);
void iFpLipipi(x86emu_t *emu, uintptr_t fnc);
void iFppiiuui(x86emu_t *emu, uintptr_t fnc);
void iFppiipii(x86emu_t *emu, uintptr_t fnc);
void iFppiipiL(x86emu_t *emu, uintptr_t fnc);
void iFppiippp(x86emu_t *emu, uintptr_t fnc);
void iFppipiip(x86emu_t *emu, uintptr_t fnc);
void iFppipipi(x86emu_t *emu, uintptr_t fnc);
void iFppipipp(x86emu_t *emu, uintptr_t fnc);
void iFppippip(x86emu_t *emu, uintptr_t fnc);
void iFppipppi(x86emu_t *emu, uintptr_t fnc);
void iFppipppp(x86emu_t *emu, uintptr_t fnc);
void iFppuipiL(x86emu_t *emu, uintptr_t fnc);
void iFppLiipp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiii(x86emu_t *emu, uintptr_t fnc);
void iFpppiiuu(x86emu_t *emu, uintptr_t fnc);
void iFpppiiup(x86emu_t *emu, uintptr_t fnc);
void iFpppiipi(x86emu_t *emu, uintptr_t fnc);
void iFpppiuwu(x86emu_t *emu, uintptr_t fnc);
void iFpppippi(x86emu_t *emu, uintptr_t fnc);
void iFpppippp(x86emu_t *emu, uintptr_t fnc);
void iFpppuiii(x86emu_t *emu, uintptr_t fnc);
void iFpppuppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiii(x86emu_t *emu, uintptr_t fnc);
void iFppppipp(x86emu_t *emu, uintptr_t fnc);
void iFppppdpi(x86emu_t *emu, uintptr_t fnc);
void iFpppppip(x86emu_t *emu, uintptr_t fnc);
void iFpppppup(x86emu_t *emu, uintptr_t fnc);
void iFppppppi(x86emu_t *emu, uintptr_t fnc);
void iFppppppp(x86emu_t *emu, uintptr_t fnc);
void uFEiipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpiippp(x86emu_t *emu, uintptr_t fnc);
void uFEpuuppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppppp(x86emu_t *emu, uintptr_t fnc);
void uFuippppp(x86emu_t *emu, uintptr_t fnc);
void uFppiuppi(x86emu_t *emu, uintptr_t fnc);
void uFppiuppp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuup(x86emu_t *emu, uintptr_t fnc);
void LFEppLppU(x86emu_t *emu, uintptr_t fnc);
void LFEpppppu(x86emu_t *emu, uintptr_t fnc);
void pFEpiiiiu(x86emu_t *emu, uintptr_t fnc);
void pFEpupppp(x86emu_t *emu, uintptr_t fnc);
void pFEpLiiii(x86emu_t *emu, uintptr_t fnc);
void pFEpLiiiI(x86emu_t *emu, uintptr_t fnc);
void pFEppCuup(x86emu_t *emu, uintptr_t fnc);
void pFEppCppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuipp(x86emu_t *emu, uintptr_t fnc);
void pFEppuWWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuup(x86emu_t *emu, uintptr_t fnc);
void pFEppppip(x86emu_t *emu, uintptr_t fnc);
void pFEpppppp(x86emu_t *emu, uintptr_t fnc);
void pFifffppp(x86emu_t *emu, uintptr_t fnc);
void pFuupupup(x86emu_t *emu, uintptr_t fnc);
void pFdiiiIiI(x86emu_t *emu, uintptr_t fnc);
void pFpiiUdii(x86emu_t *emu, uintptr_t fnc);
void pFpipippp(x86emu_t *emu, uintptr_t fnc);
void pFpuppppp(x86emu_t *emu, uintptr_t fnc);
void pFplppppp(x86emu_t *emu, uintptr_t fnc);
void pFpLpLLiL(x86emu_t *emu, uintptr_t fnc);
void pFpLppiip(x86emu_t *emu, uintptr_t fnc);
void pFpLppLLi(x86emu_t *emu, uintptr_t fnc);
void pFppiiipp(x86emu_t *emu, uintptr_t fnc);
void pFppiiCCC(x86emu_t *emu, uintptr_t fnc);
void pFppiippp(x86emu_t *emu, uintptr_t fnc);
void pFppiLLip(x86emu_t *emu, uintptr_t fnc);
void pFppipipp(x86emu_t *emu, uintptr_t fnc);
void pFppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFppuuppp(x86emu_t *emu, uintptr_t fnc);
void pFppLiiip(x86emu_t *emu, uintptr_t fnc);
void pFppLipip(x86emu_t *emu, uintptr_t fnc);
void pFpppccci(x86emu_t *emu, uintptr_t fnc);
void pFpppiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiipp(x86emu_t *emu, uintptr_t fnc);
void pFpppIIIi(x86emu_t *emu, uintptr_t fnc);
void pFpppCCCi(x86emu_t *emu, uintptr_t fnc);
void pFpppuuui(x86emu_t *emu, uintptr_t fnc);
void pFpppuupp(x86emu_t *emu, uintptr_t fnc);
void pFpppUUUi(x86emu_t *emu, uintptr_t fnc);
void pFpppfffi(x86emu_t *emu, uintptr_t fnc);
void pFpppdddi(x86emu_t *emu, uintptr_t fnc);
void pFpppllli(x86emu_t *emu, uintptr_t fnc);
void pFpppLLLi(x86emu_t *emu, uintptr_t fnc);
void pFppppiii(x86emu_t *emu, uintptr_t fnc);
void pFppppuuu(x86emu_t *emu, uintptr_t fnc);
void pFpppppuu(x86emu_t *emu, uintptr_t fnc);
void pFppppppi(x86emu_t *emu, uintptr_t fnc);
void pFppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEiippppV(x86emu_t *emu, uintptr_t fnc);
void vFEiupippp(x86emu_t *emu, uintptr_t fnc);
void vFEippippp(x86emu_t *emu, uintptr_t fnc);
void vFEppipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppippp(x86emu_t *emu, uintptr_t fnc);
void vFEpppuipV(x86emu_t *emu, uintptr_t fnc);
void vFEpppppuu(x86emu_t *emu, uintptr_t fnc);
void vFEppppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiuuip(x86emu_t *emu, uintptr_t fnc);
void vFiilliilp(x86emu_t *emu, uintptr_t fnc);
void vFiupuiuup(x86emu_t *emu, uintptr_t fnc);
void vFiupuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiipiup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiCuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiuupp(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuCil(x86emu_t *emu, uintptr_t fnc);
void vFuuuipipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuufffff(x86emu_t *emu, uintptr_t fnc);
void vFffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiiipii(x86emu_t *emu, uintptr_t fnc);
void vFpiiULipp(x86emu_t *emu, uintptr_t fnc);
void vFpiUuupup(x86emu_t *emu, uintptr_t fnc);
void vFpippiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpippiipi(x86emu_t *emu, uintptr_t fnc);
void vFpippippp(x86emu_t *emu, uintptr_t fnc);
void vFpippippV(x86emu_t *emu, uintptr_t fnc);
void vFpuppLLLL(x86emu_t *emu, uintptr_t fnc);
void vFpUiUiupi(x86emu_t *emu, uintptr_t fnc);
void vFpUuuUUUi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiipii(x86emu_t *emu, uintptr_t fnc);
void vFppipipii(x86emu_t *emu, uintptr_t fnc);
void vFppipppui(x86emu_t *emu, uintptr_t fnc);
void vFppippppi(x86emu_t *emu, uintptr_t fnc);
void vFppippppp(x86emu_t *emu, uintptr_t fnc);
void vFppdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpplppppi(x86emu_t *emu, uintptr_t fnc);
void vFpplppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppiipi(x86emu_t *emu, uintptr_t fnc);
void vFpppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEipupupi(x86emu_t *emu, uintptr_t fnc);
void iFEpippppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuiippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuLppp(x86emu_t *emu, uintptr_t fnc);
void iFEpLiLppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppipp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiupiupi(x86emu_t *emu, uintptr_t fnc);
void iFuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpCCWWpWu(x86emu_t *emu, uintptr_t fnc);
void iFpWCuWCuu(x86emu_t *emu, uintptr_t fnc);
void iFpuiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpuipuppp(x86emu_t *emu, uintptr_t fnc);
void iFpuippupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpupppppp(x86emu_t *emu, uintptr_t fnc);
void iFpUuuLpUi(x86emu_t *emu, uintptr_t fnc);
void iFpdiiiIiI(x86emu_t *emu, uintptr_t fnc);
void iFppiiiiiu(x86emu_t *emu, uintptr_t fnc);
void iFppIIIppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipi(x86emu_t *emu, uintptr_t fnc);
void iFpppiippp(x86emu_t *emu, uintptr_t fnc);
void iFpppipipi(x86emu_t *emu, uintptr_t fnc);
void iFpppipppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiipi(x86emu_t *emu, uintptr_t fnc);
void iFppppippp(x86emu_t *emu, uintptr_t fnc);
void iFpppppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppii(x86emu_t *emu, uintptr_t fnc);
void iFpppppppi(x86emu_t *emu, uintptr_t fnc);
void iFpppppppp(x86emu_t *emu, uintptr_t fnc);
void CFuiifpppp(x86emu_t *emu, uintptr_t fnc);
void uFEipipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpiupppp(x86emu_t *emu, uintptr_t fnc);
void uFEppipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppuppp(x86emu_t *emu, uintptr_t fnc);
void uFEppppppp(x86emu_t *emu, uintptr_t fnc);
void uFuipppppp(x86emu_t *emu, uintptr_t fnc);
void uFuupuuiuf(x86emu_t *emu, uintptr_t fnc);
void uFulpppppp(x86emu_t *emu, uintptr_t fnc);
void uFpupuuuCp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuupp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuppi(x86emu_t *emu, uintptr_t fnc);
void uFppuppppp(x86emu_t *emu, uintptr_t fnc);
void LFEpiupppp(x86emu_t *emu, uintptr_t fnc);
void pFEiplllpp(x86emu_t *emu, uintptr_t fnc);
void pFEpiuCppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuCC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuWW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuwwu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuUUU(x86emu_t *emu, uintptr_t fnc);
void pFEppLiiip(x86emu_t *emu, uintptr_t fnc);
void pFEpppuipV(x86emu_t *emu, uintptr_t fnc);
void pFEpppppiV(x86emu_t *emu, uintptr_t fnc);
void pFEppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppppppp(x86emu_t *emu, uintptr_t fnc);
void pFiipppppp(x86emu_t *emu, uintptr_t fnc);
void pFuiiiuuuu(x86emu_t *emu, uintptr_t fnc);
void pFuupupipp(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiUdiiUi(x86emu_t *emu, uintptr_t fnc);
void pFpipppppp(x86emu_t *emu, uintptr_t fnc);
void pFpWWiCpup(x86emu_t *emu, uintptr_t fnc);
void pFpuuuupup(x86emu_t *emu, uintptr_t fnc);
void pFpupupuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupLLLpp(x86emu_t *emu, uintptr_t fnc);
void pFpdwwWWui(x86emu_t *emu, uintptr_t fnc);
void pFplpppppp(x86emu_t *emu, uintptr_t fnc);
void pFpLppLLiL(x86emu_t *emu, uintptr_t fnc);
void pFppiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpppppupp(x86emu_t *emu, uintptr_t fnc);
void vFEuuuupppp(x86emu_t *emu, uintptr_t fnc);
void vFEpiiiiipp(x86emu_t *emu, uintptr_t fnc);
void vFEpuuuippp(x86emu_t *emu, uintptr_t fnc);
void vFEppiipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiippp(x86emu_t *emu, uintptr_t fnc);
void vFEppppippp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiill(x86emu_t *emu, uintptr_t fnc);
void vFiiiiillli(x86emu_t *emu, uintptr_t fnc);
void vFiiilllilp(x86emu_t *emu, uintptr_t fnc);
void vFiupuiuuup(x86emu_t *emu, uintptr_t fnc);
void vFiupuuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiCuL(x86emu_t *emu, uintptr_t fnc);
void vFuiupuffup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuupuuiuuf(x86emu_t *emu, uintptr_t fnc);
void vFuffffffff(x86emu_t *emu, uintptr_t fnc);
void vFffCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFddddddddd(x86emu_t *emu, uintptr_t fnc);
void vFpipiuiipp(x86emu_t *emu, uintptr_t fnc);
void vFpipippppi(x86emu_t *emu, uintptr_t fnc);
void vFpipppiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiipiii(x86emu_t *emu, uintptr_t fnc);
void vFppiipiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiip(x86emu_t *emu, uintptr_t fnc);
void vFppuuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppddddidd(x86emu_t *emu, uintptr_t fnc);
void vFpplpppppi(x86emu_t *emu, uintptr_t fnc);
void vFpppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppppipiip(x86emu_t *emu, uintptr_t fnc);
void vFpppppippp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiiiiipi(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiippu(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpppipppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppppupp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiiipiiip(x86emu_t *emu, uintptr_t fnc);
void iFipiipippi(x86emu_t *emu, uintptr_t fnc);
void iFdddpppppp(x86emu_t *emu, uintptr_t fnc);
void iFpiuuupipu(x86emu_t *emu, uintptr_t fnc);
void iFpipLpiiip(x86emu_t *emu, uintptr_t fnc);
void iFpuiuuipip(x86emu_t *emu, uintptr_t fnc);
void iFpuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpupuupWWu(x86emu_t *emu, uintptr_t fnc);
void iFpdiiiUiUp(x86emu_t *emu, uintptr_t fnc);
void iFppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFppiuiippu(x86emu_t *emu, uintptr_t fnc);
void iFppipiiipi(x86emu_t *emu, uintptr_t fnc);
void iFppuLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFppupppupp(x86emu_t *emu, uintptr_t fnc);
void iFppLpiippp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipip(x86emu_t *emu, uintptr_t fnc);
void iFpppiiuuii(x86emu_t *emu, uintptr_t fnc);
void iFpppiipiiu(x86emu_t *emu, uintptr_t fnc);
void iFpppLLLupp(x86emu_t *emu, uintptr_t fnc);
void iFpppLppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiupp(x86emu_t *emu, uintptr_t fnc);
void iFppppupiii(x86emu_t *emu, uintptr_t fnc);
void iFpppppLupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppppu(x86emu_t *emu, uintptr_t fnc);
void iFppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFEipippppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppufppp(x86emu_t *emu, uintptr_t fnc);
void uFuulpiuiuf(x86emu_t *emu, uintptr_t fnc);
void uFppppppppp(x86emu_t *emu, uintptr_t fnc);
void LFEppppppii(x86emu_t *emu, uintptr_t fnc);
void pFEppiiuuui(x86emu_t *emu, uintptr_t fnc);
void pFEppCuwwWW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuwwp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuippuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuwwu(x86emu_t *emu, uintptr_t fnc);
void pFEppuupwwC(x86emu_t *emu, uintptr_t fnc);
void pFEpppppiiV(x86emu_t *emu, uintptr_t fnc);
void pFEpppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEpppppppp(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupuuuuup(x86emu_t *emu, uintptr_t fnc);
void pFppiiiiiip(x86emu_t *emu, uintptr_t fnc);
void pFppiiuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFppipppppp(x86emu_t *emu, uintptr_t fnc);
void pFpppiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiipppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppiipp(x86emu_t *emu, uintptr_t fnc);
void vFEiippppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpippppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiipppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiui(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFiiillliiip(x86emu_t *emu, uintptr_t fnc);
void vFippppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuCCC(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuupuiupuuf(x86emu_t *emu, uintptr_t fnc);
void vFuffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipippppip(x86emu_t *emu, uintptr_t fnc);
void vFpipppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipip(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiip(x86emu_t *emu, uintptr_t fnc);
void vFppiippppii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppuuuuiiuu(x86emu_t *emu, uintptr_t fnc);
void vFppdddddddd(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiiiiippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuipupppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiiuipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEppppppipp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiipiiipip(x86emu_t *emu, uintptr_t fnc);
void iFpippddiidd(x86emu_t *emu, uintptr_t fnc);
void iFpuupiuiipp(x86emu_t *emu, uintptr_t fnc);
void iFpddpippppp(x86emu_t *emu, uintptr_t fnc);
void iFppipiippii(x86emu_t *emu, uintptr_t fnc);
void iFppuuiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFppuuiiuupi(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipipi(x86emu_t *emu, uintptr_t fnc);
void iFpppLLipppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiuuii(x86emu_t *emu, uintptr_t fnc);
void iFpppppppipi(x86emu_t *emu, uintptr_t fnc);
void uFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEiippppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpiiiiiipp(x86emu_t *emu, uintptr_t fnc);
void pFEpippppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCCuuwwC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuwwWWu(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuuCup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWWCuu(x86emu_t *emu, uintptr_t fnc);
void pFpupLLLLLpp(x86emu_t *emu, uintptr_t fnc);
void pFplllllllll(x86emu_t *emu, uintptr_t fnc);
void pFppuiipuuii(x86emu_t *emu, uintptr_t fnc);
void pFppuuLLuppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpiiiupupup(x86emu_t *emu, uintptr_t fnc);
void vFiiiiillliip(x86emu_t *emu, uintptr_t fnc);
void vFiiiiilllilp(x86emu_t *emu, uintptr_t fnc);
void vFiippppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiillliip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuupupppppp(x86emu_t *emu, uintptr_t fnc);
void vFuuffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuufffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuuddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFuffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuLuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFLufffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipipiipiii(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFpupiiuPuPuP(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddi(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppuiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuipuppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiiuippu(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpppipppppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppiiiiuu(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiippiiipip(x86emu_t *emu, uintptr_t fnc);
void iFppippipppip(x86emu_t *emu, uintptr_t fnc);
void iFppuppLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiuuiiu(x86emu_t *emu, uintptr_t fnc);
void uFEpiiupppiuV(x86emu_t *emu, uintptr_t fnc);
void uFEpiippppiup(x86emu_t *emu, uintptr_t fnc);
void uFEppppppippp(x86emu_t *emu, uintptr_t fnc);
void uFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpipppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppiiLpppip(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuiipuuii(x86emu_t *emu, uintptr_t fnc);
void pFEppuuwwWWww(x86emu_t *emu, uintptr_t fnc);
void pFpppppppiipp(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiuLC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiipii(x86emu_t *emu, uintptr_t fnc);
void vFpippppiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddii(x86emu_t *emu, uintptr_t fnc);
void vFppiiuuuiupup(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppippppppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppiiiiuui(x86emu_t *emu, uintptr_t fnc);
void iFpipllipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpipppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppllipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void lFpLpppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppiiuuuipii(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCuuCW(x86emu_t *emu, uintptr_t fnc);
void pFEppuwwWWuCuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuwwwwWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuWWWCCi(x86emu_t *emu, uintptr_t fnc);
void pFEppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFWWiCCCCiipup(x86emu_t *emu, uintptr_t fnc);
void pFppiiuuuiupup(x86emu_t *emu, uintptr_t fnc);
void pFppippLLLiLpp(x86emu_t *emu, uintptr_t fnc);
void pFppuuppppuppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppppppiippp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuLuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpippppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpuppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFddddpppddpppp(x86emu_t *emu, uintptr_t fnc);
void iFpippuuuiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpippppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpupiiiipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpuppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFppppppLLLLupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFippuuuulllipp(x86emu_t *emu, uintptr_t fnc);
void uFpppppuupppppp(x86emu_t *emu, uintptr_t fnc);
void pFppLppppiiLpip(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuffiiffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuddiiddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpupppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFppupppLLLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuWWwwCCup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuWWWWWWWW(x86emu_t *emu, uintptr_t fnc);
void pFpuupuupwwwwWWC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFfffffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFppipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpppippppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuwwWWWWuup(x86emu_t *emu, uintptr_t fnc);
void pFpuiippppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppipipipipipipip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fnc);
void vFuuuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpppuppiipppuUUUpi(x86emu_t *emu, uintptr_t fnc);
void iFppipipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppippppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppippipipipipipip(x86emu_t *emu, uintptr_t fnc);
void vFppuiiiiipuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppipppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void LFpppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWWWWWWwwCCCuu(x86emu_t *emu, uintptr_t fnc);
void pFippppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpiiiiiiiiiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpppippppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuuuwwuuuuUUUup(x86emu_t *emu, uintptr_t fnc);
void pFiiiippppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFpippppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFippuuuuiiiiuuiiiiiiiipp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);


void IFpi(x86emu_t *emu, uintptr_t fnc);
void iFipV(x86emu_t *emu, uintptr_t fnc);
void iFiipV(x86emu_t *emu, uintptr_t fnc);
void iFppiiiip(x86emu_t *emu, uintptr_t fnc);
# 2461 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void iFiiiN(x86emu_t *emu, uintptr_t fnc);



void DFD(x86emu_t *emu, uintptr_t fnc);
void iFED(x86emu_t *emu, uintptr_t fnc);
void IFED(x86emu_t *emu, uintptr_t fnc);
void DFED(x86emu_t *emu, uintptr_t fnc);
void DFDD(x86emu_t *emu, uintptr_t fnc);
void DFDp(x86emu_t *emu, uintptr_t fnc);
void DFppi(x86emu_t *emu, uintptr_t fnc);
void DFppp(x86emu_t *emu, uintptr_t fnc);
void iFDipppL(x86emu_t *emu, uintptr_t fnc);
void vFppippDDC(x86emu_t *emu, uintptr_t fnc);
# 2490 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void iFEvpp(x86emu_t *emu, uintptr_t fnc);
void iFEvpV(x86emu_t *emu, uintptr_t fnc);
void UFsvvs(x86emu_t *emu, uintptr_t fnc);
void iFEpvpp(x86emu_t *emu, uintptr_t fnc);
void iFEpvpV(x86emu_t *emu, uintptr_t fnc);
void pFpsvvvvs(x86emu_t *emu, uintptr_t fnc);


void iFpvpV(x86emu_t *emu, uintptr_t fnc);
# 9 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2
# 1 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h" 1



# 1 "/home/ssd/pico/code/box86/src/include/regs.h" 1



enum {
 _AX, _CX, _DX, _BX,
 _SP, _BP, _SI, _DI
};

enum {
    _ES, _CS, _SS, _DS, _FS, _GS
};


typedef union {
 int32_t sdword[1];
 uint32_t dword[1];
 int16_t sword[2];
 uint16_t word[2];
 int8_t sbyte[4];
 uint8_t byte[4];
} reg32_t;

typedef enum {
 ROUND_Nearest = 0,
 ROUND_Down = 1,
 ROUND_Up = 2,
 ROUND_Chop = 3
} fpu_round_t;

typedef enum {
 d_none = 0,
 d_add8,
 d_add16,
 d_add32,
 d_and8,
 d_and16,
 d_and32,
 d_dec8,
 d_dec16,
 d_dec32,
 d_inc8,
 d_inc16,
 d_inc32,
 d_imul8,
 d_imul16,
 d_imul32,
 d_or8,
 d_or16,
 d_or32,
 d_mul8,
 d_mul16,
 d_mul32,
 d_neg8,
 d_neg16,
 d_neg32,
 d_shl8,
 d_shl16,
 d_shl32,
 d_shr8,
 d_shr16,
 d_shr32,
 d_sar8,
 d_sar16,
 d_sar32,
 d_sub8,
 d_sub16,
 d_sub32,
 d_xor8,
 d_xor16,
 d_xor32,
 d_cmp8,
 d_cmp16,
 d_cmp32,
 d_tst8,
 d_tst16,
 d_tst32,
 d_adc8,
 d_adc16,
 d_adc32,
 d_sbb8,
 d_sbb16,
 d_sbb32,
 d_rol8,
 d_rol16,
 d_rol32,
 d_ror8,
 d_ror16,
 d_ror32,
 d_rcl8,
 d_rcl16,
 d_rcl32,
 d_rcr8,
 d_rcr16,
 d_rcr32,
 d_shld32,
 d_shrd32,
 d_unknown
} defered_flags_t;

#pragma pack(push, 1)

typedef union {

 struct {
  uint64_t lower;
  uint16_t upper;
 } l;
} longdouble_t;

typedef struct {

 long double ld;



 uint64_t uref;
} fpu_ld_t;

typedef struct {
 int64_t sref;
 int64_t sq;
} fpu_ll_t;

typedef union {
    struct __attribute__ ((__packed__)) {
        unsigned int _F_CF:1;
  unsigned int _F_res1:1;
        unsigned int _F_PF:1;
  unsigned int _F_res2:1;
        unsigned int _F_AF:1;
  unsigned int _F_res3:1;
        unsigned int _F_ZF:1;
        unsigned int _F_SF:1;
        unsigned int _F_TF:1;
        unsigned int _F_IF:1;
        unsigned int _F_DF:1;
        unsigned int _F_OF:1;
        unsigned int _F_IOPL:2;
        unsigned int _F_NT:1;
        unsigned int _F_dummy:1;
        unsigned int _F_RF:1;
        unsigned int _F_VM:1;
        unsigned int _F_AC:1;
        unsigned int _F_VIF:1;
        unsigned int _F_VIP:1;
        unsigned int _F_ID:1;
    } f;
    uint32_t x32;
} x86flags_t;

typedef enum {
    F_CF = 0,
 F_res1,
    F_PF,
 F_res2,
    F_AF,
 F_res3,
    F_ZF,
    F_SF,
    F_TF,
    F_IF,
    F_DF,
    F_OF,
    F_IOPL,
    F_NT = 14,
    F_dummy,
    F_RF,
    F_VM,
    F_AC,
    F_VIF,
    F_VIP,
    F_ID,
 F_LAST
} flags_names_t;


typedef union {
    struct __attribute__ ((__packed__)) {
        uint16_t F87_IE:1;
        uint16_t F87_DE:1;
        uint16_t F87_ZE:1;
        uint16_t F87_OE:1;
        uint16_t F87_UE:1;
        uint16_t F87_PE:1;
        uint16_t F87_SF:1;
        uint16_t F87_ES:1;
        uint16_t F87_C0:1;
  uint16_t F87_C1:1;
  uint16_t F87_C2:1;
  uint16_t F87_TOP:3;
  uint16_t F87_C3:1;
  uint16_t F87_B:1;
    } f;
    uint16_t x16;
} x87flags_t;

typedef union {
    struct __attribute__ ((__packed__)) {
        uint16_t C87_IM:1;
        uint16_t C87_DM:1;
        uint16_t C87_ZM:1;
        uint16_t C87_OM:1;
        uint16_t C87_UM:1;
        uint16_t C87_PM:1;
        uint16_t C87_R1:2;
        uint16_t C87_PC:2;
        uint16_t C87_RD:2;
  uint16_t C87_IC:1;
  uint16_t C87_R2:3;
    } f;
    uint16_t x16;
} x87control_t;

typedef union {
 struct __attribute__ ((__packed__)) {
  uint32_t MXCSR_IE:1;
  uint32_t MXCSR_DE:1;
  uint32_t MXCSR_ZE:1;
  uint32_t MXCSR_OE:1;
  uint32_t MXCSR_UE:1;
  uint32_t MXCSR_PE:1;
  uint32_t MXCSR_DAZ:1;
  uint32_t MXCSR_IM:1;
  uint32_t MXCSR_DM:1;
  uint32_t MXCSR_ZM:1;
  uint32_t MXCSR_OM:1;
  uint32_t MXCSR_UM:1;
  uint32_t MXCSR_PM:1;
  uint32_t MXCSR_RC:2;
  uint32_t MXCSR_FZ:1;
  uint32_t MXCSR_RES:16;
 } f;
 uint32_t x32;
} mmxcontrol_t;

typedef union {
 uint64_t q;
 int64_t sq;
 double d;
 float f[2];
 uint32_t ud[2];
 int32_t sd[2];
 uint16_t uw[4];
 int16_t sw[4];
 uint8_t ub[8];
 int8_t sb[8];
} mmx87_regs_t;

typedef union {
 uint64_t q[2];
 int64_t sq[2];
 double d[2];
 float f[4];
 uint32_t ud[4];
 int32_t sd[4];
 uint16_t uw[8];
 int16_t sw[8];
 uint8_t ub[16];
 int8_t sb[16];
} sse_regs_t;
#pragma pack(pop)
# 5 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h" 2

typedef struct box86context_s box86context_t;
typedef struct i386_ucontext_s i386_ucontext_t;
# 18 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
typedef struct forkpty_s {
    void* amaster;
    void* name;
    void* termp;
    void* winp;
    void* f;
} forkpty_t;

typedef struct x86emu_s x86emu_t;

typedef struct x86test_s {
    x86emu_t* emu;
    uintptr_t memaddr;
    int memsize;
    int test;
    int clean;
    uint8_t mem[16];
} x86test_t;

typedef struct emu_flags_s {
    uint32_t need_jmpbuf:1;
    uint32_t quitonlongjmp:2;
    uint32_t quitonexit:2;
    uint32_t longjmp:1;
    uint32_t jmpbuf_ready:1;
} emu_flags_t;
# 52 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
typedef struct x86emu_s {

 reg32_t regs[8];
 x86flags_t eflags;
    reg32_t ip;
    uintptr_t xSPSave;

 x87control_t cw;
 x87flags_t sw;
 mmx87_regs_t x87[8];
 mmx87_regs_t mmx[8];
 uint32_t top;
    int fpu_stack;
 uint32_t fpu_tags;
    fpu_ld_t fpu_ld[8];
    fpu_ll_t fpu_ll[8];

    sse_regs_t xmm[8];
    mmxcontrol_t mxcsr;
    uintptr_t old_ip;

    defered_flags_t df;
    uint32_t op1;
    uint32_t op2;
    uint32_t res;
    uint32_t *x86emu_parity_tab;




    uint16_t segs[6];
    uint16_t dummy_seg6, dummy_seg7;
    uintptr_t segs_offs[6];
    uint32_t segs_serial[6];

    int quit;
    int error;
    int fork;
    int exit;
    forkpty_t* forkpty_info;
    emu_flags_t flags;
    x86test_t test;

    box86context_t *context;

    reg32_t zero;
    reg32_t *sbiidx[8];

    uint32_t scratch[200];

    void* stack2free;
    void* init_stack;
    uint32_t size_stack;
    struct __jmp_buf_tag* jmpbuf;
    uintptr_t old_savedsp;

    i386_ucontext_t *uc_link;

    int type;

} x86emu_t;
# 121 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
void applyFlushTo0(x86emu_t* emu);
# 10 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2
# 1 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 1




# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4












# 1 "/usr/include/bits/math-vector.h" 1 3 4
# 25 "/usr/include/bits/math-vector.h" 3 4
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 152 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/flt-eval-method.h" 1 3 4
# 153 "/usr/include/math.h" 2 3 4
# 169 "/usr/include/math.h" 3 4

# 169 "/usr/include/math.h" 3 4
typedef long double float_t;
typedef long double double_t;
# 204 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-logb.h" 1 3 4
# 205 "/usr/include/math.h" 2 3 4
# 247 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-fast.h" 1 3 4
# 248 "/usr/include/math.h" 2 3 4
# 312 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 313 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/bits/mathcalls.h" 3 4
 extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/bits/mathcalls.h" 3 4
 extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/bits/mathcalls.h" 3 4
extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));





 extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
 extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));




extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));







extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/bits/mathcalls.h" 3 4
extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/bits/mathcalls.h" 3 4
extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 314 "/usr/include/math.h" 2 3 4
# 329 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 330 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/bits/mathcalls.h" 3 4
 extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));





 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/bits/mathcalls.h" 3 4
 extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));






 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));



 extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




 extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));





 extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
 extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));




extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));







extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/bits/mathcalls.h" 3 4
extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/bits/mathcalls.h" 3 4
extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 331 "/usr/include/math.h" 2 3 4
# 398 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 399 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
# 85 "/usr/include/bits/mathcalls.h" 3 4
 extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 119 "/usr/include/bits/mathcalls.h" 3 4
 extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));






 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



 extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




 extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));




extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__));
# 213 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));





 extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
 extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));




extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));







extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));






extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));
# 275 "/usr/include/bits/mathcalls.h" 3 4
extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
# 293 "/usr/include/bits/mathcalls.h" 3 4
extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));
# 435 "/usr/include/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 400 "/usr/include/math.h" 2 3 4
# 481 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) __attribute__ ((__nothrow__ , __leaf__));


extern int __issignalingf128 (_Float128 __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));
# 482 "/usr/include/math.h" 2 3 4
# 854 "/usr/include/math.h" 3 4
extern int signgam;
# 934 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 1423 "/usr/include/math.h" 3 4

# 6 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 2

# 1 "/home/ssd/pico/code/box86/src/emu/x86run_private.h" 1





# 1 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h" 1
# 7 "/home/ssd/pico/code/box86/src/emu/x86run_private.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/box86context.h" 1



# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 76 "/usr/include/bits/sched.h" 3 4
# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/bits/sched.h" 2 3 4


# 98 "/usr/include/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 138 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4
# 35 "/usr/include/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/bits/pthread_stack_min-dynamic.h" 2 3 4
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1))) __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 5 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/pathcoll.h" 1







# 7 "/home/ssd/pico/code/box86/src/include/pathcoll.h"
typedef struct path_collection_s
{
    int size;
    int cap;
    char** paths;
} path_collection_t;

void ParseList(const char* List, path_collection_t* collection, int folder);
void FreeCollection(path_collection_t* collection);
void CopyCollection(path_collection_t* to, path_collection_t* from);
void AddPath(const char* path, path_collection_t* collection, int folder);
void PrependPath(const char* path, path_collection_t* collection, int folder);
void AppendList(path_collection_t* collection, const char* List, int folder);
void PrependList(path_collection_t* collection, const char* List, int folder);
int FindInCollection(const char* path, path_collection_t* collection);
# 6 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/dictionnary.h" 1




typedef void dic_t;

dic_t *NewDictionnary();
void FreeDictionnary(dic_t **dic);

const char* AddDictionnary(dic_t* dic, const char* s);
int ExistDictionnary(dic_t* dic, const char* s);
# 7 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 15 "/home/ssd/pico/code/box86/src/include/box86context.h"
typedef struct elfheader_s elfheader_t;
typedef struct cleanup_s cleanup_t;
typedef struct x86emu_s x86emu_t;
typedef struct zydis_s zydis_t;
typedef struct lib_s lib_t;
typedef struct bridge_s bridge_t;
typedef struct dlprivate_s dlprivate_t;
typedef struct kh_symbolmap_s kh_symbolmap_t;
typedef struct kh_defaultversion_s kh_defaultversion_t;
typedef struct kh_mapsymbols_s kh_mapsymbols_t;
typedef struct library_s library_t;
typedef struct linkmap_s linkmap_t;
typedef struct kh_fts_s kh_fts_t;
typedef struct kh_threadstack_s kh_threadstack_t;
typedef struct zydis_dec_s zydis_dec_t;
typedef struct atfork_fnc_s {
    uintptr_t prepare;
    uintptr_t parent;
    uintptr_t child;
    void* handle;
} atfork_fnc_t;
# 47 "/home/ssd/pico/code/box86/src/include/box86context.h"
typedef void* (*procaddress_t)(const char* name);
typedef void* (*vkprocaddress_t)(void* instance, const char* name);



typedef struct tlsdatasize_s {
    int tlssize;
    int n_elfs;
    void* data;
    void* ptr;
} tlsdatasize_t;

void free_tlsdatasize(void* p);

typedef struct needed_libs_s {
    int cap;
    int size;
    char** names;
    library_t** libs;
    int nb_done;
} needed_libs_t;

void free_neededlib(needed_libs_t* needed);
needed_libs_t* new_neededlib(int n);
needed_libs_t* copy_neededlib(needed_libs_t* needed);
void add1_neededlib(needed_libs_t* needed);
void add1lib_neededlib(needed_libs_t* needed, library_t* lib, const char* name);

typedef struct base_segment_s {
    uintptr_t base;
    uint32_t limit;
    int present;
    pthread_key_t key;
} base_segment_t;

typedef struct box86context_s {
    path_collection_t box86_path;
    path_collection_t box86_ld_lib;

    path_collection_t box86_emulated_libs;

    int x86trace;
    int trace_tid;

    uint32_t sel_serial;

    zydis_t *zydis;
    void* box86lib;

    int argc;
    char** argv;

    int envc;
    char** envv;

    int orig_argc;
    char** orig_argv;

    char* fullpath;
    char* box86path;
    char* box64path;
    char* bashpath;

    uint32_t stacksz;
    uint32_t stackalign;
    void* stack;

    elfheader_t **elfs;
    int elfcap;
    int elfsize;

    needed_libs_t *neededlibs;
    needed_libs_t *preload;

    uintptr_t ep;

    void* brk;
    int brksz;

    lib_t *maplib;
    lib_t *local_maplib;
    dic_t *versym;
    kh_mapsymbols_t *globdata;

    kh_threadstack_t *stacksizes;
    bridge_t *system;
    uintptr_t exit_bridge;
    uintptr_t vsyscall;
    dlprivate_t *dlprivate;
    kh_symbolmap_t *alwrappers;
    kh_symbolmap_t *almymap;
    kh_symbolmap_t *vkwrappers;
    kh_symbolmap_t *vkmymap;
    vkprocaddress_t vkprocaddress;


    pthread_mutex_t mutex_once;
    pthread_mutex_t mutex_once2;
    pthread_mutex_t mutex_trace;
    pthread_mutex_t mutex_tls;
    pthread_mutex_t mutex_thread;
    pthread_mutex_t mutex_bridge;
    pthread_mutex_t mutex_lock;
# 173 "/home/ssd/pico/code/box86/src/include/box86context.h"
    library_t *libclib;
    library_t *sdl1mixerlib;
    library_t *sdl2lib;
    library_t *sdl2mixerlib;

    linkmap_t *linkmap;

    void* sdl1allocrw;
    void* sdl1freerw;
    void* sdl2allocrw;
    void* sdl2freerw;

    int deferredInit;
    elfheader_t **deferredInitList;
    int deferredInitSz;
    int deferredInitCap;

    pthread_key_t tlskey;
    void* tlsdata;
    int32_t tlssize;
    base_segment_t segtls[3+16];

    uintptr_t *auxval_start;

    cleanup_t *cleanups;
    int clean_sz;
    int clean_cap;



    zydis_dec_t *dec;

    int forked;

    atfork_fnc_t *atforks;
    int atfork_sz;
    int atfork_cap;

    uint8_t canary[4];

    uintptr_t signals[64 +1];
    uintptr_t restorer[64 +1];
    int onstack[64 +1];
    int is_sigaction[64 +1];
    x86emu_t *emu_sig;
    int no_sigsegv;
    int no_sigill;
    void* stack_clone;
    int stack_clone_used;


    char* *log_call;
    char* *log_ret;
    int current_line;
} box86context_t;
# 240 "/home/ssd/pico/code/box86/src/include/box86context.h"
extern box86context_t *my_context;

box86context_t *NewBox86Context(int argc);
void FreeBox86Context(box86context_t** context);


void freeCycleLog(box86context_t* ctx);
void initCycleLog(box86context_t* context);
void print_cycle_log(int loglevel);


int AddElfHeader(box86context_t* ctx, elfheader_t* head);

void RemoveElfHeader(box86context_t* ctx, elfheader_t* head);


int AddTLSPartition(box86context_t* context, int tlssize);


void thread_set_emu(x86emu_t* emu);
x86emu_t* thread_get_emu();


int unlockMutex();

void relockMutex(int locks);
# 8 "/home/ssd/pico/code/box86/src/emu/x86run_private.h" 2
typedef struct x86emu_s x86emu_t;

static inline uint8_t Fetch8(x86emu_t *emu) {return *(uint8_t*)(emu->ip.dword[0]++);}
static inline int8_t Fetch8s(x86emu_t *emu) {return *(int8_t*)(emu->ip.dword[0]++);}
static inline uint16_t Fetch16(x86emu_t *emu)
{
    uint16_t val = *(uint16_t*)emu->ip.dword[0];
    emu->ip.dword[0]+=2;
    return val;
}
static inline int16_t Fetch16s(x86emu_t *emu)
{
    int16_t val = *(int16_t*)emu->ip.dword[0];
    emu->ip.dword[0]+=2;
    return val;
}
static inline uint32_t Fetch32(x86emu_t *emu)
{
    uint32_t val = *(uint32_t*)emu->ip.dword[0];
    emu->ip.dword[0]+=4;
    return val;
}
static inline int32_t Fetch32s(x86emu_t *emu)
{
    int32_t val = *(int32_t*)emu->ip.dword[0];
    emu->ip.dword[0]+=4;
    return val;
}
static inline uint8_t Peek(x86emu_t *emu, int offset){return *(uint8_t*)(emu->ip.dword[0] + offset);}

static inline uint32_t Pop(x86emu_t *emu)
{
    uint32_t* st = ((uint32_t*)(emu->regs[_SP].dword[0]));
    emu->regs[_SP].dword[0] += 4;
    return *st;
}





static inline void Push(x86emu_t *emu, uint32_t v)
{
    emu->regs[_SP].dword[0] -= 4;
    *((uint32_t*)emu->regs[_SP].dword[0]) = v;
}


static inline void PushExit(x86emu_t* emu)
{
    emu->regs[_SP].dword[0] -= 4;
    *((uint32_t*)emu->regs[_SP].dword[0]) = my_context->exit_bridge;
}
# 203 "/home/ssd/pico/code/box86/src/emu/x86run_private.h"
void UpdateFlags(x86emu_t *emu);




uintptr_t Run0F(x86emu_t *emu, uintptr_t addr, int *step);
uintptr_t Run64(x86emu_t *emu, int seg, uintptr_t addr);
uintptr_t Run640F(x86emu_t *emu, uintptr_t tlsdata, uintptr_t addr);
uintptr_t Run6466(x86emu_t *emu, uintptr_t tlsdata, uintptr_t addr);
uintptr_t Run6467(x86emu_t *emu, uintptr_t tlsdata, uintptr_t addr);
uintptr_t Run66(x86emu_t *emu, int rep, uintptr_t addr);
uintptr_t Run660F(x86emu_t *emu, uintptr_t addr);
uintptr_t Run66F20F(x86emu_t *emu, uintptr_t addr);
uintptr_t Run6664(x86emu_t *emu, int seg, uintptr_t addr);
uintptr_t Run66D9(x86emu_t *emu, uintptr_t addr);
uintptr_t Run66DD(x86emu_t *emu, uintptr_t addr);
uintptr_t Run66F0(x86emu_t *emu, uintptr_t addr);
uintptr_t Run67(x86emu_t *emu, int rep, uintptr_t addr);
uintptr_t Run670F(x86emu_t *emu, int rep, uintptr_t addr);
uintptr_t Run6766(x86emu_t *emu, int rep, uintptr_t addr);
uintptr_t Run67660F(x86emu_t *emu, uintptr_t addr);
uintptr_t RunD8(x86emu_t *emu, uintptr_t addr);
uintptr_t RunD9(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDA(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDB(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDC(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDD(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDE(x86emu_t *emu, uintptr_t addr);
uintptr_t RunDF(x86emu_t *emu, uintptr_t addr);
uintptr_t RunF0(x86emu_t *emu, uintptr_t addr);
uintptr_t RunF066(x86emu_t *emu, uintptr_t addr);
uintptr_t RunF20F(x86emu_t *emu, uintptr_t addr, int *step);
uintptr_t RunF30F(x86emu_t *emu, uintptr_t addr);
# 268 "/home/ssd/pico/code/box86/src/emu/x86run_private.h"
void x86Syscall(x86emu_t *emu);
void x86Int3(x86emu_t* emu);
x86emu_t* x86emu_fork(x86emu_t* e, int forktype);

uintptr_t GetSegmentBaseEmu(x86emu_t* emu, int seg);





const char* GetNativeName(void* p);
# 8 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/debug.h" 1




typedef struct box86context_s box86context_t;
extern int box86_log;
extern int box86_dump;
extern int box86_dynarec_log;
extern int box86_dynarec;
extern uintptr_t box86_pagesize;
extern uintptr_t box86_load_addr;
extern int box86_showbt;
extern int box86_maxcpu;
extern int box86_maxcpu_immutable;
# 45 "/home/ssd/pico/code/box86/src/include/debug.h"
extern int box86_libcef;
extern int box86_sdl2_jguid;
extern int dlsym_error;
extern int cycle_log;
extern int trace_xmm;
extern int trace_emm;
extern int box86_nosandbox;
extern int box86_malloc_hack;
extern int box86_sse_flushto0;
extern int box86_x87_no80bits;
extern int allow_missing_libs;
extern int box86_prefer_wrapped;
extern int box86_prefer_emulated;
extern int box86_steam;
extern int box86_wine;
extern int box86_musl;
extern int box86_nopulse;
extern int box86_nogtk;
extern int box86_novulkan;
extern int box86_nocrashhandler;
extern int box86_futex_waitv;
extern int box86_mapclean;
extern int box86_showsegv;
extern int box86_mutex_aligned;
extern int allow_missing_symbols;
extern uintptr_t trace_start, trace_end;
extern char* trace_func;
extern char* trace_init;
extern char* box86_trace;
extern uint64_t start_cnt;
extern uintptr_t fmod_smc_start, fmod_smc_end;
extern uint32_t default_fs;
extern int jit_gdb;
extern int box86_tcmalloc_minimal;
extern int box86_isglibc234;
extern int box86_x11threads;
extern int box86_x11glx;
extern char* box86_libGL;






extern FILE* ftrace;
# 106 "/home/ssd/pico/code/box86/src/include/debug.h"
void init_malloc_hook();
# 116 "/home/ssd/pico/code/box86/src/include/debug.h"
extern size_t(*box_malloc_usable_size)(const void*);
extern void* __libc_malloc(size_t);
extern void* __libc_realloc(void*, size_t);
extern void* __libc_calloc(size_t, size_t);
extern void __libc_free(void*);
extern void* __libc_memalign(size_t, size_t);





extern char* box_strdup(const char* s);
extern char* box_realpath(const char* path, char* ret);
# 9 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 2
typedef struct x86emu_s x86emu_t;
# 26 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
static inline void fpu_do_push(x86emu_t* emu)
{
    int newtop = (emu->top-1)&7;





    if(emu->fpu_stack<8)
        ++emu->fpu_stack;
    else {
        emu->sw.f.F87_C1 = 1;
        return;
    }
    emu->sw.f.F87_C1 = 0;
    emu->fpu_tags<<=2;
    emu->fpu_tags &= 0b1111111111111111;
    emu->top = newtop;
}

static inline void fpu_do_pop(x86emu_t* emu)
{
    int curtop = (emu->top)&7;





    if(emu->fpu_stack>0)
        --emu->fpu_stack;

    emu->fpu_tags>>=2;
    emu->fpu_tags |= 0b1100000000000000;
    emu->top = (emu->top+1)&7;







}

static inline void fpu_do_free(x86emu_t* emu, int i)
{
    emu->fpu_tags |= 0b11 << (i);

    if(emu->fpu_tags != 0b1111111111111111)
        return;
    emu->fpu_stack = 0;
}

void reset_fpu(x86emu_t* emu);

static inline void fpu_fcom(x86emu_t* emu, double b)
{
    emu->sw.f.F87_C1 = 0;
    if(
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      __builtin_isnan (
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
      emu->x87[emu->top].d
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      ) 
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                   || 
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
                      __builtin_isnan (
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                      b
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
                      )
# 83 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                              ) {
        emu->sw.f.F87_C0 = 1;
        emu->sw.f.F87_C2 = 1;
        emu->sw.f.F87_C3 = 1;
    } else if (
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              __builtin_isgreater(
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              emu->x87[emu->top].d
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              , 
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              b
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              )
# 87 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                                 ) {
        emu->sw.f.F87_C0 = 0;
        emu->sw.f.F87_C2 = 0;
        emu->sw.f.F87_C3 = 0;
    } else if (
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              __builtin_isless(
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              emu->x87[emu->top].d
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              , 
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              b
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              )
# 91 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                              ) {
        emu->sw.f.F87_C0 = 1;
        emu->sw.f.F87_C2 = 0;
        emu->sw.f.F87_C3 = 0;
    }
    else {
        emu->sw.f.F87_C0 = 0;
        emu->sw.f.F87_C2 = 0;
        emu->sw.f.F87_C3 = 1;
    }
}

static inline void fpu_fcomi(x86emu_t* emu, double b)
{
    emu->df = d_none;
    emu->eflags.f._F_AF = 0;
    emu->eflags.f._F_OF = 0;
    emu->eflags.f._F_SF = 0;
    emu->sw.f.F87_C1 = 0;
    if(
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      __builtin_isnan (
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
      emu->x87[emu->top].d
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      ) 
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                   || 
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
                      __builtin_isnan (
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                      b
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
                      )
# 110 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                              ) {
        emu->eflags.f._F_CF = 1;
        emu->eflags.f._F_PF = 1;
        emu->eflags.f._F_ZF = 1;
    } else if (
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              __builtin_isgreater(
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              emu->x87[emu->top].d
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              , 
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              b
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              )
# 114 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                                 ) {
        emu->eflags.f._F_CF = 0;
        emu->eflags.f._F_PF = 0;
        emu->eflags.f._F_ZF = 0;
    } else if (
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              __builtin_isless(
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              emu->x87[emu->top].d
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              , 
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
              b
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
              )
# 118 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                              ) {
        emu->eflags.f._F_CF = 1;
        emu->eflags.f._F_PF = 0;
        emu->eflags.f._F_ZF = 0;
    }
    else {
        emu->eflags.f._F_CF = 0;
        emu->eflags.f._F_PF = 0;
        emu->eflags.f._F_ZF = 1;
    }
}

static inline double fpu_round(x86emu_t* emu, double d) {
    if (!
# 131 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
        __builtin_isfinite (
# 131 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
        d
# 131 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
        )
# 131 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                   )
        return d;
    switch(emu->cw.f.C87_RD) {
        case ROUND_Nearest:
            return nearbyint(d);
        case ROUND_Down:
            return floor(d);
        case ROUND_Up:
            return ceil(d);
        case ROUND_Chop:
        default:
            return trunc(d);
    }
}

void fpu_fxam(x86emu_t* emu);

static inline void fpu_ftst(x86emu_t* emu) {
    emu->sw.f.F87_C1 = 0;
    if(
# 150 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      __builtin_isnan (
# 150 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
      emu->x87[emu->top].d
# 150 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h" 3 4
      )
# 150 "/home/ssd/pico/code/box86/src/emu/x87emu_private.h"
                  )
    {
        emu->sw.f.F87_C3 = 1;
        emu->sw.f.F87_C2 = 1;
        emu->sw.f.F87_C0 = 1;
        return;
    }
    if(emu->x87[emu->top].d==0.0)
    {
        emu->sw.f.F87_C3 = 1;
        emu->sw.f.F87_C2 = 0;
        emu->sw.f.F87_C0 = 0;
        return;
    }

    emu->sw.f.F87_C3 = 0;
    emu->sw.f.F87_C2 = 0;
    emu->sw.f.F87_C0 = (emu->x87[emu->top].ud[1]&0x80000000)?1:0;
}

void fpu_fbst(x86emu_t* emu, uint8_t* d);
void fpu_fbld(x86emu_t* emu, uint8_t* s);

void fpu_loadenv(x86emu_t* emu, char* p, int b16);
void fpu_savenv(x86emu_t* emu, char* p, int b16);
void fpu_fxsave(x86emu_t* emu, void* ed);
void fpu_fxrstor(x86emu_t* emu, void* ed);
# 11 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2

# 1 "/home/ssd/pico/code/box86/src/include/x86emu.h" 1



typedef struct x86emu_s x86emu_t;
typedef struct box86context_s box86context_t;

x86emu_t *NewX86Emu(box86context_t *context, uintptr_t start, uintptr_t stack, int stacksize, int ownstack);
x86emu_t *NewX86EmuFromStack(x86emu_t* emu, box86context_t *context, uintptr_t start, uintptr_t stack, int stacksize, int ownstack);
void SetupX86Emu(x86emu_t *emu);
void FreeX86Emu(x86emu_t **x86emu);
void FreeX86EmuFromStack(x86emu_t **emu);
void CloneEmu(x86emu_t *newemu, const x86emu_t* emu);
void CopyEmu(x86emu_t *newemu, const x86emu_t* emu);
void SetTraceEmu(uintptr_t trace_start, uintptr_t trace_end);

box86context_t* GetEmuContext(x86emu_t* emu);

uint32_t GetEAX(x86emu_t *emu);
uint64_t GetEDXEAX(x86emu_t *emu);
void SetEAX(x86emu_t *emu, uint32_t v);
void SetEBX(x86emu_t *emu, uint32_t v);
void SetECX(x86emu_t *emu, uint32_t v);
void SetEDX(x86emu_t *emu, uint32_t v);
void SetEDI(x86emu_t *emu, uint32_t v);
void SetESI(x86emu_t *emu, uint32_t v);
void SetEBP(x86emu_t *emu, uint32_t v);
void SetESP(x86emu_t *emu, uint32_t v);
void SetEIP(x86emu_t *emu, uint32_t v);
void SetFS(x86emu_t *emu, uint16_t v);
uint16_t GetFS(x86emu_t *emu);
uint32_t GetESP(x86emu_t *emu);
void ResetFlags(x86emu_t *emu);
void ResetSegmentsCache(x86emu_t *emu);
const char* DumpCPURegs(x86emu_t* emu, uintptr_t ip);

void StopEmu(x86emu_t* emu, const char* reason);
void EmuCall(x86emu_t* emu, uintptr_t addr);
void AddCleanup(x86emu_t *emu, void *p);
void AddCleanup1Arg(x86emu_t *emu, void *p, void* a);
void CallCleanup(x86emu_t *emu, void* p);
void CallAllCleanup(x86emu_t *emu);
void UnimpOpcode(x86emu_t* emu);

uint64_t ReadTSC(x86emu_t* emu);

double FromLD(void* ld);
long double LD2localLD(void* ld);
void LD2D(void* ld, void* d);
void D2LD(void* d, void* ld);

void printFunctionAddr(uintptr_t nextaddr, const char* text);
const char* getAddrFunctionName(uintptr_t addr);
# 13 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 2

typedef union ui64_s
{
 int64_t i;
 uint64_t u;
 uint32_t d[2];
} ui64_t;

typedef struct _2uint_struct_s
{
 uint32_t a;
 uint32_t b;
} _2uint_struct_t;

extern void *my__IO_2_1_stderr_;
extern void *my__IO_2_1_stdin_;
extern void *my__IO_2_1_stdout_;

static void *io_convert(void *v)
{
 if (!v)
  return v;
 if (v == my__IO_2_1_stderr_)
  return 
# 36 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 3 4
        stderr
# 36 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
              ;
 if (v == my__IO_2_1_stdin_)
  return 
# 38 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 3 4
        stdin
# 38 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
             ;
 if (v == my__IO_2_1_stdout_)
  return 
# 40 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c" 3 4
        stdout
# 40 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
              ;
 return v;
}

typedef struct my_GValue_s
{
 int g_type;
 union
 {
  int v_int;
  int64_t v_int64;
  uint64_t v_uint64;
  float v_float;
  double v_double;
  void *v_pointer;
 } data[2];
} my_GValue_t;

static void alignGValue(my_GValue_t *v, void *value)
{
 v->g_type = *(int *)value;
 memcpy(v->data, value + 4, 2 * sizeof(double));
}
static void unalignGValue(void *value, my_GValue_t *v)
{
 *(int *)value = v->g_type;
 memcpy(value + 4, v->data, 2 * sizeof(double));
}

void *VulkanFromx86(void *src);
void VulkanTox86(void *src);



int of_convert(int);

typedef void (*vFv_t)(void);
typedef void (*vFc_t)(int8_t);
typedef void (*vFw_t)(int16_t);
typedef void (*vFi_t)(int32_t);
typedef void (*vFC_t)(uint8_t);
typedef void (*vFW_t)(uint16_t);
typedef void (*vFu_t)(uint32_t);
typedef void (*vFU_t)(uint64_t);
typedef void (*vFf_t)(float);
typedef void (*vFd_t)(double);
typedef void (*vFl_t)(intptr_t);
typedef void (*vFL_t)(uintptr_t);
typedef void (*vFp_t)(void *);
typedef void (*vFS_t)(void *);
typedef void (*vFG_t)(void *);
typedef int8_t (*cFv_t)(void);
typedef int8_t (*cFi_t)(int32_t);
typedef int8_t (*cFu_t)(uint32_t);
typedef int8_t (*cFf_t)(float);
typedef int8_t (*cFp_t)(void *);
typedef int8_t (*cFG_t)(void *);
typedef int16_t (*wFp_t)(void *);
typedef int32_t (*iFv_t)(void);
typedef int32_t (*iFw_t)(int16_t);
typedef int32_t (*iFi_t)(int32_t);
typedef int32_t (*iFI_t)(int64_t);
typedef int32_t (*iFC_t)(uint8_t);
typedef int32_t (*iFW_t)(uint16_t);
typedef int32_t (*iFu_t)(uint32_t);
typedef int32_t (*iFU_t)(uint64_t);
typedef int32_t (*iFf_t)(float);
typedef int32_t (*iFd_t)(double);
typedef int32_t (*iFL_t)(uintptr_t);
typedef int32_t (*iFp_t)(void *);
typedef int32_t (*iFS_t)(void *);
typedef int32_t (*iFG_t)(void *);
typedef int64_t (*IFv_t)(void);
typedef int64_t (*IFi_t)(int32_t);
typedef int64_t (*IFf_t)(float);
typedef int64_t (*IFd_t)(double);
typedef int64_t (*IFp_t)(void *);
typedef int64_t (*IFG_t)(void *);
typedef uint8_t (*CFv_t)(void);
typedef uint8_t (*CFC_t)(uint8_t);
typedef uint8_t (*CFu_t)(uint32_t);
typedef uint8_t (*CFl_t)(intptr_t);
typedef uint8_t (*CFL_t)(uintptr_t);
typedef uint8_t (*CFp_t)(void *);
typedef uint8_t (*CFG_t)(void *);
typedef uint16_t (*WFi_t)(int32_t);
typedef uint16_t (*WFu_t)(uint32_t);
typedef uint16_t (*WFp_t)(void *);
typedef uint32_t (*uFv_t)(void);
typedef uint32_t (*uFi_t)(int32_t);
typedef uint32_t (*uFu_t)(uint32_t);
typedef uint32_t (*uFU_t)(uint64_t);
typedef uint32_t (*uFd_t)(double);
typedef uint32_t (*uFl_t)(intptr_t);
typedef uint32_t (*uFp_t)(void *);
typedef uint32_t (*uFG_t)(void *);
typedef uint64_t (*UFv_t)(void);
typedef uint64_t (*UFu_t)(uint32_t);
typedef uint64_t (*UFU_t)(uint64_t);
typedef uint64_t (*UFp_t)(void *);
typedef uint64_t (*UFG_t)(void *);
typedef uint64_t (*UFs_t)(void *);
typedef float (*fFi_t)(int32_t);
typedef float (*fFf_t)(float);
typedef float (*fFp_t)(void *);
typedef float (*fFG_t)(void *);
typedef double (*dFv_t)(void);
typedef double (*dFi_t)(int32_t);
typedef double (*dFu_t)(uint32_t);
typedef double (*dFd_t)(double);
typedef double (*dFp_t)(void *);
typedef double (*dFG_t)(void *);
typedef intptr_t (*lFv_t)(void);
typedef intptr_t (*lFu_t)(uint32_t);
typedef intptr_t (*lFl_t)(intptr_t);
typedef intptr_t (*lFp_t)(void *);
typedef intptr_t (*lFG_t)(void *);
typedef uintptr_t (*LFv_t)(void);
typedef uintptr_t (*LFi_t)(int32_t);
typedef uintptr_t (*LFu_t)(uint32_t);
typedef uintptr_t (*LFL_t)(uintptr_t);
typedef uintptr_t (*LFp_t)(void *);
typedef uintptr_t (*LFG_t)(void *);
typedef void *(*pFv_t)(void);
typedef void *(*pFw_t)(int16_t);
typedef void *(*pFi_t)(int32_t);
typedef void *(*pFI_t)(int64_t);
typedef void *(*pFC_t)(uint8_t);
typedef void *(*pFW_t)(uint16_t);
typedef void *(*pFu_t)(uint32_t);
typedef void *(*pFU_t)(uint64_t);
typedef void *(*pFd_t)(double);
typedef void *(*pFl_t)(intptr_t);
typedef void *(*pFL_t)(uintptr_t);
typedef void *(*pFp_t)(void *);
typedef void *(*pFV_t)(void *);
typedef void *(*pFG_t)(void *);
typedef void (*vFEv_t)(x86emu_t *);
typedef void (*vFEi_t)(x86emu_t *, int32_t);
typedef void (*vFEp_t)(x86emu_t *, void *);
typedef void (*vFcc_t)(int8_t, int8_t);
typedef void (*vFww_t)(int16_t, int16_t);
typedef void (*vFii_t)(int32_t, int32_t);
typedef void (*vFiI_t)(int32_t, int64_t);
typedef void (*vFiW_t)(int32_t, uint16_t);
typedef void (*vFiu_t)(int32_t, uint32_t);
typedef void (*vFiU_t)(int32_t, uint64_t);
typedef void (*vFif_t)(int32_t, float);
typedef void (*vFid_t)(int32_t, double);
typedef void (*vFil_t)(int32_t, intptr_t);
typedef void (*vFiL_t)(int32_t, uintptr_t);
typedef void (*vFip_t)(int32_t, void *);
typedef void (*vFWW_t)(uint16_t, uint16_t);
typedef void (*vFWp_t)(uint16_t, void *);
typedef void (*vFuc_t)(uint32_t, int8_t);
typedef void (*vFuw_t)(uint32_t, int16_t);
typedef void (*vFui_t)(uint32_t, int32_t);
typedef void (*vFuC_t)(uint32_t, uint8_t);
typedef void (*vFuW_t)(uint32_t, uint16_t);
typedef void (*vFuu_t)(uint32_t, uint32_t);
typedef void (*vFuU_t)(uint32_t, uint64_t);
typedef void (*vFuf_t)(uint32_t, float);
typedef void (*vFud_t)(uint32_t, double);
typedef void (*vFul_t)(uint32_t, intptr_t);
typedef void (*vFuL_t)(uint32_t, uintptr_t);
typedef void (*vFup_t)(uint32_t, void *);
typedef void (*vFUi_t)(uint64_t, int32_t);
typedef void (*vFfi_t)(float, int32_t);
typedef void (*vFfC_t)(float, uint8_t);
typedef void (*vFff_t)(float, float);
typedef void (*vFfp_t)(float, void *);
typedef void (*vFdd_t)(double, double);
typedef void (*vFlu_t)(intptr_t, uint32_t);
typedef void (*vFlp_t)(intptr_t, void *);
typedef void (*vFLu_t)(uintptr_t, uint32_t);
typedef void (*vFLp_t)(uintptr_t, void *);
typedef void (*vFpi_t)(void *, int32_t);
typedef void (*vFpI_t)(void *, int64_t);
typedef void (*vFpC_t)(void *, uint8_t);
typedef void (*vFpW_t)(void *, uint16_t);
typedef void (*vFpu_t)(void *, uint32_t);
typedef void (*vFpU_t)(void *, uint64_t);
typedef void (*vFpf_t)(void *, float);
typedef void (*vFpd_t)(void *, double);
typedef void (*vFpl_t)(void *, intptr_t);
typedef void (*vFpL_t)(void *, uintptr_t);
typedef void (*vFpp_t)(void *, void *);
typedef void (*vFpV_t)(void *, void *);
typedef void (*vFpS_t)(void *, void *);
typedef void (*vFpP_t)(void *, void *);
typedef void (*vFpG_t)(void *, void *);
typedef void (*vFSi_t)(void *, int32_t);
typedef void (*vFGc_t)(void *, int8_t);
typedef void (*vFGi_t)(void *, int32_t);
typedef void (*vFGI_t)(void *, int64_t);
typedef void (*vFGC_t)(void *, uint8_t);
typedef void (*vFGu_t)(void *, uint32_t);
typedef void (*vFGU_t)(void *, uint64_t);
typedef void (*vFGf_t)(void *, float);
typedef void (*vFGd_t)(void *, double);
typedef void (*vFGl_t)(void *, intptr_t);
typedef void (*vFGL_t)(void *, uintptr_t);
typedef void (*vFGp_t)(void *, void *);
typedef void (*vFGG_t)(void *, void *);
typedef int8_t (*cFpp_t)(void *, void *);
typedef int32_t (*iFEv_t)(x86emu_t *);
typedef int32_t (*iFEi_t)(x86emu_t *, int32_t);
typedef int32_t (*iFEu_t)(x86emu_t *, uint32_t);
typedef int32_t (*iFEf_t)(x86emu_t *, float);
typedef int32_t (*iFEd_t)(x86emu_t *, double);
typedef int32_t (*iFEL_t)(x86emu_t *, uintptr_t);
typedef int32_t (*iFEp_t)(x86emu_t *, void *);
typedef int32_t (*iFwp_t)(int16_t, void *);
typedef int32_t (*iFii_t)(int32_t, int32_t);
typedef int32_t (*iFiI_t)(int32_t, int64_t);
typedef int32_t (*iFiu_t)(int32_t, uint32_t);
typedef int32_t (*iFiU_t)(int32_t, uint64_t);
typedef int32_t (*iFil_t)(int32_t, intptr_t);
typedef int32_t (*iFip_t)(int32_t, void *);
typedef int32_t (*iFiV_t)(int32_t, void *);
typedef int32_t (*iFIi_t)(int64_t, int32_t);
typedef int32_t (*iFui_t)(uint32_t, int32_t);
typedef int32_t (*iFuu_t)(uint32_t, uint32_t);
typedef int32_t (*iFup_t)(uint32_t, void *);
typedef int32_t (*iFli_t)(intptr_t, int32_t);
typedef int32_t (*iFLL_t)(uintptr_t, uintptr_t);
typedef int32_t (*iFLp_t)(uintptr_t, void *);
typedef int32_t (*iFpw_t)(void *, int16_t);
typedef int32_t (*iFpi_t)(void *, int32_t);
typedef int32_t (*iFpI_t)(void *, int64_t);
typedef int32_t (*iFpC_t)(void *, uint8_t);
typedef int32_t (*iFpW_t)(void *, uint16_t);
typedef int32_t (*iFpu_t)(void *, uint32_t);
typedef int32_t (*iFpU_t)(void *, uint64_t);
typedef int32_t (*iFpf_t)(void *, float);
typedef int32_t (*iFpd_t)(void *, double);
typedef int32_t (*iFpl_t)(void *, intptr_t);
typedef int32_t (*iFpL_t)(void *, uintptr_t);
typedef int32_t (*iFpp_t)(void *, void *);
typedef int32_t (*iFpV_t)(void *, void *);
typedef int32_t (*iFpO_t)(void *, int32_t);
typedef int32_t (*iFpP_t)(void *, void *);
typedef int32_t (*iFpG_t)(void *, void *);
typedef int32_t (*iFSi_t)(void *, int32_t);
typedef int32_t (*iFGG_t)(void *, void *);
typedef int64_t (*IFEf_t)(x86emu_t *, float);
typedef int64_t (*IFEd_t)(x86emu_t *, double);
typedef int64_t (*IFEp_t)(x86emu_t *, void *);
typedef int64_t (*IFII_t)(int64_t, int64_t);
typedef int64_t (*IFpu_t)(void *, uint32_t);
typedef int64_t (*IFpd_t)(void *, double);
typedef uint8_t (*CFip_t)(int32_t, void *);
typedef uint8_t (*CFui_t)(uint32_t, int32_t);
typedef uint8_t (*CFuu_t)(uint32_t, uint32_t);
typedef uint8_t (*CFuL_t)(uint32_t, uintptr_t);
typedef uint8_t (*CFpi_t)(void *, int32_t);
typedef uint8_t (*CFpu_t)(void *, uint32_t);
typedef uint8_t (*CFpp_t)(void *, void *);
typedef uint16_t (*WFpp_t)(void *, void *);
typedef uint32_t (*uFEu_t)(x86emu_t *, uint32_t);
typedef uint32_t (*uFEp_t)(x86emu_t *, void *);
typedef uint32_t (*uFii_t)(int32_t, int32_t);
typedef uint32_t (*uFiu_t)(int32_t, uint32_t);
typedef uint32_t (*uFui_t)(uint32_t, int32_t);
typedef uint32_t (*uFuu_t)(uint32_t, uint32_t);
typedef uint32_t (*uFup_t)(uint32_t, void *);
typedef uint32_t (*uFpw_t)(void *, int16_t);
typedef uint32_t (*uFpi_t)(void *, int32_t);
typedef uint32_t (*uFpu_t)(void *, uint32_t);
typedef uint32_t (*uFpf_t)(void *, float);
typedef uint32_t (*uFpL_t)(void *, uintptr_t);
typedef uint32_t (*uFpp_t)(void *, void *);
typedef uint32_t (*uFp2_t)(void *, _2uint_struct_t);
typedef uint64_t (*UFEp_t)(x86emu_t *, void *);
typedef uint64_t (*UFii_t)(int32_t, int32_t);
typedef uint64_t (*UFuu_t)(uint32_t, uint32_t);
typedef uint64_t (*UFUU_t)(uint64_t, uint64_t);
typedef uint64_t (*UFUp_t)(uint64_t, void *);
typedef uint64_t (*UFpp_t)(void *, void *);
typedef uint64_t (*UFss_t)(void *, void *);
typedef float (*fFEf_t)(x86emu_t *, float);
typedef float (*fFEp_t)(x86emu_t *, void *);
typedef float (*fFif_t)(int32_t, float);
typedef float (*fFfi_t)(float, int32_t);
typedef float (*fFff_t)(float, float);
typedef float (*fFfD_t)(float, long double);
typedef float (*fFfp_t)(float, void *);
typedef float (*fFpp_t)(void *, void *);
typedef double (*dFEd_t)(x86emu_t *, double);
typedef double (*dFid_t)(int32_t, double);
typedef double (*dFuu_t)(uint32_t, uint32_t);
typedef double (*dFdi_t)(double, int32_t);
typedef double (*dFdd_t)(double, double);
typedef double (*dFdD_t)(double, long double);
typedef double (*dFdp_t)(double, void *);
typedef double (*dFpi_t)(void *, int32_t);
typedef double (*dFpd_t)(void *, double);
typedef double (*dFpp_t)(void *, void *);
typedef long double (*DFpp_t)(void *, void *);
typedef intptr_t (*lFEv_t)(x86emu_t *);
typedef intptr_t (*lFEi_t)(x86emu_t *, int32_t);
typedef intptr_t (*lFui_t)(uint32_t, int32_t);
typedef intptr_t (*lFll_t)(intptr_t, intptr_t);
typedef intptr_t (*lFpi_t)(void *, int32_t);
typedef intptr_t (*lFpp_t)(void *, void *);
typedef uintptr_t (*LFii_t)(int32_t, int32_t);
typedef uintptr_t (*LFuu_t)(uint32_t, uint32_t);
typedef uintptr_t (*LFUp_t)(uint64_t, void *);
typedef uintptr_t (*LFLi_t)(uintptr_t, int32_t);
typedef uintptr_t (*LFpi_t)(void *, int32_t);
typedef uintptr_t (*LFpL_t)(void *, uintptr_t);
typedef uintptr_t (*LFpp_t)(void *, void *);
typedef void *(*pFEv_t)(x86emu_t *);
typedef void *(*pFEi_t)(x86emu_t *, int32_t);
typedef void *(*pFEu_t)(x86emu_t *, uint32_t);
typedef void *(*pFEp_t)(x86emu_t *, void *);
typedef void *(*pFii_t)(int32_t, int32_t);
typedef void *(*pFiI_t)(int32_t, int64_t);
typedef void *(*pFiu_t)(int32_t, uint32_t);
typedef void *(*pFip_t)(int32_t, void *);
typedef void *(*pFiV_t)(int32_t, void *);
typedef void *(*pFII_t)(int64_t, int64_t);
typedef void *(*pFui_t)(uint32_t, int32_t);
typedef void *(*pFuC_t)(uint32_t, uint8_t);
typedef void *(*pFuu_t)(uint32_t, uint32_t);
typedef void *(*pFup_t)(uint32_t, void *);
typedef void *(*pFuV_t)(uint32_t, void *);
typedef void *(*pFUi_t)(uint64_t, int32_t);
typedef void *(*pFUU_t)(uint64_t, uint64_t);
typedef void *(*pFdi_t)(double, int32_t);
typedef void *(*pFdd_t)(double, double);
typedef void *(*pFlp_t)(intptr_t, void *);
typedef void *(*pFLL_t)(uintptr_t, uintptr_t);
typedef void *(*pFLp_t)(uintptr_t, void *);
typedef void *(*pFpi_t)(void *, int32_t);
typedef void *(*pFpC_t)(void *, uint8_t);
typedef void *(*pFpu_t)(void *, uint32_t);
typedef void *(*pFpU_t)(void *, uint64_t);
typedef void *(*pFpd_t)(void *, double);
typedef void *(*pFpl_t)(void *, intptr_t);
typedef void *(*pFpL_t)(void *, uintptr_t);
typedef void *(*pFpp_t)(void *, void *);
typedef void *(*pFpV_t)(void *, void *);
typedef void *(*pFpG_t)(void *, void *);
typedef void *(*pFps_t)(void *, void *);
typedef void *(*pFSi_t)(void *, int32_t);
typedef void (*vFEip_t)(x86emu_t *, int32_t, void *);
typedef void (*vFEpi_t)(x86emu_t *, void *, int32_t);
typedef void (*vFEpu_t)(x86emu_t *, void *, uint32_t);
typedef void (*vFEpp_t)(x86emu_t *, void *, void *);
typedef void (*vFEpV_t)(x86emu_t *, void *, void *);
typedef void (*vFccc_t)(int8_t, int8_t, int8_t);
typedef void (*vFwww_t)(int16_t, int16_t, int16_t);
typedef void (*vFiii_t)(int32_t, int32_t, int32_t);
typedef void (*vFiif_t)(int32_t, int32_t, float);
typedef void (*vFiip_t)(int32_t, int32_t, void *);
typedef void (*vFiui_t)(int32_t, uint32_t, int32_t);
typedef void (*vFiuu_t)(int32_t, uint32_t, uint32_t);
typedef void (*vFiuU_t)(int32_t, uint32_t, uint64_t);
typedef void (*vFiup_t)(int32_t, uint32_t, void *);
typedef void (*vFiff_t)(int32_t, float, float);
typedef void (*vFidd_t)(int32_t, double, double);
typedef void (*vFill_t)(int32_t, intptr_t, intptr_t);
typedef void (*vFilp_t)(int32_t, intptr_t, void *);
typedef void (*vFiLL_t)(int32_t, uintptr_t, uintptr_t);
typedef void (*vFipi_t)(int32_t, void *, int32_t);
typedef void (*vFipu_t)(int32_t, void *, uint32_t);
typedef void (*vFipp_t)(int32_t, void *, void *);
typedef void (*vFipV_t)(int32_t, void *, void *);
typedef void (*vFCCC_t)(uint8_t, uint8_t, uint8_t);
typedef void (*vFWWW_t)(uint16_t, uint16_t, uint16_t);
typedef void (*vFucc_t)(uint32_t, int8_t, int8_t);
typedef void (*vFuww_t)(uint32_t, int16_t, int16_t);
typedef void (*vFuii_t)(uint32_t, int32_t, int32_t);
typedef void (*vFuiI_t)(uint32_t, int32_t, int64_t);
typedef void (*vFuiu_t)(uint32_t, int32_t, uint32_t);
typedef void (*vFuiU_t)(uint32_t, int32_t, uint64_t);
typedef void (*vFuif_t)(uint32_t, int32_t, float);
typedef void (*vFuid_t)(uint32_t, int32_t, double);
typedef void (*vFuil_t)(uint32_t, int32_t, intptr_t);
typedef void (*vFuiL_t)(uint32_t, int32_t, uintptr_t);
typedef void (*vFuip_t)(uint32_t, int32_t, void *);
typedef void (*vFuWW_t)(uint32_t, uint16_t, uint16_t);
typedef void (*vFuui_t)(uint32_t, uint32_t, int32_t);
typedef void (*vFuuC_t)(uint32_t, uint32_t, uint8_t);
typedef void (*vFuuu_t)(uint32_t, uint32_t, uint32_t);
typedef void (*vFuuU_t)(uint32_t, uint32_t, uint64_t);
typedef void (*vFuuf_t)(uint32_t, uint32_t, float);
typedef void (*vFuud_t)(uint32_t, uint32_t, double);
typedef void (*vFuuL_t)(uint32_t, uint32_t, uintptr_t);
typedef void (*vFuup_t)(uint32_t, uint32_t, void *);
typedef void (*vFuff_t)(uint32_t, float, float);
typedef void (*vFufp_t)(uint32_t, float, void *);
typedef void (*vFudd_t)(uint32_t, double, double);
typedef void (*vFull_t)(uint32_t, intptr_t, intptr_t);
typedef void (*vFulp_t)(uint32_t, intptr_t, void *);
typedef void (*vFuLL_t)(uint32_t, uintptr_t, uintptr_t);
typedef void (*vFupu_t)(uint32_t, void *, uint32_t);
typedef void (*vFupp_t)(uint32_t, void *, void *);
typedef void (*vFfff_t)(float, float, float);
typedef void (*vFfpp_t)(float, void *, void *);
typedef void (*vFddd_t)(double, double, double);
typedef void (*vFdpp_t)(double, void *, void *);
typedef void (*vFlii_t)(intptr_t, int32_t, int32_t);
typedef void (*vFlip_t)(intptr_t, int32_t, void *);
typedef void (*vFllp_t)(intptr_t, intptr_t, void *);
typedef void (*vFlpp_t)(intptr_t, void *, void *);
typedef void (*vFLpL_t)(uintptr_t, void *, uintptr_t);
typedef void (*vFpii_t)(void *, int32_t, int32_t);
typedef void (*vFpiI_t)(void *, int32_t, int64_t);
typedef void (*vFpiC_t)(void *, int32_t, uint8_t);
typedef void (*vFpiu_t)(void *, int32_t, uint32_t);
typedef void (*vFpif_t)(void *, int32_t, float);
typedef void (*vFpid_t)(void *, int32_t, double);
typedef void (*vFpip_t)(void *, int32_t, void *);
typedef void (*vFpui_t)(void *, uint32_t, int32_t);
typedef void (*vFpuI_t)(void *, uint32_t, int64_t);
typedef void (*vFpuu_t)(void *, uint32_t, uint32_t);
typedef void (*vFpuU_t)(void *, uint32_t, uint64_t);
typedef void (*vFpuL_t)(void *, uint32_t, uintptr_t);
typedef void (*vFpup_t)(void *, uint32_t, void *);
typedef void (*vFpUi_t)(void *, uint64_t, int32_t);
typedef void (*vFpUu_t)(void *, uint64_t, uint32_t);
typedef void (*vFpUU_t)(void *, uint64_t, uint64_t);
typedef void (*vFpUp_t)(void *, uint64_t, void *);
typedef void (*vFpUP_t)(void *, uint64_t, void *);
typedef void (*vFpff_t)(void *, float, float);
typedef void (*vFpdd_t)(void *, double, double);
typedef void (*vFpll_t)(void *, intptr_t, intptr_t);
typedef void (*vFplp_t)(void *, intptr_t, void *);
typedef void (*vFpLi_t)(void *, uintptr_t, int32_t);
typedef void (*vFpLL_t)(void *, uintptr_t, uintptr_t);
typedef void (*vFpLp_t)(void *, uintptr_t, void *);
typedef void (*vFppi_t)(void *, void *, int32_t);
typedef void (*vFppu_t)(void *, void *, uint32_t);
typedef void (*vFppU_t)(void *, void *, uint64_t);
typedef void (*vFppd_t)(void *, void *, double);
typedef void (*vFppL_t)(void *, void *, uintptr_t);
typedef void (*vFppp_t)(void *, void *, void *);
typedef void (*vFppV_t)(void *, void *, void *);
typedef void (*vFppG_t)(void *, void *, void *);
typedef void (*vFpPp_t)(void *, void *, void *);
typedef void (*vFpPP_t)(void *, void *, void *);
typedef int32_t (*iFEiw_t)(x86emu_t *, int32_t, int16_t);
typedef int32_t (*iFEip_t)(x86emu_t *, int32_t, void *);
typedef int32_t (*iFEWW_t)(x86emu_t *, uint16_t, uint16_t);
typedef int32_t (*iFEup_t)(x86emu_t *, uint32_t, void *);
typedef int32_t (*iFELp_t)(x86emu_t *, uintptr_t, void *);
typedef int32_t (*iFEpi_t)(x86emu_t *, void *, int32_t);
typedef int32_t (*iFEpL_t)(x86emu_t *, void *, uintptr_t);
typedef int32_t (*iFEpp_t)(x86emu_t *, void *, void *);
typedef int32_t (*iFEpV_t)(x86emu_t *, void *, void *);
typedef int32_t (*iFESp_t)(x86emu_t *, void *, void *);
typedef int32_t (*iFwww_t)(int16_t, int16_t, int16_t);
typedef int32_t (*iFwpp_t)(int16_t, void *, void *);
typedef int32_t (*iFiwC_t)(int32_t, int16_t, uint8_t);
typedef int32_t (*iFiii_t)(int32_t, int32_t, int32_t);
typedef int32_t (*iFiiI_t)(int32_t, int32_t, int64_t);
typedef int32_t (*iFiiu_t)(int32_t, int32_t, uint32_t);
typedef int32_t (*iFiip_t)(int32_t, int32_t, void *);
typedef int32_t (*iFiiO_t)(int32_t, int32_t, int32_t);
typedef int32_t (*iFiII_t)(int32_t, int64_t, int64_t);
typedef int32_t (*iFiui_t)(int32_t, uint32_t, int32_t);
typedef int32_t (*iFiuu_t)(int32_t, uint32_t, uint32_t);
typedef int32_t (*iFiup_t)(int32_t, uint32_t, void *);
typedef int32_t (*iFiLN_t)(int32_t, uintptr_t, ...);
typedef int32_t (*iFipi_t)(int32_t, void *, int32_t);
typedef int32_t (*iFipu_t)(int32_t, void *, uint32_t);
typedef int32_t (*iFipL_t)(int32_t, void *, uintptr_t);
typedef int32_t (*iFipp_t)(int32_t, void *, void *);
typedef int32_t (*iFCiW_t)(uint8_t, int32_t, uint16_t);
typedef int32_t (*iFuwp_t)(uint32_t, int16_t, void *);
typedef int32_t (*iFuii_t)(uint32_t, int32_t, int32_t);
typedef int32_t (*iFuip_t)(uint32_t, int32_t, void *);
typedef int32_t (*iFuui_t)(uint32_t, uint32_t, int32_t);
typedef int32_t (*iFuuu_t)(uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFuup_t)(uint32_t, uint32_t, void *);
typedef int32_t (*iFuLp_t)(uint32_t, uintptr_t, void *);
typedef int32_t (*iFupi_t)(uint32_t, void *, int32_t);
typedef int32_t (*iFupp_t)(uint32_t, void *, void *);
typedef int32_t (*iFfff_t)(float, float, float);
typedef int32_t (*iFpwp_t)(void *, int16_t, void *);
typedef int32_t (*iFpii_t)(void *, int32_t, int32_t);
typedef int32_t (*iFpiI_t)(void *, int32_t, int64_t);
typedef int32_t (*iFpiu_t)(void *, int32_t, uint32_t);
typedef int32_t (*iFpiU_t)(void *, int32_t, uint64_t);
typedef int32_t (*iFpil_t)(void *, int32_t, intptr_t);
typedef int32_t (*iFpiL_t)(void *, int32_t, uintptr_t);
typedef int32_t (*iFpip_t)(void *, int32_t, void *);
typedef int32_t (*iFpiV_t)(void *, int32_t, void *);
typedef int32_t (*iFpIi_t)(void *, int64_t, int32_t);
typedef int32_t (*iFpII_t)(void *, int64_t, int64_t);
typedef int32_t (*iFpCp_t)(void *, uint8_t, void *);
typedef int32_t (*iFpui_t)(void *, uint32_t, int32_t);
typedef int32_t (*iFpuu_t)(void *, uint32_t, uint32_t);
typedef int32_t (*iFpuU_t)(void *, uint32_t, uint64_t);
typedef int32_t (*iFpuL_t)(void *, uint32_t, uintptr_t);
typedef int32_t (*iFpup_t)(void *, uint32_t, void *);
typedef int32_t (*iFpuV_t)(void *, uint32_t, void *);
typedef int32_t (*iFpu2_t)(void *, uint32_t, _2uint_struct_t);
typedef int32_t (*iFpuP_t)(void *, uint32_t, void *);
typedef int32_t (*iFpUi_t)(void *, uint64_t, int32_t);
typedef int32_t (*iFpUU_t)(void *, uint64_t, uint64_t);
typedef int32_t (*iFpUp_t)(void *, uint64_t, void *);
typedef int32_t (*iFpUP_t)(void *, uint64_t, void *);
typedef int32_t (*iFpfu_t)(void *, float, uint32_t);
typedef int32_t (*iFpff_t)(void *, float, float);
typedef int32_t (*iFpdd_t)(void *, double, double);
typedef int32_t (*iFpli_t)(void *, intptr_t, int32_t);
typedef int32_t (*iFpll_t)(void *, intptr_t, intptr_t);
typedef int32_t (*iFplp_t)(void *, intptr_t, void *);
typedef int32_t (*iFpLi_t)(void *, uintptr_t, int32_t);
typedef int32_t (*iFpLL_t)(void *, uintptr_t, uintptr_t);
typedef int32_t (*iFpLp_t)(void *, uintptr_t, void *);
typedef int32_t (*iFppi_t)(void *, void *, int32_t);
typedef int32_t (*iFppI_t)(void *, void *, int64_t);
typedef int32_t (*iFppC_t)(void *, void *, uint8_t);
typedef int32_t (*iFppW_t)(void *, void *, uint16_t);
typedef int32_t (*iFppu_t)(void *, void *, uint32_t);
typedef int32_t (*iFppU_t)(void *, void *, uint64_t);
typedef int32_t (*iFppd_t)(void *, void *, double);
typedef int32_t (*iFppl_t)(void *, void *, intptr_t);
typedef int32_t (*iFppL_t)(void *, void *, uintptr_t);
typedef int32_t (*iFppp_t)(void *, void *, void *);
typedef int32_t (*iFppV_t)(void *, void *, void *);
typedef int32_t (*iFppP_t)(void *, void *, void *);
typedef int32_t (*iFppG_t)(void *, void *, void *);
typedef int32_t (*iFpOu_t)(void *, int32_t, uint32_t);
typedef int32_t (*iFpPU_t)(void *, void *, uint64_t);
typedef int32_t (*iFpPp_t)(void *, void *, void *);
typedef int32_t (*iFpPP_t)(void *, void *, void *);
typedef int32_t (*iFpGG_t)(void *, void *, void *);
typedef int32_t (*iFSpi_t)(void *, void *, int32_t);
typedef int32_t (*iFSpL_t)(void *, void *, uintptr_t);
typedef int64_t (*IFiIi_t)(int32_t, int64_t, int32_t);
typedef int64_t (*IFpIi_t)(void *, int64_t, int32_t);
typedef int64_t (*IFppi_t)(void *, void *, int32_t);
typedef int64_t (*IFppI_t)(void *, void *, int64_t);
typedef int64_t (*IFppu_t)(void *, void *, uint32_t);
typedef int64_t (*IFSIi_t)(void *, int64_t, int32_t);
typedef uint8_t (*CFipp_t)(int32_t, void *, void *);
typedef uint8_t (*CFuff_t)(uint32_t, float, float);
typedef uint8_t (*CFuLu_t)(uint32_t, uintptr_t, uint32_t);
typedef uint32_t (*uFEpW_t)(x86emu_t *, void *, uint16_t);
typedef uint32_t (*uFEpu_t)(x86emu_t *, void *, uint32_t);
typedef uint32_t (*uFEpU_t)(x86emu_t *, void *, uint64_t);
typedef uint32_t (*uFEpp_t)(x86emu_t *, void *, void *);
typedef uint32_t (*uFipu_t)(int32_t, void *, uint32_t);
typedef uint32_t (*uFuip_t)(uint32_t, int32_t, void *);
typedef uint32_t (*uFuuu_t)(uint32_t, uint32_t, uint32_t);
typedef uint32_t (*uFuup_t)(uint32_t, uint32_t, void *);
typedef uint32_t (*uFufp_t)(uint32_t, float, void *);
typedef uint32_t (*uFupi_t)(uint32_t, void *, int32_t);
typedef uint32_t (*uFupu_t)(uint32_t, void *, uint32_t);
typedef uint32_t (*uFupp_t)(uint32_t, void *, void *);
typedef uint32_t (*uFpii_t)(void *, int32_t, int32_t);
typedef uint32_t (*uFpip_t)(void *, int32_t, void *);
typedef uint32_t (*uFpCi_t)(void *, uint8_t, int32_t);
typedef uint32_t (*uFpWi_t)(void *, uint16_t, int32_t);
typedef uint32_t (*uFpWu_t)(void *, uint16_t, uint32_t);
typedef uint32_t (*uFpWf_t)(void *, uint16_t, float);
typedef uint32_t (*uFpWp_t)(void *, uint16_t, void *);
typedef uint32_t (*uFpui_t)(void *, uint32_t, int32_t);
typedef uint32_t (*uFpuC_t)(void *, uint32_t, uint8_t);
typedef uint32_t (*uFpuu_t)(void *, uint32_t, uint32_t);
typedef uint32_t (*uFpuL_t)(void *, uint32_t, uintptr_t);
typedef uint32_t (*uFpup_t)(void *, uint32_t, void *);
typedef uint32_t (*uFpfu_t)(void *, float, uint32_t);
typedef uint32_t (*uFpLp_t)(void *, uintptr_t, void *);
typedef uint32_t (*uFppi_t)(void *, void *, int32_t);
typedef uint32_t (*uFppu_t)(void *, void *, uint32_t);
typedef uint32_t (*uFppp_t)(void *, void *, void *);
typedef uint64_t (*UFUUU_t)(uint64_t, uint64_t, uint64_t);
typedef uint64_t (*UFpiU_t)(void *, int32_t, uint64_t);
typedef uint64_t (*UFppi_t)(void *, void *, int32_t);
typedef uint64_t (*UFppu_t)(void *, void *, uint32_t);
typedef float (*fFuii_t)(uint32_t, int32_t, int32_t);
typedef float (*fFfff_t)(float, float, float);
typedef float (*fFffp_t)(float, float, void *);
typedef float (*fFppu_t)(void *, void *, uint32_t);
typedef float (*fFppp_t)(void *, void *, void *);
typedef double (*dFddd_t)(double, double, double);
typedef double (*dFddp_t)(double, double, void *);
typedef double (*dFpdd_t)(void *, double, double);
typedef double (*dFppi_t)(void *, void *, int32_t);
typedef double (*dFppu_t)(void *, void *, uint32_t);
typedef double (*dFppp_t)(void *, void *, void *);
typedef intptr_t (*lFipi_t)(int32_t, void *, int32_t);
typedef intptr_t (*lFipL_t)(int32_t, void *, uintptr_t);
typedef intptr_t (*lFlll_t)(intptr_t, intptr_t, intptr_t);
typedef intptr_t (*lFlpi_t)(intptr_t, void *, int32_t);
typedef intptr_t (*lFpli_t)(void *, intptr_t, int32_t);
typedef intptr_t (*lFpLp_t)(void *, uintptr_t, void *);
typedef intptr_t (*lFppi_t)(void *, void *, int32_t);
typedef intptr_t (*lFppL_t)(void *, void *, uintptr_t);
typedef intptr_t (*lFSpl_t)(void *, void *, intptr_t);
typedef uintptr_t (*LFiii_t)(int32_t, int32_t, int32_t);
typedef uintptr_t (*LFLLl_t)(uintptr_t, uintptr_t, intptr_t);
typedef uintptr_t (*LFLpu_t)(uintptr_t, void *, uint32_t);
typedef uintptr_t (*LFLpL_t)(uintptr_t, void *, uintptr_t);
typedef uintptr_t (*LFpii_t)(void *, int32_t, int32_t);
typedef uintptr_t (*LFpip_t)(void *, int32_t, void *);
typedef uintptr_t (*LFpLi_t)(void *, uintptr_t, int32_t);
typedef uintptr_t (*LFpLp_t)(void *, uintptr_t, void *);
typedef uintptr_t (*LFppi_t)(void *, void *, int32_t);
typedef uintptr_t (*LFppL_t)(void *, void *, uintptr_t);
typedef uintptr_t (*LFppp_t)(void *, void *, void *);
typedef uintptr_t (*LFSpL_t)(void *, void *, uintptr_t);
typedef void *(*pFEip_t)(x86emu_t *, int32_t, void *);
typedef void *(*pFEiV_t)(x86emu_t *, int32_t, void *);
typedef void *(*pFEup_t)(x86emu_t *, uint32_t, void *);
typedef void *(*pFEpi_t)(x86emu_t *, void *, int32_t);
typedef void *(*pFEpu_t)(x86emu_t *, void *, uint32_t);
typedef void *(*pFEpp_t)(x86emu_t *, void *, void *);
typedef void *(*pFEpV_t)(x86emu_t *, void *, void *);
typedef void *(*pFiii_t)(int32_t, int32_t, int32_t);
typedef void *(*pFiiu_t)(int32_t, int32_t, uint32_t);
typedef void *(*pFiip_t)(int32_t, int32_t, void *);
typedef void *(*pFiIi_t)(int32_t, int64_t, int32_t);
typedef void *(*pFiIp_t)(int32_t, int64_t, void *);
typedef void *(*pFiup_t)(int32_t, uint32_t, void *);
typedef void *(*pFipi_t)(int32_t, void *, int32_t);
typedef void *(*pFipu_t)(int32_t, void *, uint32_t);
typedef void *(*pFipp_t)(int32_t, void *, void *);
typedef void *(*pFIpi_t)(int64_t, void *, int32_t);
typedef void *(*pFCiW_t)(uint8_t, int32_t, uint16_t);
typedef void *(*pFWWW_t)(uint16_t, uint16_t, uint16_t);
typedef void *(*pFuui_t)(uint32_t, uint32_t, int32_t);
typedef void *(*pFuuu_t)(uint32_t, uint32_t, uint32_t);
typedef void *(*pFulu_t)(uint32_t, intptr_t, uint32_t);
typedef void *(*pFupi_t)(uint32_t, void *, int32_t);
typedef void *(*pFupL_t)(uint32_t, void *, uintptr_t);
typedef void *(*pFUpi_t)(uint64_t, void *, int32_t);
typedef void *(*pFdUU_t)(double, uint64_t, uint64_t);
typedef void *(*pFddd_t)(double, double, double);
typedef void *(*pFLLp_t)(uintptr_t, uintptr_t, void *);
typedef void *(*pFLpp_t)(uintptr_t, void *, void *);
typedef void *(*pFpii_t)(void *, int32_t, int32_t);
typedef void *(*pFpiu_t)(void *, int32_t, uint32_t);
typedef void *(*pFpiU_t)(void *, int32_t, uint64_t);
typedef void *(*pFpid_t)(void *, int32_t, double);
typedef void *(*pFpil_t)(void *, int32_t, intptr_t);
typedef void *(*pFpiL_t)(void *, int32_t, uintptr_t);
typedef void *(*pFpip_t)(void *, int32_t, void *);
typedef void *(*pFpIi_t)(void *, int64_t, int32_t);
typedef void *(*pFpCu_t)(void *, uint8_t, uint32_t);
typedef void *(*pFpWW_t)(void *, uint16_t, uint16_t);
typedef void *(*pFpui_t)(void *, uint32_t, int32_t);
typedef void *(*pFpuu_t)(void *, uint32_t, uint32_t);
typedef void *(*pFpuL_t)(void *, uint32_t, uintptr_t);
typedef void *(*pFpup_t)(void *, uint32_t, void *);
typedef void *(*pFpuG_t)(void *, uint32_t, void *);
typedef void *(*pFpUi_t)(void *, uint64_t, int32_t);
typedef void *(*pFpUp_t)(void *, uint64_t, void *);
typedef void *(*pFpdu_t)(void *, double, uint32_t);
typedef void *(*pFpdd_t)(void *, double, double);
typedef void *(*pFplC_t)(void *, intptr_t, uint8_t);
typedef void *(*pFplu_t)(void *, intptr_t, uint32_t);
typedef void *(*pFpll_t)(void *, intptr_t, intptr_t);
typedef void *(*pFplp_t)(void *, intptr_t, void *);
typedef void *(*pFpLu_t)(void *, uintptr_t, uint32_t);
typedef void *(*pFpLL_t)(void *, uintptr_t, uintptr_t);
typedef void *(*pFpLp_t)(void *, uintptr_t, void *);
typedef void *(*pFppi_t)(void *, void *, int32_t);
typedef void *(*pFppI_t)(void *, void *, int64_t);
typedef void *(*pFppC_t)(void *, void *, uint8_t);
typedef void *(*pFppu_t)(void *, void *, uint32_t);
typedef void *(*pFppU_t)(void *, void *, uint64_t);
typedef void *(*pFppf_t)(void *, void *, float);
typedef void *(*pFppl_t)(void *, void *, intptr_t);
typedef void *(*pFppL_t)(void *, void *, uintptr_t);
typedef void *(*pFppp_t)(void *, void *, void *);
typedef void *(*pFppV_t)(void *, void *, void *);
typedef void *(*pFpOM_t)(void *, int32_t, ...);
typedef void *(*pFpss_t)(void *, void *, void *);
typedef void *(*pFSpl_t)(void *, void *, intptr_t);
typedef void *(*pFSpp_t)(void *, void *, void *);
typedef void (*vFEiip_t)(x86emu_t *, int32_t, int32_t, void *);
typedef void (*vFEipp_t)(x86emu_t *, int32_t, void *, void *);
typedef void (*vFEipV_t)(x86emu_t *, int32_t, void *, void *);
typedef void (*vFEpii_t)(x86emu_t *, void *, int32_t, int32_t);
typedef void (*vFEpiL_t)(x86emu_t *, void *, int32_t, uintptr_t);
typedef void (*vFEpip_t)(x86emu_t *, void *, int32_t, void *);
typedef void (*vFEpuu_t)(x86emu_t *, void *, uint32_t, uint32_t);
typedef void (*vFEpup_t)(x86emu_t *, void *, uint32_t, void *);
typedef void (*vFEpUp_t)(x86emu_t *, void *, uint64_t, void *);
typedef void (*vFEppp_t)(x86emu_t *, void *, void *, void *);
typedef void (*vFEppV_t)(x86emu_t *, void *, void *, void *);
typedef void (*vFEpPp_t)(x86emu_t *, void *, void *, void *);
typedef void (*vFcccc_t)(int8_t, int8_t, int8_t, int8_t);
typedef void (*vFwwww_t)(int16_t, int16_t, int16_t, int16_t);
typedef void (*vFiiii_t)(int32_t, int32_t, int32_t, int32_t);
typedef void (*vFiiip_t)(int32_t, int32_t, int32_t, void *);
typedef void (*vFiiCp_t)(int32_t, int32_t, uint8_t, void *);
typedef void (*vFiill_t)(int32_t, int32_t, intptr_t, intptr_t);
typedef void (*vFiipp_t)(int32_t, int32_t, void *, void *);
typedef void (*vFiipV_t)(int32_t, int32_t, void *, void *);
typedef void (*vFiuip_t)(int32_t, uint32_t, int32_t, void *);
typedef void (*vFiuuu_t)(int32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFiulp_t)(int32_t, uint32_t, intptr_t, void *);
typedef void (*vFiupV_t)(int32_t, uint32_t, void *, void *);
typedef void (*vFifff_t)(int32_t, float, float, float);
typedef void (*vFiddd_t)(int32_t, double, double, double);
typedef void (*vFilip_t)(int32_t, intptr_t, int32_t, void *);
typedef void (*vFilll_t)(int32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFilpu_t)(int32_t, intptr_t, void *, uint32_t);
typedef void (*vFilpp_t)(int32_t, intptr_t, void *, void *);
typedef void (*vFiLLL_t)(int32_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFipii_t)(int32_t, void *, int32_t, int32_t);
typedef void (*vFipup_t)(int32_t, void *, uint32_t, void *);
typedef void (*vFipll_t)(int32_t, void *, intptr_t, intptr_t);
typedef void (*vFippp_t)(int32_t, void *, void *, void *);
typedef void (*vFCCCC_t)(uint8_t, uint8_t, uint8_t, uint8_t);
typedef void (*vFWWWW_t)(uint16_t, uint16_t, uint16_t, uint16_t);
typedef void (*vFuccc_t)(uint32_t, int8_t, int8_t, int8_t);
typedef void (*vFuwww_t)(uint32_t, int16_t, int16_t, int16_t);
typedef void (*vFuiii_t)(uint32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiu_t)(uint32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuiip_t)(uint32_t, int32_t, int32_t, void *);
typedef void (*vFuiui_t)(uint32_t, int32_t, uint32_t, int32_t);
typedef void (*vFuiuC_t)(uint32_t, int32_t, uint32_t, uint8_t);
typedef void (*vFuiuu_t)(uint32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuiup_t)(uint32_t, int32_t, uint32_t, void *);
typedef void (*vFuifi_t)(uint32_t, int32_t, float, int32_t);
typedef void (*vFuiff_t)(uint32_t, int32_t, float, float);
typedef void (*vFuidd_t)(uint32_t, int32_t, double, double);
typedef void (*vFuill_t)(uint32_t, int32_t, intptr_t, intptr_t);
typedef void (*vFuilp_t)(uint32_t, int32_t, intptr_t, void *);
typedef void (*vFuiLL_t)(uint32_t, int32_t, uintptr_t, uintptr_t);
typedef void (*vFuipi_t)(uint32_t, int32_t, void *, int32_t);
typedef void (*vFuipu_t)(uint32_t, int32_t, void *, uint32_t);
typedef void (*vFuipp_t)(uint32_t, int32_t, void *, void *);
typedef void (*vFuWWW_t)(uint32_t, uint16_t, uint16_t, uint16_t);
typedef void (*vFuuii_t)(uint32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuuiu_t)(uint32_t, uint32_t, int32_t, uint32_t);
typedef void (*vFuuil_t)(uint32_t, uint32_t, int32_t, intptr_t);
typedef void (*vFuuip_t)(uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuuCu_t)(uint32_t, uint32_t, uint8_t, uint32_t);
typedef void (*vFuuCp_t)(uint32_t, uint32_t, uint8_t, void *);
typedef void (*vFuuui_t)(uint32_t, uint32_t, uint32_t, int32_t);
typedef void (*vFuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuuuf_t)(uint32_t, uint32_t, uint32_t, float);
typedef void (*vFuuud_t)(uint32_t, uint32_t, uint32_t, double);
typedef void (*vFuuul_t)(uint32_t, uint32_t, uint32_t, intptr_t);
typedef void (*vFuuup_t)(uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuff_t)(uint32_t, uint32_t, float, float);
typedef void (*vFuuli_t)(uint32_t, uint32_t, intptr_t, int32_t);
typedef void (*vFuulp_t)(uint32_t, uint32_t, intptr_t, void *);
typedef void (*vFuuLl_t)(uint32_t, uint32_t, uintptr_t, intptr_t);
typedef void (*vFuupi_t)(uint32_t, uint32_t, void *, int32_t);
typedef void (*vFuupp_t)(uint32_t, uint32_t, void *, void *);
typedef void (*vFufff_t)(uint32_t, float, float, float);
typedef void (*vFuddd_t)(uint32_t, double, double, double);
typedef void (*vFuluL_t)(uint32_t, intptr_t, uint32_t, uintptr_t);
typedef void (*vFullC_t)(uint32_t, intptr_t, intptr_t, uint8_t);
typedef void (*vFulll_t)(uint32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFullp_t)(uint32_t, intptr_t, intptr_t, void *);
typedef void (*vFulpi_t)(uint32_t, intptr_t, void *, int32_t);
typedef void (*vFulpu_t)(uint32_t, intptr_t, void *, uint32_t);
typedef void (*vFulpp_t)(uint32_t, intptr_t, void *, void *);
typedef void (*vFuLui_t)(uint32_t, uintptr_t, uint32_t, int32_t);
typedef void (*vFuLup_t)(uint32_t, uintptr_t, uint32_t, void *);
typedef void (*vFuLLL_t)(uint32_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFupii_t)(uint32_t, void *, int32_t, int32_t);
typedef void (*vFuppi_t)(uint32_t, void *, void *, int32_t);
typedef void (*vFuppu_t)(uint32_t, void *, void *, uint32_t);
typedef void (*vFUUpi_t)(uint64_t, uint64_t, void *, int32_t);
typedef void (*vFffff_t)(float, float, float, float);
typedef void (*vFdddd_t)(double, double, double, double);
typedef void (*vFllii_t)(intptr_t, intptr_t, int32_t, int32_t);
typedef void (*vFLppi_t)(uintptr_t, void *, void *, int32_t);
typedef void (*vFpiii_t)(void *, int32_t, int32_t, int32_t);
typedef void (*vFpiiu_t)(void *, int32_t, int32_t, uint32_t);
typedef void (*vFpiip_t)(void *, int32_t, int32_t, void *);
typedef void (*vFpiuu_t)(void *, int32_t, uint32_t, uint32_t);
typedef void (*vFpiuL_t)(void *, int32_t, uint32_t, uintptr_t);
typedef void (*vFpiup_t)(void *, int32_t, uint32_t, void *);
typedef void (*vFpiUu_t)(void *, int32_t, uint64_t, uint32_t);
typedef void (*vFpiUU_t)(void *, int32_t, uint64_t, uint64_t);
typedef void (*vFpifi_t)(void *, int32_t, float, int32_t);
typedef void (*vFpipi_t)(void *, int32_t, void *, int32_t);
typedef void (*vFpipu_t)(void *, int32_t, void *, uint32_t);
typedef void (*vFpipp_t)(void *, int32_t, void *, void *);
typedef void (*vFpipG_t)(void *, int32_t, void *, void *);
typedef void (*vFpIdi_t)(void *, int64_t, double, int32_t);
typedef void (*vFpCiW_t)(void *, uint8_t, int32_t, uint16_t);
typedef void (*vFpuip_t)(void *, uint32_t, int32_t, void *);
typedef void (*vFpuui_t)(void *, uint32_t, uint32_t, int32_t);
typedef void (*vFpuuu_t)(void *, uint32_t, uint32_t, uint32_t);
typedef void (*vFpuup_t)(void *, uint32_t, uint32_t, void *);
typedef void (*vFpuuV_t)(void *, uint32_t, uint32_t, void *);
typedef void (*vFpudd_t)(void *, uint32_t, double, double);
typedef void (*vFpupp_t)(void *, uint32_t, void *, void *);
typedef void (*vFpupP_t)(void *, uint32_t, void *, void *);
typedef void (*vFpUui_t)(void *, uint64_t, uint32_t, int32_t);
typedef void (*vFpUuu_t)(void *, uint64_t, uint32_t, uint32_t);
typedef void (*vFpUup_t)(void *, uint64_t, uint32_t, void *);
typedef void (*vFpUUi_t)(void *, uint64_t, uint64_t, int32_t);
typedef void (*vFpUUu_t)(void *, uint64_t, uint64_t, uint32_t);
typedef void (*vFpUUp_t)(void *, uint64_t, uint64_t, void *);
typedef void (*vFpUpp_t)(void *, uint64_t, void *, void *);
typedef void (*vFpUPP_t)(void *, uint64_t, void *, void *);
typedef void (*vFpfff_t)(void *, float, float, float);
typedef void (*vFpdii_t)(void *, double, int32_t, int32_t);
typedef void (*vFpddi_t)(void *, double, double, int32_t);
typedef void (*vFpddd_t)(void *, double, double, double);
typedef void (*vFplpp_t)(void *, intptr_t, void *, void *);
typedef void (*vFpLLL_t)(void *, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFppii_t)(void *, void *, int32_t, int32_t);
typedef void (*vFppiu_t)(void *, void *, int32_t, uint32_t);
typedef void (*vFppid_t)(void *, void *, int32_t, double);
typedef void (*vFppil_t)(void *, void *, int32_t, intptr_t);
typedef void (*vFppiL_t)(void *, void *, int32_t, uintptr_t);
typedef void (*vFppip_t)(void *, void *, int32_t, void *);
typedef void (*vFppiG_t)(void *, void *, int32_t, void *);
typedef void (*vFppui_t)(void *, void *, uint32_t, int32_t);
typedef void (*vFppuu_t)(void *, void *, uint32_t, uint32_t);
typedef void (*vFppup_t)(void *, void *, uint32_t, void *);
typedef void (*vFppfi_t)(void *, void *, float, int32_t);
typedef void (*vFppdu_t)(void *, void *, double, uint32_t);
typedef void (*vFppdd_t)(void *, void *, double, double);
typedef void (*vFppdp_t)(void *, void *, double, void *);
typedef void (*vFpplp_t)(void *, void *, intptr_t, void *);
typedef void (*vFppLp_t)(void *, void *, uintptr_t, void *);
typedef void (*vFpppi_t)(void *, void *, void *, int32_t);
typedef void (*vFpppI_t)(void *, void *, void *, int64_t);
typedef void (*vFpppu_t)(void *, void *, void *, uint32_t);
typedef void (*vFpppU_t)(void *, void *, void *, uint64_t);
typedef void (*vFpppd_t)(void *, void *, void *, double);
typedef void (*vFpppL_t)(void *, void *, void *, uintptr_t);
typedef void (*vFpppp_t)(void *, void *, void *, void *);
typedef void (*vFpppV_t)(void *, void *, void *, void *);
typedef void (*vFpppG_t)(void *, void *, void *, void *);
typedef void (*vFppGu_t)(void *, void *, void *, uint32_t);
typedef void (*vFpPpp_t)(void *, void *, void *, void *);
typedef void (*vFSppi_t)(void *, void *, void *, int32_t);
typedef int8_t (*cFpiii_t)(void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFEiip_t)(x86emu_t *, int32_t, int32_t, void *);
typedef int32_t (*iFEiiN_t)(x86emu_t *, int32_t, int32_t, ...);
typedef int32_t (*iFEipL_t)(x86emu_t *, int32_t, void *, uintptr_t);
typedef int32_t (*iFEipp_t)(x86emu_t *, int32_t, void *, void *);
typedef int32_t (*iFEupu_t)(x86emu_t *, uint32_t, void *, uint32_t);
typedef int32_t (*iFEupp_t)(x86emu_t *, uint32_t, void *, void *);
typedef int32_t (*iFELup_t)(x86emu_t *, uintptr_t, uint32_t, void *);
typedef int32_t (*iFEpii_t)(x86emu_t *, void *, int32_t, int32_t);
typedef int32_t (*iFEpip_t)(x86emu_t *, void *, int32_t, void *);
typedef int32_t (*iFEpuu_t)(x86emu_t *, void *, uint32_t, uint32_t);
typedef int32_t (*iFEpup_t)(x86emu_t *, void *, uint32_t, void *);
typedef int32_t (*iFEpUp_t)(x86emu_t *, void *, uint64_t, void *);
typedef int32_t (*iFEpLi_t)(x86emu_t *, void *, uintptr_t, int32_t);
typedef int32_t (*iFEppi_t)(x86emu_t *, void *, void *, int32_t);
typedef int32_t (*iFEppu_t)(x86emu_t *, void *, void *, uint32_t);
typedef int32_t (*iFEppd_t)(x86emu_t *, void *, void *, double);
typedef int32_t (*iFEppL_t)(x86emu_t *, void *, void *, uintptr_t);
typedef int32_t (*iFEppp_t)(x86emu_t *, void *, void *, void *);
typedef int32_t (*iFEppV_t)(x86emu_t *, void *, void *, void *);
typedef int32_t (*iFEpOu_t)(x86emu_t *, void *, int32_t, uint32_t);
typedef int32_t (*iFEpOV_t)(x86emu_t *, void *, int32_t, void *);
typedef int32_t (*iFEpPp_t)(x86emu_t *, void *, void *, void *);
typedef int32_t (*iFEPpp_t)(x86emu_t *, void *, void *, void *);
typedef int32_t (*iFwwww_t)(int16_t, int16_t, int16_t, int16_t);
typedef int32_t (*iFwppp_t)(int16_t, void *, void *, void *);
typedef int32_t (*iFiiii_t)(int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFiiiu_t)(int32_t, int32_t, int32_t, uint32_t);
typedef int32_t (*iFiiip_t)(int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFiiII_t)(int32_t, int32_t, int64_t, int64_t);
typedef int32_t (*iFiiui_t)(int32_t, int32_t, uint32_t, int32_t);
typedef int32_t (*iFiipi_t)(int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFiipp_t)(int32_t, int32_t, void *, void *);
typedef int32_t (*iFiuwp_t)(int32_t, uint32_t, int16_t, void *);
typedef int32_t (*iFiuii_t)(int32_t, uint32_t, int32_t, int32_t);
typedef int32_t (*iFiuui_t)(int32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFiLpL_t)(int32_t, uintptr_t, void *, uintptr_t);
typedef int32_t (*iFipii_t)(int32_t, void *, int32_t, int32_t);
typedef int32_t (*iFipip_t)(int32_t, void *, int32_t, void *);
typedef int32_t (*iFipui_t)(int32_t, void *, uint32_t, int32_t);
typedef int32_t (*iFipup_t)(int32_t, void *, uint32_t, void *);
typedef int32_t (*iFipLi_t)(int32_t, void *, uintptr_t, int32_t);
typedef int32_t (*iFipLp_t)(int32_t, void *, uintptr_t, void *);
typedef int32_t (*iFippi_t)(int32_t, void *, void *, int32_t);
typedef int32_t (*iFippu_t)(int32_t, void *, void *, uint32_t);
typedef int32_t (*iFippL_t)(int32_t, void *, void *, uintptr_t);
typedef int32_t (*iFippp_t)(int32_t, void *, void *, void *);
typedef int32_t (*iFipON_t)(int32_t, void *, int32_t, ...);
typedef int32_t (*iFuiup_t)(uint32_t, int32_t, uint32_t, void *);
typedef int32_t (*iFuipu_t)(uint32_t, int32_t, void *, uint32_t);
typedef int32_t (*iFuipp_t)(uint32_t, int32_t, void *, void *);
typedef int32_t (*iFupup_t)(uint32_t, void *, uint32_t, void *);
typedef int32_t (*iFuppi_t)(uint32_t, void *, void *, int32_t);
typedef int32_t (*iFuppp_t)(uint32_t, void *, void *, void *);
typedef int32_t (*iFLppp_t)(uintptr_t, void *, void *, void *);
typedef int32_t (*iFpwww_t)(void *, int16_t, int16_t, int16_t);
typedef int32_t (*iFpwpp_t)(void *, int16_t, void *, void *);
typedef int32_t (*iFpiii_t)(void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFpiiI_t)(void *, int32_t, int32_t, int64_t);
typedef int32_t (*iFpiiu_t)(void *, int32_t, int32_t, uint32_t);
typedef int32_t (*iFpiid_t)(void *, int32_t, int32_t, double);
typedef int32_t (*iFpiiL_t)(void *, int32_t, int32_t, uintptr_t);
typedef int32_t (*iFpiip_t)(void *, int32_t, int32_t, void *);
typedef int32_t (*iFpiuu_t)(void *, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFpiuL_t)(void *, int32_t, uint32_t, uintptr_t);
typedef int32_t (*iFpiup_t)(void *, int32_t, uint32_t, void *);
typedef int32_t (*iFpiUp_t)(void *, int32_t, uint64_t, void *);
typedef int32_t (*iFpild_t)(void *, int32_t, intptr_t, double);
typedef int32_t (*iFpipi_t)(void *, int32_t, void *, int32_t);
typedef int32_t (*iFpipC_t)(void *, int32_t, void *, uint8_t);
typedef int32_t (*iFpipL_t)(void *, int32_t, void *, uintptr_t);
typedef int32_t (*iFpipp_t)(void *, int32_t, void *, void *);
typedef int32_t (*iFpipV_t)(void *, int32_t, void *, void *);
typedef int32_t (*iFpIip_t)(void *, int64_t, int32_t, void *);
typedef int32_t (*iFpCCC_t)(void *, uint8_t, uint8_t, uint8_t);
typedef int32_t (*iFpCpi_t)(void *, uint8_t, void *, int32_t);
typedef int32_t (*iFpWWu_t)(void *, uint16_t, uint16_t, uint32_t);
typedef int32_t (*iFpuwp_t)(void *, uint32_t, int16_t, void *);
typedef int32_t (*iFpuii_t)(void *, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpuiu_t)(void *, uint32_t, int32_t, uint32_t);
typedef int32_t (*iFpuiL_t)(void *, uint32_t, int32_t, uintptr_t);
typedef int32_t (*iFpuip_t)(void *, uint32_t, int32_t, void *);
typedef int32_t (*iFpuui_t)(void *, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpuuu_t)(void *, uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFpuup_t)(void *, uint32_t, uint32_t, void *);
typedef int32_t (*iFpuUp_t)(void *, uint32_t, uint64_t, void *);
typedef int32_t (*iFpuLL_t)(void *, uint32_t, uintptr_t, uintptr_t);
typedef int32_t (*iFpuLp_t)(void *, uint32_t, uintptr_t, void *);
typedef int32_t (*iFpupi_t)(void *, uint32_t, void *, int32_t);
typedef int32_t (*iFpupu_t)(void *, uint32_t, void *, uint32_t);
typedef int32_t (*iFpupp_t)(void *, uint32_t, void *, void *);
typedef int32_t (*iFpupV_t)(void *, uint32_t, void *, void *);
typedef int32_t (*iFpuPU_t)(void *, uint32_t, void *, uint64_t);
typedef int32_t (*iFpUup_t)(void *, uint64_t, uint32_t, void *);
typedef int32_t (*iFpUUU_t)(void *, uint64_t, uint64_t, uint64_t);
typedef int32_t (*iFpUpp_t)(void *, uint64_t, void *, void *);
typedef int32_t (*iFplii_t)(void *, intptr_t, int32_t, int32_t);
typedef int32_t (*iFplip_t)(void *, intptr_t, int32_t, void *);
typedef int32_t (*iFpLpi_t)(void *, uintptr_t, void *, int32_t);
typedef int32_t (*iFpLpL_t)(void *, uintptr_t, void *, uintptr_t);
typedef int32_t (*iFppii_t)(void *, void *, int32_t, int32_t);
typedef int32_t (*iFppiu_t)(void *, void *, int32_t, uint32_t);
typedef int32_t (*iFppiU_t)(void *, void *, int32_t, uint64_t);
typedef int32_t (*iFppiL_t)(void *, void *, int32_t, uintptr_t);
typedef int32_t (*iFppip_t)(void *, void *, int32_t, void *);
typedef int32_t (*iFppIL_t)(void *, void *, int64_t, uintptr_t);
typedef int32_t (*iFppCC_t)(void *, void *, uint8_t, uint8_t);
typedef int32_t (*iFppuw_t)(void *, void *, uint32_t, int16_t);
typedef int32_t (*iFppui_t)(void *, void *, uint32_t, int32_t);
typedef int32_t (*iFppuW_t)(void *, void *, uint32_t, uint16_t);
typedef int32_t (*iFppuu_t)(void *, void *, uint32_t, uint32_t);
typedef int32_t (*iFppup_t)(void *, void *, uint32_t, void *);
typedef int32_t (*iFppdp_t)(void *, void *, double, void *);
typedef int32_t (*iFppll_t)(void *, void *, intptr_t, intptr_t);
typedef int32_t (*iFpplp_t)(void *, void *, intptr_t, void *);
typedef int32_t (*iFppLi_t)(void *, void *, uintptr_t, int32_t);
typedef int32_t (*iFppLL_t)(void *, void *, uintptr_t, uintptr_t);
typedef int32_t (*iFppLp_t)(void *, void *, uintptr_t, void *);
typedef int32_t (*iFpppi_t)(void *, void *, void *, int32_t);
typedef int32_t (*iFpppC_t)(void *, void *, void *, uint8_t);
typedef int32_t (*iFpppu_t)(void *, void *, void *, uint32_t);
typedef int32_t (*iFpppU_t)(void *, void *, void *, uint64_t);
typedef int32_t (*iFpppL_t)(void *, void *, void *, uintptr_t);
typedef int32_t (*iFpppp_t)(void *, void *, void *, void *);
typedef int32_t (*iFpPpp_t)(void *, void *, void *, void *);
typedef int32_t (*iFpGGi_t)(void *, void *, void *, int32_t);
typedef int64_t (*IFEpIi_t)(x86emu_t *, void *, int64_t, int32_t);
typedef int64_t (*IFpIip_t)(void *, int64_t, int32_t, void *);
typedef int64_t (*IFppii_t)(void *, void *, int32_t, int32_t);
typedef int64_t (*IFppip_t)(void *, void *, int32_t, void *);
typedef int64_t (*IFpppp_t)(void *, void *, void *, void *);
typedef int64_t (*IFSIii_t)(void *, int64_t, int32_t, int32_t);
typedef uint8_t (*CFuuff_t)(uint32_t, uint32_t, float, float);
typedef uint32_t (*uFEipp_t)(x86emu_t *, int32_t, void *, void *);
typedef uint32_t (*uFEupp_t)(x86emu_t *, uint32_t, void *, void *);
typedef uint32_t (*uFEpup_t)(x86emu_t *, void *, uint32_t, void *);
typedef uint32_t (*uFEppu_t)(x86emu_t *, void *, void *, uint32_t);
typedef uint32_t (*uFEppp_t)(x86emu_t *, void *, void *, void *);
typedef uint32_t (*uFifff_t)(int32_t, float, float, float);
typedef uint32_t (*uFippu_t)(int32_t, void *, void *, uint32_t);
typedef uint32_t (*uFuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t);
typedef uint32_t (*uFpipu_t)(void *, int32_t, void *, uint32_t);
typedef uint32_t (*uFpipp_t)(void *, int32_t, void *, void *);
typedef uint32_t (*uFpCCC_t)(void *, uint8_t, uint8_t, uint8_t);
typedef uint32_t (*uFpuip_t)(void *, uint32_t, int32_t, void *);
typedef uint32_t (*uFpuuu_t)(void *, uint32_t, uint32_t, uint32_t);
typedef uint32_t (*uFpuup_t)(void *, uint32_t, uint32_t, void *);
typedef uint32_t (*uFpupu_t)(void *, uint32_t, void *, uint32_t);
typedef uint32_t (*uFppiu_t)(void *, void *, int32_t, uint32_t);
typedef uint32_t (*uFppip_t)(void *, void *, int32_t, void *);
typedef uint32_t (*uFppuu_t)(void *, void *, uint32_t, uint32_t);
typedef uint32_t (*uFppup_t)(void *, void *, uint32_t, void *);
typedef uint32_t (*uFppLp_t)(void *, void *, uintptr_t, void *);
typedef uint32_t (*uFpppi_t)(void *, void *, void *, int32_t);
typedef uint32_t (*uFpppu_t)(void *, void *, void *, uint32_t);
typedef uint32_t (*uFpppp_t)(void *, void *, void *, void *);
typedef uint32_t (*uFpppV_t)(void *, void *, void *, void *);
typedef uint64_t (*UFpipp_t)(void *, int32_t, void *, void *);
typedef uint64_t (*UFppii_t)(void *, void *, int32_t, int32_t);
typedef uint64_t (*UFppip_t)(void *, void *, int32_t, void *);
typedef uint64_t (*UFpppp_t)(void *, void *, void *, void *);
typedef uint64_t (*UFSUii_t)(void *, uint64_t, int32_t, int32_t);
typedef double (*dFpppp_t)(void *, void *, void *, void *);
typedef intptr_t (*lFEpip_t)(x86emu_t *, void *, int32_t, void *);
typedef intptr_t (*lFiipL_t)(int32_t, int32_t, void *, uintptr_t);
typedef intptr_t (*lFipLi_t)(int32_t, void *, uintptr_t, int32_t);
typedef intptr_t (*lFipLI_t)(int32_t, void *, uintptr_t, int64_t);
typedef intptr_t (*lFipLl_t)(int32_t, void *, uintptr_t, intptr_t);
typedef intptr_t (*lFipLL_t)(int32_t, void *, uintptr_t, uintptr_t);
typedef intptr_t (*lFippL_t)(int32_t, void *, void *, uintptr_t);
typedef intptr_t (*lFpili_t)(void *, int32_t, intptr_t, int32_t);
typedef intptr_t (*lFpilp_t)(void *, int32_t, intptr_t, void *);
typedef intptr_t (*lFpuip_t)(void *, uint32_t, int32_t, void *);
typedef intptr_t (*lFpupp_t)(void *, uint32_t, void *, void *);
typedef intptr_t (*lFpppL_t)(void *, void *, void *, uintptr_t);
typedef uintptr_t (*LFippp_t)(int32_t, void *, void *, void *);
typedef uintptr_t (*LFpLCL_t)(void *, uintptr_t, uint8_t, uintptr_t);
typedef uintptr_t (*LFpLLp_t)(void *, uintptr_t, uintptr_t, void *);
typedef uintptr_t (*LFpLpL_t)(void *, uintptr_t, void *, uintptr_t);
typedef uintptr_t (*LFpLpp_t)(void *, uintptr_t, void *, void *);
typedef uintptr_t (*LFppii_t)(void *, void *, int32_t, int32_t);
typedef uintptr_t (*LFppip_t)(void *, void *, int32_t, void *);
typedef uintptr_t (*LFppLu_t)(void *, void *, uintptr_t, uint32_t);
typedef uintptr_t (*LFppLL_t)(void *, void *, uintptr_t, uintptr_t);
typedef uintptr_t (*LFppLp_t)(void *, void *, uintptr_t, void *);
typedef uintptr_t (*LFpppi_t)(void *, void *, void *, int32_t);
typedef uintptr_t (*LFpppL_t)(void *, void *, void *, uintptr_t);
typedef uintptr_t (*LFpppp_t)(void *, void *, void *, void *);
typedef void *(*pFEipi_t)(x86emu_t *, int32_t, void *, int32_t);
typedef void *(*pFEipp_t)(x86emu_t *, int32_t, void *, void *);
typedef void *(*pFEipV_t)(x86emu_t *, int32_t, void *, void *);
typedef void *(*pFEupp_t)(x86emu_t *, uint32_t, void *, void *);
typedef void *(*pFEpii_t)(x86emu_t *, void *, int32_t, int32_t);
typedef void *(*pFEpip_t)(x86emu_t *, void *, int32_t, void *);
typedef void *(*pFEplp_t)(x86emu_t *, void *, intptr_t, void *);
typedef void *(*pFEppi_t)(x86emu_t *, void *, void *, int32_t);
typedef void *(*pFEppC_t)(x86emu_t *, void *, void *, uint8_t);
typedef void *(*pFEppu_t)(x86emu_t *, void *, void *, uint32_t);
typedef void *(*pFEppp_t)(x86emu_t *, void *, void *, void *);
typedef void *(*pFEppV_t)(x86emu_t *, void *, void *, void *);
typedef void *(*pFiiii_t)(int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFiiiu_t)(int32_t, int32_t, int32_t, uint32_t);
typedef void *(*pFiiuu_t)(int32_t, int32_t, uint32_t, uint32_t);
typedef void *(*pFiiup_t)(int32_t, int32_t, uint32_t, void *);
typedef void *(*pFiipi_t)(int32_t, int32_t, void *, int32_t);
typedef void *(*pFiipp_t)(int32_t, int32_t, void *, void *);
typedef void *(*pFiIIi_t)(int32_t, int64_t, int64_t, int32_t);
typedef void *(*pFillu_t)(int32_t, intptr_t, intptr_t, uint32_t);
typedef void *(*pFipii_t)(int32_t, void *, int32_t, int32_t);
typedef void *(*pFipip_t)(int32_t, void *, int32_t, void *);
typedef void *(*pFipup_t)(int32_t, void *, uint32_t, void *);
typedef void *(*pFippi_t)(int32_t, void *, void *, int32_t);
typedef void *(*pFippu_t)(int32_t, void *, void *, uint32_t);
typedef void *(*pFuuii_t)(uint32_t, uint32_t, int32_t, int32_t);
typedef void *(*pFuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFullu_t)(uint32_t, intptr_t, intptr_t, uint32_t);
typedef void *(*pFffff_t)(float, float, float, float);
typedef void *(*pFdipp_t)(double, int32_t, void *, void *);
typedef void *(*pFdddd_t)(double, double, double, double);
typedef void *(*pFlfff_t)(intptr_t, float, float, float);
typedef void *(*pFLiip_t)(uintptr_t, int32_t, int32_t, void *);
typedef void *(*pFLppp_t)(uintptr_t, void *, void *, void *);
typedef void *(*pFpiii_t)(void *, int32_t, int32_t, int32_t);
typedef void *(*pFpiiu_t)(void *, int32_t, int32_t, uint32_t);
typedef void *(*pFpiip_t)(void *, int32_t, int32_t, void *);
typedef void *(*pFpiuu_t)(void *, int32_t, uint32_t, uint32_t);
typedef void *(*pFpiLL_t)(void *, int32_t, uintptr_t, uintptr_t);
typedef void *(*pFpipd_t)(void *, int32_t, void *, double);
typedef void *(*pFpipp_t)(void *, int32_t, void *, void *);
typedef void *(*pFpipV_t)(void *, int32_t, void *, void *);
typedef void *(*pFpuii_t)(void *, uint32_t, int32_t, int32_t);
typedef void *(*pFpuil_t)(void *, uint32_t, int32_t, intptr_t);
typedef void *(*pFpuip_t)(void *, uint32_t, int32_t, void *);
typedef void *(*pFpuuu_t)(void *, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpupi_t)(void *, uint32_t, void *, int32_t);
typedef void *(*pFpupu_t)(void *, uint32_t, void *, uint32_t);
typedef void *(*pFpdIU_t)(void *, double, int64_t, uint64_t);
typedef void *(*pFplpl_t)(void *, intptr_t, void *, intptr_t);
typedef void *(*pFpLip_t)(void *, uintptr_t, int32_t, void *);
typedef void *(*pFpLLp_t)(void *, uintptr_t, uintptr_t, void *);
typedef void *(*pFppii_t)(void *, void *, int32_t, int32_t);
typedef void *(*pFppiu_t)(void *, void *, int32_t, uint32_t);
typedef void *(*pFppiL_t)(void *, void *, int32_t, uintptr_t);
typedef void *(*pFppip_t)(void *, void *, int32_t, void *);
typedef void *(*pFppuu_t)(void *, void *, uint32_t, uint32_t);
typedef void *(*pFppuL_t)(void *, void *, uint32_t, uintptr_t);
typedef void *(*pFppup_t)(void *, void *, uint32_t, void *);
typedef void *(*pFppUU_t)(void *, void *, uint64_t, uint64_t);
typedef void *(*pFppdd_t)(void *, void *, double, double);
typedef void *(*pFppll_t)(void *, void *, intptr_t, intptr_t);
typedef void *(*pFppLL_t)(void *, void *, uintptr_t, uintptr_t);
typedef void *(*pFppLp_t)(void *, void *, uintptr_t, void *);
typedef void *(*pFpppi_t)(void *, void *, void *, int32_t);
typedef void *(*pFpppu_t)(void *, void *, void *, uint32_t);
typedef void *(*pFpppL_t)(void *, void *, void *, uintptr_t);
typedef void *(*pFpppp_t)(void *, void *, void *, void *);
typedef void *(*pFpppV_t)(void *, void *, void *, void *);
typedef void *(*pFSppi_t)(void *, void *, void *, int32_t);
typedef void (*vFEippp_t)(x86emu_t *, int32_t, void *, void *, void *);
typedef void (*vFEpipu_t)(x86emu_t *, void *, int32_t, void *, uint32_t);
typedef void (*vFEpuup_t)(x86emu_t *, void *, uint32_t, uint32_t, void *);
typedef void (*vFEpupp_t)(x86emu_t *, void *, uint32_t, void *, void *);
typedef void (*vFEpLLp_t)(x86emu_t *, void *, uintptr_t, uintptr_t, void *);
typedef void (*vFEppip_t)(x86emu_t *, void *, void *, int32_t, void *);
typedef void (*vFEppiV_t)(x86emu_t *, void *, void *, int32_t, void *);
typedef void (*vFEppup_t)(x86emu_t *, void *, void *, uint32_t, void *);
typedef void (*vFEpppi_t)(x86emu_t *, void *, void *, void *, int32_t);
typedef void (*vFEpppp_t)(x86emu_t *, void *, void *, void *, void *);
typedef void (*vFEpPpp_t)(x86emu_t *, void *, void *, void *, void *);
typedef void (*vFiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFiiiiu_t)(int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFiiuii_t)(int32_t, int32_t, uint32_t, int32_t, int32_t);
typedef void (*vFiiuup_t)(int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFiillu_t)(int32_t, int32_t, intptr_t, intptr_t, uint32_t);
typedef void (*vFiilll_t)(int32_t, int32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFiipii_t)(int32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFiipll_t)(int32_t, int32_t, void *, intptr_t, intptr_t);
typedef void (*vFiuiip_t)(int32_t, uint32_t, int32_t, int32_t, void *);
typedef void (*vFiuipi_t)(int32_t, uint32_t, int32_t, void *, int32_t);
typedef void (*vFiuuuu_t)(int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFiulpp_t)(int32_t, uint32_t, intptr_t, void *, void *);
typedef void (*vFiffff_t)(int32_t, float, float, float, float);
typedef void (*vFidddd_t)(int32_t, double, double, double, double);
typedef void (*vFilill_t)(int32_t, intptr_t, int32_t, intptr_t, intptr_t);
typedef void (*vFilipi_t)(int32_t, intptr_t, int32_t, void *, int32_t);
typedef void (*vFilipl_t)(int32_t, intptr_t, int32_t, void *, intptr_t);
typedef void (*vFillll_t)(int32_t, intptr_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFiLLLL_t)(int32_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFipipu_t)(int32_t, void *, int32_t, void *, uint32_t);
typedef void (*vFipipp_t)(int32_t, void *, int32_t, void *, void *);
typedef void (*vFipupi_t)(int32_t, void *, uint32_t, void *, int32_t);
typedef void (*vFucccc_t)(uint32_t, int8_t, int8_t, int8_t, int8_t);
typedef void (*vFuwwww_t)(uint32_t, int16_t, int16_t, int16_t, int16_t);
typedef void (*vFuiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiu_t)(uint32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuiiip_t)(uint32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiiCp_t)(uint32_t, int32_t, int32_t, uint8_t, void *);
typedef void (*vFuiiup_t)(uint32_t, int32_t, int32_t, uint32_t, void *);
typedef void (*vFuiill_t)(uint32_t, int32_t, int32_t, intptr_t, intptr_t);
typedef void (*vFuiIII_t)(uint32_t, int32_t, int64_t, int64_t, int64_t);
typedef void (*vFuiuii_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuiuip_t)(uint32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuiuCi_t)(uint32_t, int32_t, uint32_t, uint8_t, int32_t);
typedef void (*vFuiuCu_t)(uint32_t, int32_t, uint32_t, uint8_t, uint32_t);
typedef void (*vFuiuuu_t)(uint32_t, int32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuiuup_t)(uint32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiupi_t)(uint32_t, int32_t, uint32_t, void *, int32_t);
typedef void (*vFuifff_t)(uint32_t, int32_t, float, float, float);
typedef void (*vFuiddd_t)(uint32_t, int32_t, double, double, double);
typedef void (*vFuilll_t)(uint32_t, int32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuiLLL_t)(uint32_t, int32_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFuipii_t)(uint32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFuipip_t)(uint32_t, int32_t, void *, int32_t, void *);
typedef void (*vFuipup_t)(uint32_t, int32_t, void *, uint32_t, void *);
typedef void (*vFuippp_t)(uint32_t, int32_t, void *, void *, void *);
typedef void (*vFuCCCC_t)(uint32_t, uint8_t, uint8_t, uint8_t, uint8_t);
typedef void (*vFuCuip_t)(uint32_t, uint8_t, uint32_t, int32_t, void *);
typedef void (*vFuCuup_t)(uint32_t, uint8_t, uint32_t, uint32_t, void *);
typedef void (*vFuWWWW_t)(uint32_t, uint16_t, uint16_t, uint16_t, uint16_t);
typedef void (*vFuuiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiiu_t)(uint32_t, uint32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuuiip_t)(uint32_t, uint32_t, int32_t, int32_t, void *);
typedef void (*vFuuiui_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t);
typedef void (*vFuuiuu_t)(uint32_t, uint32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuuiup_t)(uint32_t, uint32_t, int32_t, uint32_t, void *);
typedef void (*vFuuifi_t)(uint32_t, uint32_t, int32_t, float, int32_t);
typedef void (*vFuuipC_t)(uint32_t, uint32_t, int32_t, void *, uint8_t);
typedef void (*vFuuipu_t)(uint32_t, uint32_t, int32_t, void *, uint32_t);
typedef void (*vFuuipp_t)(uint32_t, uint32_t, int32_t, void *, void *);
typedef void (*vFuuuii_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuuuiu_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t);
typedef void (*vFuuuil_t)(uint32_t, uint32_t, uint32_t, int32_t, intptr_t);
typedef void (*vFuuuip_t)(uint32_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuuuui_t)(uint32_t, uint32_t, uint32_t, uint32_t, int32_t);
typedef void (*vFuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuuuup_t)(uint32_t, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuuli_t)(uint32_t, uint32_t, uint32_t, intptr_t, int32_t);
typedef void (*vFuuull_t)(uint32_t, uint32_t, uint32_t, intptr_t, intptr_t);
typedef void (*vFuulll_t)(uint32_t, uint32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuullp_t)(uint32_t, uint32_t, intptr_t, intptr_t, void *);
typedef void (*vFuupii_t)(uint32_t, uint32_t, void *, int32_t, int32_t);
typedef void (*vFuuppu_t)(uint32_t, uint32_t, void *, void *, uint32_t);
typedef void (*vFuffff_t)(uint32_t, float, float, float, float);
typedef void (*vFudddd_t)(uint32_t, double, double, double, double);
typedef void (*vFulill_t)(uint32_t, intptr_t, int32_t, intptr_t, intptr_t);
typedef void (*vFullll_t)(uint32_t, intptr_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFullpu_t)(uint32_t, intptr_t, intptr_t, void *, uint32_t);
typedef void (*vFuLLLL_t)(uint32_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFupiii_t)(uint32_t, void *, int32_t, int32_t, int32_t);
typedef void (*vFupupi_t)(uint32_t, void *, uint32_t, void *, int32_t);
typedef void (*vFupupp_t)(uint32_t, void *, uint32_t, void *, void *);
typedef void (*vFuplii_t)(uint32_t, void *, intptr_t, int32_t, int32_t);
typedef void (*vFuppip_t)(uint32_t, void *, void *, int32_t, void *);
typedef void (*vFupppp_t)(uint32_t, void *, void *, void *, void *);
typedef void (*vFfffff_t)(float, float, float, float, float);
typedef void (*vFddddp_t)(double, double, double, double, void *);
typedef void (*vFluipp_t)(intptr_t, uint32_t, int32_t, void *, void *);
typedef void (*vFLpppi_t)(uintptr_t, void *, void *, void *, int32_t);
typedef void (*vFpiiii_t)(void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpiiiI_t)(void *, int32_t, int32_t, int32_t, int64_t);
typedef void (*vFpiiiu_t)(void *, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFpiiip_t)(void *, int32_t, int32_t, int32_t, void *);
typedef void (*vFpiiII_t)(void *, int32_t, int32_t, int64_t, int64_t);
typedef void (*vFpiiff_t)(void *, int32_t, int32_t, float, float);
typedef void (*vFpiipp_t)(void *, int32_t, int32_t, void *, void *);
typedef void (*vFpiIiI_t)(void *, int32_t, int64_t, int32_t, int64_t);
typedef void (*vFpiIII_t)(void *, int32_t, int64_t, int64_t, int64_t);
typedef void (*vFpiUUp_t)(void *, int32_t, uint64_t, uint64_t, void *);
typedef void (*vFpilpp_t)(void *, int32_t, intptr_t, void *, void *);
typedef void (*vFpipii_t)(void *, int32_t, void *, int32_t, int32_t);
typedef void (*vFpipiu_t)(void *, int32_t, void *, int32_t, uint32_t);
typedef void (*vFpuiip_t)(void *, uint32_t, int32_t, int32_t, void *);
typedef void (*vFpuipp_t)(void *, uint32_t, int32_t, void *, void *);
typedef void (*vFpuipV_t)(void *, uint32_t, int32_t, void *, void *);
typedef void (*vFpuuuu_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFpuuup_t)(void *, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFpuupp_t)(void *, uint32_t, uint32_t, void *, void *);
typedef void (*vFpuUUu_t)(void *, uint32_t, uint64_t, uint64_t, uint32_t);
typedef void (*vFpuddd_t)(void *, uint32_t, double, double, double);
typedef void (*vFpupup_t)(void *, uint32_t, void *, uint32_t, void *);
typedef void (*vFpUuiu_t)(void *, uint64_t, uint32_t, int32_t, uint32_t);
typedef void (*vFpUUuu_t)(void *, uint64_t, uint64_t, uint32_t, uint32_t);
typedef void (*vFpUUup_t)(void *, uint64_t, uint64_t, uint32_t, void *);
typedef void (*vFpUUUu_t)(void *, uint64_t, uint64_t, uint64_t, uint32_t);
typedef void (*vFpUUUp_t)(void *, uint64_t, uint64_t, uint64_t, void *);
typedef void (*vFpffff_t)(void *, float, float, float, float);
typedef void (*vFpdiII_t)(void *, double, int32_t, int64_t, int64_t);
typedef void (*vFpddii_t)(void *, double, double, int32_t, int32_t);
typedef void (*vFpdddd_t)(void *, double, double, double, double);
typedef void (*vFpddpp_t)(void *, double, double, void *, void *);
typedef void (*vFpliil_t)(void *, intptr_t, int32_t, int32_t, intptr_t);
typedef void (*vFplppp_t)(void *, intptr_t, void *, void *, void *);
typedef void (*vFpLLpp_t)(void *, uintptr_t, uintptr_t, void *, void *);
typedef void (*vFppiii_t)(void *, void *, int32_t, int32_t, int32_t);
typedef void (*vFppiiu_t)(void *, void *, int32_t, int32_t, uint32_t);
typedef void (*vFppiip_t)(void *, void *, int32_t, int32_t, void *);
typedef void (*vFppiup_t)(void *, void *, int32_t, uint32_t, void *);
typedef void (*vFppiff_t)(void *, void *, int32_t, float, float);
typedef void (*vFppipi_t)(void *, void *, int32_t, void *, int32_t);
typedef void (*vFppipp_t)(void *, void *, int32_t, void *, void *);
typedef void (*vFppWui_t)(void *, void *, uint16_t, uint32_t, int32_t);
typedef void (*vFppuui_t)(void *, void *, uint32_t, uint32_t, int32_t);
typedef void (*vFppuuu_t)(void *, void *, uint32_t, uint32_t, uint32_t);
typedef void (*vFppuup_t)(void *, void *, uint32_t, uint32_t, void *);
typedef void (*vFppudd_t)(void *, void *, uint32_t, double, double);
typedef void (*vFppupi_t)(void *, void *, uint32_t, void *, int32_t);
typedef void (*vFppupp_t)(void *, void *, uint32_t, void *, void *);
typedef void (*vFppddp_t)(void *, void *, double, double, void *);
typedef void (*vFpppii_t)(void *, void *, void *, int32_t, int32_t);
typedef void (*vFpppip_t)(void *, void *, void *, int32_t, void *);
typedef void (*vFpppuu_t)(void *, void *, void *, uint32_t, uint32_t);
typedef void (*vFpppup_t)(void *, void *, void *, uint32_t, void *);
typedef void (*vFpppdd_t)(void *, void *, void *, double, double);
typedef void (*vFppppi_t)(void *, void *, void *, void *, int32_t);
typedef void (*vFppppu_t)(void *, void *, void *, void *, uint32_t);
typedef void (*vFppppL_t)(void *, void *, void *, void *, uintptr_t);
typedef void (*vFppppp_t)(void *, void *, void *, void *, void *);
typedef int32_t (*iFEiipp_t)(x86emu_t *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEiipV_t)(x86emu_t *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEiupp_t)(x86emu_t *, int32_t, uint32_t, void *, void *);
typedef int32_t (*iFEipip_t)(x86emu_t *, int32_t, void *, int32_t, void *);
typedef int32_t (*iFEipuu_t)(x86emu_t *, int32_t, void *, uint32_t, uint32_t);
typedef int32_t (*iFEippi_t)(x86emu_t *, int32_t, void *, void *, int32_t);
typedef int32_t (*iFEippL_t)(x86emu_t *, int32_t, void *, void *, uintptr_t);
typedef int32_t (*iFEippp_t)(x86emu_t *, int32_t, void *, void *, void *);
typedef int32_t (*iFEuuuu_t)(x86emu_t *, uint32_t, uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFEpiii_t)(x86emu_t *, void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFEpiup_t)(x86emu_t *, void *, int32_t, uint32_t, void *);
typedef int32_t (*iFEpipi_t)(x86emu_t *, void *, int32_t, void *, int32_t);
typedef int32_t (*iFEpipp_t)(x86emu_t *, void *, int32_t, void *, void *);
typedef int32_t (*iFEpipV_t)(x86emu_t *, void *, int32_t, void *, void *);
typedef int32_t (*iFEpupU_t)(x86emu_t *, void *, uint32_t, void *, uint64_t);
typedef int32_t (*iFEpupp_t)(x86emu_t *, void *, uint32_t, void *, void *);
typedef int32_t (*iFEpupV_t)(x86emu_t *, void *, uint32_t, void *, void *);
typedef int32_t (*iFEpUup_t)(x86emu_t *, void *, uint64_t, uint32_t, void *);
typedef int32_t (*iFEpUpP_t)(x86emu_t *, void *, uint64_t, void *, void *);
typedef int32_t (*iFEpLpp_t)(x86emu_t *, void *, uintptr_t, void *, void *);
typedef int32_t (*iFEpLpV_t)(x86emu_t *, void *, uintptr_t, void *, void *);
typedef int32_t (*iFEppii_t)(x86emu_t *, void *, void *, int32_t, int32_t);
typedef int32_t (*iFEppip_t)(x86emu_t *, void *, void *, int32_t, void *);
typedef int32_t (*iFEppiV_t)(x86emu_t *, void *, void *, int32_t, void *);
typedef int32_t (*iFEpplp_t)(x86emu_t *, void *, void *, intptr_t, void *);
typedef int32_t (*iFEpppi_t)(x86emu_t *, void *, void *, void *, int32_t);
typedef int32_t (*iFEpppp_t)(x86emu_t *, void *, void *, void *, void *);
typedef int32_t (*iFEpppV_t)(x86emu_t *, void *, void *, void *, void *);
typedef int32_t (*iFEpPpp_t)(x86emu_t *, void *, void *, void *, void *);
typedef int32_t (*iFiiipu_t)(int32_t, int32_t, int32_t, void *, uint32_t);
typedef int32_t (*iFiiipp_t)(int32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFiiupp_t)(int32_t, int32_t, uint32_t, void *, void *);
typedef int32_t (*iFiipip_t)(int32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFipiii_t)(int32_t, void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFipipi_t)(int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFipipu_t)(int32_t, void *, int32_t, void *, uint32_t);
typedef int32_t (*iFipuii_t)(int32_t, void *, uint32_t, int32_t, int32_t);
typedef int32_t (*iFipuui_t)(int32_t, void *, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFippui_t)(int32_t, void *, void *, uint32_t, int32_t);
typedef int32_t (*iFippuu_t)(int32_t, void *, void *, uint32_t, uint32_t);
typedef int32_t (*iFippup_t)(int32_t, void *, void *, uint32_t, void *);
typedef int32_t (*iFipppi_t)(int32_t, void *, void *, void *, int32_t);
typedef int32_t (*iFipppp_t)(int32_t, void *, void *, void *, void *);
typedef int32_t (*iFuppup_t)(uint32_t, void *, void *, uint32_t, void *);
typedef int32_t (*iFLpppp_t)(uintptr_t, void *, void *, void *, void *);
typedef int32_t (*iFpwwww_t)(void *, int16_t, int16_t, int16_t, int16_t);
typedef int32_t (*iFpwppp_t)(void *, int16_t, void *, void *, void *);
typedef int32_t (*iFpiiii_t)(void *, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpiiiu_t)(void *, int32_t, int32_t, int32_t, uint32_t);
typedef int32_t (*iFpiiiL_t)(void *, int32_t, int32_t, int32_t, uintptr_t);
typedef int32_t (*iFpiiip_t)(void *, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpiiui_t)(void *, int32_t, int32_t, uint32_t, int32_t);
typedef int32_t (*iFpiiuu_t)(void *, int32_t, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFpiipi_t)(void *, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFpiipp_t)(void *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpiIip_t)(void *, int32_t, int64_t, int32_t, void *);
typedef int32_t (*iFpiuwp_t)(void *, int32_t, uint32_t, int16_t, void *);
typedef int32_t (*iFpiupu_t)(void *, int32_t, uint32_t, void *, uint32_t);
typedef int32_t (*iFpiUUU_t)(void *, int32_t, uint64_t, uint64_t, uint64_t);
typedef int32_t (*iFpipii_t)(void *, int32_t, void *, int32_t, int32_t);
typedef int32_t (*iFpipiL_t)(void *, int32_t, void *, int32_t, uintptr_t);
typedef int32_t (*iFpipip_t)(void *, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpippi_t)(void *, int32_t, void *, void *, int32_t);
typedef int32_t (*iFpippp_t)(void *, int32_t, void *, void *, void *);
typedef int32_t (*iFpipGp_t)(void *, int32_t, void *, void *, void *);
typedef int32_t (*iFpIppp_t)(void *, int64_t, void *, void *, void *);
typedef int32_t (*iFpCCCC_t)(void *, uint8_t, uint8_t, uint8_t, uint8_t);
typedef int32_t (*iFpuiii_t)(void *, uint32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpuiup_t)(void *, uint32_t, int32_t, uint32_t, void *);
typedef int32_t (*iFpuill_t)(void *, uint32_t, int32_t, intptr_t, intptr_t);
typedef int32_t (*iFpuipi_t)(void *, uint32_t, int32_t, void *, int32_t);
typedef int32_t (*iFpuuip_t)(void *, uint32_t, uint32_t, int32_t, void *);
typedef int32_t (*iFpuuui_t)(void *, uint32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpuuup_t)(void *, uint32_t, uint32_t, uint32_t, void *);
typedef int32_t (*iFpuuLL_t)(void *, uint32_t, uint32_t, uintptr_t, uintptr_t);
typedef int32_t (*iFpuupu_t)(void *, uint32_t, uint32_t, void *, uint32_t);
typedef int32_t (*iFpuupp_t)(void *, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFpuLpL_t)(void *, uint32_t, uintptr_t, void *, uintptr_t);
typedef int32_t (*iFpuLpp_t)(void *, uint32_t, uintptr_t, void *, void *);
typedef int32_t (*iFpupiU_t)(void *, uint32_t, void *, int32_t, uint64_t);
typedef int32_t (*iFpupuu_t)(void *, uint32_t, void *, uint32_t, uint32_t);
typedef int32_t (*iFpupup_t)(void *, uint32_t, void *, uint32_t, void *);
typedef int32_t (*iFpuppu_t)(void *, uint32_t, void *, void *, uint32_t);
typedef int32_t (*iFpuppp_t)(void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFpuPpp_t)(void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFpUiUi_t)(void *, uint64_t, int32_t, uint64_t, int32_t);
typedef int32_t (*iFplluu_t)(void *, intptr_t, intptr_t, uint32_t, uint32_t);
typedef int32_t (*iFpLlpp_t)(void *, uintptr_t, intptr_t, void *, void *);
typedef int32_t (*iFpLLpp_t)(void *, uintptr_t, uintptr_t, void *, void *);
typedef int32_t (*iFppiiu_t)(void *, void *, int32_t, int32_t, uint32_t);
typedef int32_t (*iFppiip_t)(void *, void *, int32_t, int32_t, void *);
typedef int32_t (*iFppiIp_t)(void *, void *, int32_t, int64_t, void *);
typedef int32_t (*iFppiup_t)(void *, void *, int32_t, uint32_t, void *);
typedef int32_t (*iFppiLL_t)(void *, void *, int32_t, uintptr_t, uintptr_t);
typedef int32_t (*iFppipi_t)(void *, void *, int32_t, void *, int32_t);
typedef int32_t (*iFppipu_t)(void *, void *, int32_t, void *, uint32_t);
typedef int32_t (*iFppipp_t)(void *, void *, int32_t, void *, void *);
typedef int32_t (*iFppuwp_t)(void *, void *, uint32_t, int16_t, void *);
typedef int32_t (*iFppuip_t)(void *, void *, uint32_t, int32_t, void *);
typedef int32_t (*iFppupi_t)(void *, void *, uint32_t, void *, int32_t);
typedef int32_t (*iFppupp_t)(void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppllp_t)(void *, void *, intptr_t, intptr_t, void *);
typedef int32_t (*iFpplpp_t)(void *, void *, intptr_t, void *, void *);
typedef int32_t (*iFppLip_t)(void *, void *, uintptr_t, int32_t, void *);
typedef int32_t (*iFppLpi_t)(void *, void *, uintptr_t, void *, int32_t);
typedef int32_t (*iFppLpL_t)(void *, void *, uintptr_t, void *, uintptr_t);
typedef int32_t (*iFppLpp_t)(void *, void *, uintptr_t, void *, void *);
typedef int32_t (*iFpppii_t)(void *, void *, void *, int32_t, int32_t);
typedef int32_t (*iFpppiu_t)(void *, void *, void *, int32_t, uint32_t);
typedef int32_t (*iFpppip_t)(void *, void *, void *, int32_t, void *);
typedef int32_t (*iFpppui_t)(void *, void *, void *, uint32_t, int32_t);
typedef int32_t (*iFpppuu_t)(void *, void *, void *, uint32_t, uint32_t);
typedef int32_t (*iFpppup_t)(void *, void *, void *, uint32_t, void *);
typedef int32_t (*iFpppUi_t)(void *, void *, void *, uint64_t, int32_t);
typedef int32_t (*iFpppLi_t)(void *, void *, void *, uintptr_t, int32_t);
typedef int32_t (*iFppppi_t)(void *, void *, void *, void *, int32_t);
typedef int32_t (*iFppppu_t)(void *, void *, void *, void *, uint32_t);
typedef int32_t (*iFppppL_t)(void *, void *, void *, void *, uintptr_t);
typedef int32_t (*iFppppp_t)(void *, void *, void *, void *, void *);
typedef int32_t (*iFpppGp_t)(void *, void *, void *, void *, void *);
typedef int32_t (*iFpPPpp_t)(void *, void *, void *, void *, void *);
typedef int64_t (*IFppIII_t)(void *, void *, int64_t, int64_t, int64_t);
typedef uint32_t (*uFEippp_t)(x86emu_t *, int32_t, void *, void *, void *);
typedef uint32_t (*uFEpipp_t)(x86emu_t *, void *, int32_t, void *, void *);
typedef uint32_t (*uFEppuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t);
typedef uint32_t (*uFEpppp_t)(x86emu_t *, void *, void *, void *, void *);
typedef uint32_t (*uFiuuuu_t)(int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef uint32_t (*uFipipp_t)(int32_t, void *, int32_t, void *, void *);
typedef uint32_t (*uFipLpp_t)(int32_t, void *, uintptr_t, void *, void *);
typedef uint32_t (*uFpCCCC_t)(void *, uint8_t, uint8_t, uint8_t, uint8_t);
typedef uint32_t (*uFpWuip_t)(void *, uint16_t, uint32_t, int32_t, void *);
typedef uint32_t (*uFpuuuu_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t);
typedef uint32_t (*uFpuuup_t)(void *, uint32_t, uint32_t, uint32_t, void *);
typedef uint32_t (*uFpupuu_t)(void *, uint32_t, void *, uint32_t, uint32_t);
typedef uint32_t (*uFppiip_t)(void *, void *, int32_t, int32_t, void *);
typedef uint32_t (*uFppipp_t)(void *, void *, int32_t, void *, void *);
typedef uint32_t (*uFppuup_t)(void *, void *, uint32_t, uint32_t, void *);
typedef uint32_t (*uFppupp_t)(void *, void *, uint32_t, void *, void *);
typedef uint32_t (*uFpplip_t)(void *, void *, intptr_t, int32_t, void *);
typedef uint32_t (*uFppLpp_t)(void *, void *, uintptr_t, void *, void *);
typedef uint32_t (*uFppppp_t)(void *, void *, void *, void *, void *);
typedef uint64_t (*UFuiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef intptr_t (*lFEipiI_t)(x86emu_t *, int32_t, void *, int32_t, int64_t);
typedef intptr_t (*lFipLli_t)(int32_t, void *, uintptr_t, intptr_t, int32_t);
typedef intptr_t (*lFipLlL_t)(int32_t, void *, uintptr_t, intptr_t, uintptr_t);
typedef intptr_t (*lFpuipC_t)(void *, uint32_t, int32_t, void *, uint8_t);
typedef intptr_t (*lFppiip_t)(void *, void *, int32_t, int32_t, void *);
typedef uintptr_t (*LFEpppp_t)(x86emu_t *, void *, void *, void *, void *);
typedef uintptr_t (*LFuiCiu_t)(uint32_t, int32_t, uint8_t, int32_t, uint32_t);
typedef uintptr_t (*LFLpppL_t)(uintptr_t, void *, void *, void *, uintptr_t);
typedef uintptr_t (*LFLpppp_t)(uintptr_t, void *, void *, void *, void *);
typedef uintptr_t (*LFpuipp_t)(void *, uint32_t, int32_t, void *, void *);
typedef uintptr_t (*LFpuppi_t)(void *, uint32_t, void *, void *, int32_t);
typedef uintptr_t (*LFpLppL_t)(void *, uintptr_t, void *, void *, uintptr_t);
typedef uintptr_t (*LFpLppp_t)(void *, uintptr_t, void *, void *, void *);
typedef uintptr_t (*LFppLLp_t)(void *, void *, uintptr_t, uintptr_t, void *);
typedef uintptr_t (*LFpppii_t)(void *, void *, void *, int32_t, int32_t);
typedef uintptr_t (*LFppppp_t)(void *, void *, void *, void *, void *);
typedef void *(*pFEpiii_t)(x86emu_t *, void *, int32_t, int32_t, int32_t);
typedef void *(*pFEpipi_t)(x86emu_t *, void *, int32_t, void *, int32_t);
typedef void *(*pFEpipL_t)(x86emu_t *, void *, int32_t, void *, uintptr_t);
typedef void *(*pFEpipp_t)(x86emu_t *, void *, int32_t, void *, void *);
typedef void *(*pFEpupp_t)(x86emu_t *, void *, uint32_t, void *, void *);
typedef void *(*pFEpUpp_t)(x86emu_t *, void *, uint64_t, void *, void *);
typedef void *(*pFEppii_t)(x86emu_t *, void *, void *, int32_t, int32_t);
typedef void *(*pFEppip_t)(x86emu_t *, void *, void *, int32_t, void *);
typedef void *(*pFEppCC_t)(x86emu_t *, void *, void *, uint8_t, uint8_t);
typedef void *(*pFEppuW_t)(x86emu_t *, void *, void *, uint32_t, uint16_t);
typedef void *(*pFEppuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t);
typedef void *(*pFEppup_t)(x86emu_t *, void *, void *, uint32_t, void *);
typedef void *(*pFEppLp_t)(x86emu_t *, void *, void *, uintptr_t, void *);
typedef void *(*pFEpppi_t)(x86emu_t *, void *, void *, void *, int32_t);
typedef void *(*pFEpppu_t)(x86emu_t *, void *, void *, void *, uint32_t);
typedef void *(*pFEpppp_t)(x86emu_t *, void *, void *, void *, void *);
typedef void *(*pFiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFipipL_t)(int32_t, void *, int32_t, void *, uintptr_t);
typedef void *(*pFipppi_t)(int32_t, void *, void *, void *, int32_t);
typedef void *(*pFipppu_t)(int32_t, void *, void *, void *, uint32_t);
typedef void *(*pFipppp_t)(int32_t, void *, void *, void *, void *);
typedef void *(*pFuiiiu_t)(uint32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void *(*pFuiupp_t)(uint32_t, int32_t, uint32_t, void *, void *);
typedef void *(*pFpiiii_t)(void *, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFpiiip_t)(void *, int32_t, int32_t, int32_t, void *);
typedef void *(*pFpiiuu_t)(void *, int32_t, int32_t, uint32_t, uint32_t);
typedef void *(*pFpiipi_t)(void *, int32_t, int32_t, void *, int32_t);
typedef void *(*pFpiipp_t)(void *, int32_t, int32_t, void *, void *);
typedef void *(*pFpiCCC_t)(void *, int32_t, uint8_t, uint8_t, uint8_t);
typedef void *(*pFpiuuu_t)(void *, int32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpiLip_t)(void *, int32_t, uintptr_t, int32_t, void *);
typedef void *(*pFpippi_t)(void *, int32_t, void *, void *, int32_t);
typedef void *(*pFpippp_t)(void *, int32_t, void *, void *, void *);
typedef void *(*pFpIiip_t)(void *, int64_t, int32_t, int32_t, void *);
typedef void *(*pFpuiii_t)(void *, uint32_t, int32_t, int32_t, int32_t);
typedef void *(*pFpuiip_t)(void *, uint32_t, int32_t, int32_t, void *);
typedef void *(*pFpuuip_t)(void *, uint32_t, uint32_t, int32_t, void *);
typedef void *(*pFpuuup_t)(void *, uint32_t, uint32_t, uint32_t, void *);
typedef void *(*pFpuupp_t)(void *, uint32_t, uint32_t, void *, void *);
typedef void *(*pFpuLpp_t)(void *, uint32_t, uintptr_t, void *, void *);
typedef void *(*pFpuppp_t)(void *, uint32_t, void *, void *, void *);
typedef void *(*pFpUdii_t)(void *, uint64_t, double, int32_t, int32_t);
typedef void *(*pFpdddd_t)(void *, double, double, double, double);
typedef void *(*pFplppp_t)(void *, intptr_t, void *, void *, void *);
typedef void *(*pFpLpip_t)(void *, uintptr_t, void *, int32_t, void *);
typedef void *(*pFppiii_t)(void *, void *, int32_t, int32_t, int32_t);
typedef void *(*pFppiip_t)(void *, void *, int32_t, int32_t, void *);
typedef void *(*pFppiup_t)(void *, void *, int32_t, uint32_t, void *);
typedef void *(*pFppipi_t)(void *, void *, int32_t, void *, int32_t);
typedef void *(*pFppipp_t)(void *, void *, int32_t, void *, void *);
typedef void *(*pFppuui_t)(void *, void *, uint32_t, uint32_t, int32_t);
typedef void *(*pFppuuu_t)(void *, void *, uint32_t, uint32_t, uint32_t);
typedef void *(*pFppuup_t)(void *, void *, uint32_t, uint32_t, void *);
typedef void *(*pFppddi_t)(void *, void *, double, double, int32_t);
typedef void *(*pFppLLi_t)(void *, void *, uintptr_t, uintptr_t, int32_t);
typedef void *(*pFppLpp_t)(void *, void *, uintptr_t, void *, void *);
typedef void *(*pFpppii_t)(void *, void *, void *, int32_t, int32_t);
typedef void *(*pFpppip_t)(void *, void *, void *, int32_t, void *);
typedef void *(*pFpppui_t)(void *, void *, void *, uint32_t, int32_t);
typedef void *(*pFpppuu_t)(void *, void *, void *, uint32_t, uint32_t);
typedef void *(*pFpppup_t)(void *, void *, void *, uint32_t, void *);
typedef void *(*pFppppi_t)(void *, void *, void *, void *, int32_t);
typedef void *(*pFppppp_t)(void *, void *, void *, void *, void *);
typedef void (*vFEiiipp_t)(x86emu_t *, int32_t, int32_t, int32_t, void *, void *);
typedef void (*vFEpiLpp_t)(x86emu_t *, void *, int32_t, uintptr_t, void *, void *);
typedef void (*vFEpippp_t)(x86emu_t *, void *, int32_t, void *, void *, void *);
typedef void (*vFEpuipp_t)(x86emu_t *, void *, uint32_t, int32_t, void *, void *);
typedef void (*vFEpupup_t)(x86emu_t *, void *, uint32_t, void *, uint32_t, void *);
typedef void (*vFEpLLpp_t)(x86emu_t *, void *, uintptr_t, uintptr_t, void *, void *);
typedef void (*vFEppipV_t)(x86emu_t *, void *, void *, int32_t, void *, void *);
typedef void (*vFEppupp_t)(x86emu_t *, void *, void *, uint32_t, void *, void *);
typedef void (*vFEpppiu_t)(x86emu_t *, void *, void *, void *, int32_t, uint32_t);
typedef void (*vFEppppp_t)(x86emu_t *, void *, void *, void *, void *, void *);
typedef void (*vFiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFiiiuil_t)(int32_t, int32_t, int32_t, uint32_t, int32_t, intptr_t);
typedef void (*vFiiilpi_t)(int32_t, int32_t, int32_t, intptr_t, void *, int32_t);
typedef void (*vFiiuilp_t)(int32_t, int32_t, uint32_t, int32_t, intptr_t, void *);
typedef void (*vFiffiff_t)(int32_t, float, float, int32_t, float, float);
typedef void (*vFiddidd_t)(int32_t, double, double, int32_t, double, double);
typedef void (*vFilipli_t)(int32_t, intptr_t, int32_t, void *, intptr_t, int32_t);
typedef void (*vFiliplu_t)(int32_t, intptr_t, int32_t, void *, intptr_t, uint32_t);
typedef void (*vFillill_t)(int32_t, intptr_t, intptr_t, int32_t, intptr_t, intptr_t);
typedef void (*vFipiplp_t)(int32_t, void *, int32_t, void *, intptr_t, void *);
typedef void (*vFCCCCff_t)(uint8_t, uint8_t, uint8_t, uint8_t, float, float);
typedef void (*vFuiiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiiuii_t)(uint32_t, int32_t, int32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuiiuup_t)(uint32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiuiii_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiuiiC_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuiuiil_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, intptr_t);
typedef void (*vFuiuiip_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, void *);
typedef void (*vFuiuiuu_t)(uint32_t, int32_t, uint32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuiuiuL_t)(uint32_t, int32_t, uint32_t, int32_t, uint32_t, uintptr_t);
typedef void (*vFuiuCip_t)(uint32_t, int32_t, uint32_t, uint8_t, int32_t, void *);
typedef void (*vFuiuuip_t)(uint32_t, int32_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuiuuuu_t)(uint32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuiupii_t)(uint32_t, int32_t, uint32_t, void *, int32_t, int32_t);
typedef void (*vFuiupiu_t)(uint32_t, int32_t, uint32_t, void *, int32_t, uint32_t);
typedef void (*vFuiffff_t)(uint32_t, int32_t, float, float, float, float);
typedef void (*vFuidddd_t)(uint32_t, int32_t, double, double, double, double);
typedef void (*vFuillll_t)(uint32_t, int32_t, intptr_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuiLLLL_t)(uint32_t, int32_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFuipiup_t)(uint32_t, int32_t, void *, int32_t, uint32_t, void *);
typedef void (*vFuCuuip_t)(uint32_t, uint8_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiiiu_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuuiuii_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuuiuil_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, intptr_t);
typedef void (*vFuuiuip_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiuCu_t)(uint32_t, uint32_t, int32_t, uint32_t, uint8_t, uint32_t);
typedef void (*vFuuiuup_t)(uint32_t, uint32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuippp_t)(uint32_t, uint32_t, int32_t, void *, void *, void *);
typedef void (*vFuuuiii_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuuiup_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t, void *);
typedef void (*vFuuuipi_t)(uint32_t, uint32_t, uint32_t, int32_t, void *, int32_t);
typedef void (*vFuuuipC_t)(uint32_t, uint32_t, uint32_t, int32_t, void *, uint8_t);
typedef void (*vFuuuipp_t)(uint32_t, uint32_t, uint32_t, int32_t, void *, void *);
typedef void (*vFuuuuii_t)(uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuuuuip_t)(uint32_t, uint32_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuuuull_t)(uint32_t, uint32_t, uint32_t, uint32_t, intptr_t, intptr_t);
typedef void (*vFuuuppi_t)(uint32_t, uint32_t, uint32_t, void *, void *, int32_t);
typedef void (*vFuuuppp_t)(uint32_t, uint32_t, uint32_t, void *, void *, void *);
typedef void (*vFuuffff_t)(uint32_t, uint32_t, float, float, float, float);
typedef void (*vFuudddd_t)(uint32_t, uint32_t, double, double, double, double);
typedef void (*vFuupiii_t)(uint32_t, uint32_t, void *, int32_t, int32_t, int32_t);
typedef void (*vFuupupp_t)(uint32_t, uint32_t, void *, uint32_t, void *, void *);
typedef void (*vFuuplii_t)(uint32_t, uint32_t, void *, intptr_t, int32_t, int32_t);
typedef void (*vFuffiip_t)(uint32_t, float, float, int32_t, int32_t, void *);
typedef void (*vFufffff_t)(uint32_t, float, float, float, float, float);
typedef void (*vFuddiip_t)(uint32_t, double, double, int32_t, int32_t, void *);
typedef void (*vFullill_t)(uint32_t, intptr_t, intptr_t, int32_t, intptr_t, intptr_t);
typedef void (*vFulluLC_t)(uint32_t, intptr_t, intptr_t, uint32_t, uintptr_t, uint8_t);
typedef void (*vFupiiii_t)(uint32_t, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFupupip_t)(uint32_t, void *, uint32_t, void *, int32_t, void *);
typedef void (*vFuppppu_t)(uint32_t, void *, void *, void *, void *, uint32_t);
typedef void (*vFuppppp_t)(uint32_t, void *, void *, void *, void *, void *);
typedef void (*vFffffff_t)(float, float, float, float, float, float);
typedef void (*vFdddddd_t)(double, double, double, double, double, double);
typedef void (*vFpiiiii_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpiiipp_t)(void *, int32_t, int32_t, int32_t, void *, void *);
typedef void (*vFpiiuuu_t)(void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFpiippi_t)(void *, int32_t, int32_t, void *, void *, int32_t);
typedef void (*vFpiippp_t)(void *, int32_t, int32_t, void *, void *, void *);
typedef void (*vFpiUuup_t)(void *, int32_t, uint64_t, uint32_t, uint32_t, void *);
typedef void (*vFpipiiu_t)(void *, int32_t, void *, int32_t, int32_t, uint32_t);
typedef void (*vFpipipV_t)(void *, int32_t, void *, int32_t, void *, void *);
typedef void (*vFpipppi_t)(void *, int32_t, void *, void *, void *, int32_t);
typedef void (*vFpipppp_t)(void *, int32_t, void *, void *, void *, void *);
typedef void (*vFpuiiii_t)(void *, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpuiiiu_t)(void *, uint32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFpuiipp_t)(void *, uint32_t, int32_t, int32_t, void *, void *);
typedef void (*vFpuuuiu_t)(void *, uint32_t, uint32_t, uint32_t, int32_t, uint32_t);
typedef void (*vFpuuppp_t)(void *, uint32_t, uint32_t, void *, void *, void *);
typedef void (*vFpudddd_t)(void *, uint32_t, double, double, double, double);
typedef void (*vFpupuuu_t)(void *, uint32_t, void *, uint32_t, uint32_t, uint32_t);
typedef void (*vFpupppp_t)(void *, uint32_t, void *, void *, void *, void *);
typedef void (*vFpUiuup_t)(void *, uint64_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFpUiUup_t)(void *, uint64_t, int32_t, uint64_t, uint32_t, void *);
typedef void (*vFpUipup_t)(void *, uint64_t, int32_t, void *, uint32_t, void *);
typedef void (*vFpUUiup_t)(void *, uint64_t, uint64_t, int32_t, uint32_t, void *);
typedef void (*vFpdddii_t)(void *, double, double, double, int32_t, int32_t);
typedef void (*vFpddddd_t)(void *, double, double, double, double, double);
typedef void (*vFpddddp_t)(void *, double, double, double, double, void *);
typedef void (*vFppiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiip_t)(void *, void *, int32_t, int32_t, int32_t, void *);
typedef void (*vFppiiui_t)(void *, void *, int32_t, int32_t, uint32_t, int32_t);
typedef void (*vFppiiuu_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFppiipi_t)(void *, void *, int32_t, int32_t, void *, int32_t);
typedef void (*vFppiipp_t)(void *, void *, int32_t, int32_t, void *, void *);
typedef void (*vFppilpp_t)(void *, void *, int32_t, intptr_t, void *, void *);
typedef void (*vFppippi_t)(void *, void *, int32_t, void *, void *, int32_t);
typedef void (*vFppippp_t)(void *, void *, int32_t, void *, void *, void *);
typedef void (*vFppuuuu_t)(void *, void *, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFppuUUU_t)(void *, void *, uint32_t, uint64_t, uint64_t, uint64_t);
typedef void (*vFppupii_t)(void *, void *, uint32_t, void *, int32_t, int32_t);
typedef void (*vFppuppp_t)(void *, void *, uint32_t, void *, void *, void *);
typedef void (*vFppdidd_t)(void *, void *, double, int32_t, double, double);
typedef void (*vFppdddd_t)(void *, void *, double, double, double, double);
typedef void (*vFpplppi_t)(void *, void *, intptr_t, void *, void *, int32_t);
typedef void (*vFpplppp_t)(void *, void *, intptr_t, void *, void *, void *);
typedef void (*vFppLppi_t)(void *, void *, uintptr_t, void *, void *, int32_t);
typedef void (*vFppLppp_t)(void *, void *, uintptr_t, void *, void *, void *);
typedef void (*vFpppiii_t)(void *, void *, void *, int32_t, int32_t, int32_t);
typedef void (*vFpppiip_t)(void *, void *, void *, int32_t, int32_t, void *);
typedef void (*vFpppiff_t)(void *, void *, void *, int32_t, float, float);
typedef void (*vFpppipu_t)(void *, void *, void *, int32_t, void *, uint32_t);
typedef void (*vFpppuii_t)(void *, void *, void *, uint32_t, int32_t, int32_t);
typedef void (*vFppppii_t)(void *, void *, void *, void *, int32_t, int32_t);
typedef void (*vFpppppi_t)(void *, void *, void *, void *, void *, int32_t);
typedef void (*vFpppppu_t)(void *, void *, void *, void *, void *, uint32_t);
typedef void (*vFpppppL_t)(void *, void *, void *, void *, void *, uintptr_t);
typedef void (*vFpppppp_t)(void *, void *, void *, void *, void *, void *);
typedef int8_t (*cFppLppi_t)(void *, void *, uintptr_t, void *, void *, int32_t);
typedef int32_t (*iFEiippi_t)(x86emu_t *, int32_t, int32_t, void *, void *, int32_t);
typedef int32_t (*iFEiippp_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFEiLLLL_t)(x86emu_t *, int32_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef int32_t (*iFEipuup_t)(x86emu_t *, int32_t, void *, uint32_t, uint32_t, void *);
typedef int32_t (*iFEippLp_t)(x86emu_t *, int32_t, void *, void *, uintptr_t, void *);
typedef int32_t (*iFEipppi_t)(x86emu_t *, int32_t, void *, void *, void *, int32_t);
typedef int32_t (*iFElpppp_t)(x86emu_t *, intptr_t, void *, void *, void *, void *);
typedef int32_t (*iFEpiipp_t)(x86emu_t *, void *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEpiipV_t)(x86emu_t *, void *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEpiLpp_t)(x86emu_t *, void *, int32_t, uintptr_t, void *, void *);
typedef int32_t (*iFEpippi_t)(x86emu_t *, void *, int32_t, void *, void *, int32_t);
typedef int32_t (*iFEpippp_t)(x86emu_t *, void *, int32_t, void *, void *, void *);
typedef int32_t (*iFEpuuip_t)(x86emu_t *, void *, uint32_t, uint32_t, int32_t, void *);
typedef int32_t (*iFEpuppp_t)(x86emu_t *, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFEpUPpp_t)(x86emu_t *, void *, uint64_t, void *, void *, void *);
typedef int32_t (*iFEpLppp_t)(x86emu_t *, void *, uintptr_t, void *, void *, void *);
typedef int32_t (*iFEpppip_t)(x86emu_t *, void *, void *, void *, int32_t, void *);
typedef int32_t (*iFEppppp_t)(x86emu_t *, void *, void *, void *, void *, void *);
typedef int32_t (*iFiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFiiiuwp_t)(int32_t, int32_t, int32_t, uint32_t, int16_t, void *);
typedef int32_t (*iFiuiipi_t)(int32_t, uint32_t, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFiuUuUu_t)(int32_t, uint32_t, uint64_t, uint32_t, uint64_t, uint32_t);
typedef int32_t (*iFipiipi_t)(int32_t, void *, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFipipuu_t)(int32_t, void *, int32_t, void *, uint32_t, uint32_t);
typedef int32_t (*iFipuIup_t)(int32_t, void *, uint32_t, int64_t, uint32_t, void *);
typedef int32_t (*iFipupup_t)(int32_t, void *, uint32_t, void *, uint32_t, void *);
typedef int32_t (*iFipuppp_t)(int32_t, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFipppup_t)(int32_t, void *, void *, void *, uint32_t, void *);
typedef int32_t (*iFippppp_t)(int32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFuppipp_t)(uint32_t, void *, void *, int32_t, void *, void *);
typedef int32_t (*iFuppppp_t)(uint32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFdipppL_t)(double, int32_t, void *, void *, void *, uintptr_t);
typedef int32_t (*iFLpppii_t)(uintptr_t, void *, void *, void *, int32_t, int32_t);
typedef int32_t (*iFpiiiii_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpiiiip_t)(void *, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpiiipp_t)(void *, int32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpiiuii_t)(void *, int32_t, int32_t, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpiipip_t)(void *, int32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpiippu_t)(void *, int32_t, int32_t, void *, void *, uint32_t);
typedef int32_t (*iFpiippp_t)(void *, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFpiuuup_t)(void *, int32_t, uint32_t, uint32_t, uint32_t, void *);
typedef int32_t (*iFpiuupp_t)(void *, int32_t, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFpiuppu_t)(void *, int32_t, uint32_t, void *, void *, uint32_t);
typedef int32_t (*iFpiUUpp_t)(void *, int32_t, uint64_t, uint64_t, void *, void *);
typedef int32_t (*iFpipipi_t)(void *, int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFpippip_t)(void *, int32_t, void *, void *, int32_t, void *);
typedef int32_t (*iFpipppp_t)(void *, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFpCpipu_t)(void *, uint8_t, void *, int32_t, void *, uint32_t);
typedef int32_t (*iFpuiiii_t)(void *, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpuuupp_t)(void *, uint32_t, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFpuuLpp_t)(void *, uint32_t, uint32_t, uintptr_t, void *, void *);
typedef int32_t (*iFpupipi_t)(void *, uint32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFpupuui_t)(void *, uint32_t, void *, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpUuupp_t)(void *, uint64_t, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFpUUUip_t)(void *, uint64_t, uint64_t, uint64_t, int32_t, void *);
typedef int32_t (*iFpUUUUp_t)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void *);
typedef int32_t (*iFpLLppp_t)(void *, uintptr_t, uintptr_t, void *, void *, void *);
typedef int32_t (*iFppiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFppiiip_t)(void *, void *, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFppiiuu_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFppiipi_t)(void *, void *, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFppiipp_t)(void *, void *, int32_t, int32_t, void *, void *);
typedef int32_t (*iFppipii_t)(void *, void *, int32_t, void *, int32_t, int32_t);
typedef int32_t (*iFppipiL_t)(void *, void *, int32_t, void *, int32_t, uintptr_t);
typedef int32_t (*iFppipip_t)(void *, void *, int32_t, void *, int32_t, void *);
typedef int32_t (*iFppIipp_t)(void *, void *, int64_t, int32_t, void *, void *);
typedef int32_t (*iFppIppp_t)(void *, void *, int64_t, void *, void *, void *);
typedef int32_t (*iFppuiii_t)(void *, void *, uint32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFppuiiu_t)(void *, void *, uint32_t, int32_t, int32_t, uint32_t);
typedef int32_t (*iFppuipp_t)(void *, void *, uint32_t, int32_t, void *, void *);
typedef int32_t (*iFppuIII_t)(void *, void *, uint32_t, int64_t, int64_t, int64_t);
typedef int32_t (*iFppuupp_t)(void *, void *, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFppuLpp_t)(void *, void *, uint32_t, uintptr_t, void *, void *);
typedef int32_t (*iFppupip_t)(void *, void *, uint32_t, void *, int32_t, void *);
typedef int32_t (*iFppuppp_t)(void *, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFppUipp_t)(void *, void *, uint64_t, int32_t, void *, void *);
typedef int32_t (*iFppUupp_t)(void *, void *, uint64_t, uint32_t, void *, void *);
typedef int32_t (*iFppUUup_t)(void *, void *, uint64_t, uint64_t, uint32_t, void *);
typedef int32_t (*iFppdidd_t)(void *, void *, double, int32_t, double, double);
typedef int32_t (*iFppLupp_t)(void *, void *, uintptr_t, uint32_t, void *, void *);
typedef int32_t (*iFppLpLp_t)(void *, void *, uintptr_t, void *, uintptr_t, void *);
typedef int32_t (*iFppLppp_t)(void *, void *, uintptr_t, void *, void *, void *);
typedef int32_t (*iFpppiuu_t)(void *, void *, void *, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFpppipi_t)(void *, void *, void *, int32_t, void *, int32_t);
typedef int32_t (*iFpppipp_t)(void *, void *, void *, int32_t, void *, void *);
typedef int32_t (*iFpppuii_t)(void *, void *, void *, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpppupu_t)(void *, void *, void *, uint32_t, void *, uint32_t);
typedef int32_t (*iFpppupp_t)(void *, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppppii_t)(void *, void *, void *, void *, int32_t, int32_t);
typedef int32_t (*iFppppiu_t)(void *, void *, void *, void *, int32_t, uint32_t);
typedef int32_t (*iFppppip_t)(void *, void *, void *, void *, int32_t, void *);
typedef int32_t (*iFppppup_t)(void *, void *, void *, void *, uint32_t, void *);
typedef int32_t (*iFpppppi_t)(void *, void *, void *, void *, void *, int32_t);
typedef int32_t (*iFpppppu_t)(void *, void *, void *, void *, void *, uint32_t);
typedef int32_t (*iFpppppp_t)(void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFEiippp_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *);
typedef uint32_t (*uFEiuppp_t)(x86emu_t *, int32_t, uint32_t, void *, void *, void *);
typedef uint32_t (*uFEpCppp_t)(x86emu_t *, void *, uint8_t, void *, void *, void *);
typedef uint32_t (*uFEpuppp_t)(x86emu_t *, void *, uint32_t, void *, void *, void *);
typedef uint32_t (*uFupuufp_t)(uint32_t, void *, uint32_t, uint32_t, float, void *);
typedef uint32_t (*uFpippup_t)(void *, int32_t, void *, void *, uint32_t, void *);
typedef uint32_t (*uFpWuwCp_t)(void *, uint16_t, uint32_t, int16_t, uint8_t, void *);
typedef uint32_t (*uFpWuipp_t)(void *, uint16_t, uint32_t, int32_t, void *, void *);
typedef uint32_t (*uFpWuuCp_t)(void *, uint16_t, uint32_t, uint32_t, uint8_t, void *);
typedef uint32_t (*uFpuippp_t)(void *, uint32_t, int32_t, void *, void *, void *);
typedef uint32_t (*uFppippp_t)(void *, void *, int32_t, void *, void *, void *);
typedef uint32_t (*uFppuuup_t)(void *, void *, uint32_t, uint32_t, uint32_t, void *);
typedef uint32_t (*uFppuupu_t)(void *, void *, uint32_t, uint32_t, void *, uint32_t);
typedef uint32_t (*uFpppppi_t)(void *, void *, void *, void *, void *, int32_t);
typedef uint32_t (*uFpppppp_t)(void *, void *, void *, void *, void *, void *);
typedef uint64_t (*UFpippup_t)(void *, int32_t, void *, void *, uint32_t, void *);
typedef intptr_t (*lFipLipu_t)(int32_t, void *, uintptr_t, int32_t, void *, uint32_t);
typedef intptr_t (*lFipLipp_t)(int32_t, void *, uintptr_t, int32_t, void *, void *);
typedef intptr_t (*lFipLpLL_t)(int32_t, void *, uintptr_t, void *, uintptr_t, uintptr_t);
typedef uintptr_t (*LFEupppp_t)(x86emu_t *, uint32_t, void *, void *, void *, void *);
typedef uintptr_t (*LFEppppi_t)(x86emu_t *, void *, void *, void *, void *, int32_t);
typedef uintptr_t (*LFpipipi_t)(void *, int32_t, void *, int32_t, void *, int32_t);
typedef uintptr_t (*LFpLippp_t)(void *, uintptr_t, int32_t, void *, void *, void *);
typedef uintptr_t (*LFSpLiip_t)(void *, void *, uintptr_t, int32_t, int32_t, void *);
typedef void *(*pFEipppV_t)(x86emu_t *, int32_t, void *, void *, void *, void *);
typedef void *(*pFEpiupp_t)(x86emu_t *, void *, int32_t, uint32_t, void *, void *);
typedef void *(*pFEpippp_t)(x86emu_t *, void *, int32_t, void *, void *, void *);
typedef void *(*pFEpuipp_t)(x86emu_t *, void *, uint32_t, int32_t, void *, void *);
typedef void *(*pFEpuupp_t)(x86emu_t *, void *, uint32_t, uint32_t, void *, void *);
typedef void *(*pFEpuppp_t)(x86emu_t *, void *, uint32_t, void *, void *, void *);
typedef void *(*pFEpLLiN_t)(x86emu_t *, void *, uintptr_t, uintptr_t, int32_t, ...);
typedef void *(*pFEppCWp_t)(x86emu_t *, void *, void *, uint8_t, uint16_t, void *);
typedef void *(*pFEppCuW_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint16_t);
typedef void *(*pFEppCuu_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t);
typedef void *(*pFEppuWp_t)(x86emu_t *, void *, void *, uint32_t, uint16_t, void *);
typedef void *(*pFEppuuC_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint8_t);
typedef void *(*pFEppuuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t);
typedef void *(*pFEppuup_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, void *);
typedef void *(*pFEppLLp_t)(x86emu_t *, void *, void *, uintptr_t, uintptr_t, void *);
typedef void *(*pFEpppLp_t)(x86emu_t *, void *, void *, void *, uintptr_t, void *);
typedef void *(*pFEppppi_t)(x86emu_t *, void *, void *, void *, void *, int32_t);
typedef void *(*pFEppppp_t)(x86emu_t *, void *, void *, void *, void *, void *);
typedef void *(*pFiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFiCiiCi_t)(int32_t, uint8_t, int32_t, int32_t, uint8_t, int32_t);
typedef void *(*pFdddddd_t)(double, double, double, double, double, double);
typedef void *(*pFpiiiiu_t)(void *, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void *(*pFpiiCCC_t)(void *, int32_t, int32_t, uint8_t, uint8_t, uint8_t);
typedef void *(*pFpiiuuu_t)(void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpiUUUU_t)(void *, int32_t, uint64_t, uint64_t, uint64_t, uint64_t);
typedef void *(*pFpippip_t)(void *, int32_t, void *, void *, int32_t, void *);
typedef void *(*pFpipppp_t)(void *, int32_t, void *, void *, void *, void *);
typedef void *(*pFpuuuuu_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpupppp_t)(void *, uint32_t, void *, void *, void *, void *);
typedef void *(*pFplpppp_t)(void *, intptr_t, void *, void *, void *, void *);
typedef void *(*pFpLiLpp_t)(void *, uintptr_t, int32_t, uintptr_t, void *, void *);
typedef void *(*pFpLpLLi_t)(void *, uintptr_t, void *, uintptr_t, uintptr_t, int32_t);
typedef void *(*pFppiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFppiipp_t)(void *, void *, int32_t, int32_t, void *, void *);
typedef void *(*pFppiCCC_t)(void *, void *, int32_t, uint8_t, uint8_t, uint8_t);
typedef void *(*pFppippi_t)(void *, void *, int32_t, void *, void *, int32_t);
typedef void *(*pFppippp_t)(void *, void *, int32_t, void *, void *, void *);
typedef void *(*pFpppiii_t)(void *, void *, void *, int32_t, int32_t, int32_t);
typedef void *(*pFpppiui_t)(void *, void *, void *, int32_t, uint32_t, int32_t);
typedef void *(*pFpppupp_t)(void *, void *, void *, uint32_t, void *, void *);
typedef void *(*pFppppii_t)(void *, void *, void *, void *, int32_t, int32_t);
typedef void *(*pFpppppi_t)(void *, void *, void *, void *, void *, int32_t);
typedef void *(*pFpppppu_t)(void *, void *, void *, void *, void *, uint32_t);
typedef void *(*pFpppppp_t)(void *, void *, void *, void *, void *, void *);
typedef void *(*pFSpiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFEpipppp_t)(x86emu_t *, void *, int32_t, void *, void *, void *, void *);
typedef void (*vFEpuipuV_t)(x86emu_t *, void *, uint32_t, int32_t, void *, uint32_t, void *);
typedef void (*vFEppippp_t)(x86emu_t *, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFEpppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *);
typedef void (*vFiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFiiiiuup_t)(int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFiiuilil_t)(int32_t, int32_t, uint32_t, int32_t, intptr_t, int32_t, intptr_t);
typedef void (*vFiiffffp_t)(int32_t, int32_t, float, float, float, float, void *);
typedef void (*vFiuulipi_t)(int32_t, uint32_t, uint32_t, intptr_t, int32_t, void *, int32_t);
typedef void (*vFiupuuup_t)(int32_t, uint32_t, void *, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFilipliu_t)(int32_t, intptr_t, int32_t, void *, intptr_t, int32_t, uint32_t);
typedef void (*vFilulipi_t)(int32_t, intptr_t, uint32_t, intptr_t, int32_t, void *, int32_t);
typedef void (*vFCCCCfff_t)(uint8_t, uint8_t, uint8_t, uint8_t, float, float, float);
typedef void (*vFuiiiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiiiC_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuiiiuip_t)(uint32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiuiiii_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiuiiiC_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuiuiiip_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiuiiuL_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, uint32_t, uintptr_t);
typedef void (*vFuiuCiuu_t)(uint32_t, int32_t, uint32_t, uint8_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuiupiiu_t)(uint32_t, int32_t, uint32_t, void *, int32_t, int32_t, uint32_t);
typedef void (*vFuiupuip_t)(uint32_t, int32_t, uint32_t, void *, uint32_t, int32_t, void *);
typedef void (*vFuipiiii_t)(uint32_t, int32_t, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuipffff_t)(uint32_t, int32_t, void *, float, float, float, float);
typedef void (*vFuipdddd_t)(uint32_t, int32_t, void *, double, double, double, double);
typedef void (*vFuuiiiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiiiiC_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuuiiiiu_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuuiiiip_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuuiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiCiui_t)(uint32_t, uint32_t, int32_t, uint8_t, int32_t, uint32_t, int32_t);
typedef void (*vFuuiCiuu_t)(uint32_t, uint32_t, int32_t, uint8_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuuiuiii_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiuiiC_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuuipppp_t)(uint32_t, uint32_t, int32_t, void *, void *, void *, void *);
typedef void (*vFuuuiiii_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuuiiCp_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, uint8_t, void *);
typedef void (*vFuuuiuii_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t);
typedef void (*vFuuuiuil_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t, int32_t, intptr_t);
typedef void (*vFuuuiupi_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t, void *, int32_t);
typedef void (*vFuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuuuulll_t)(uint32_t, uint32_t, uint32_t, uint32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuuuffff_t)(uint32_t, uint32_t, uint32_t, float, float, float, float);
typedef void (*vFuuudddd_t)(uint32_t, uint32_t, uint32_t, double, double, double, double);
typedef void (*vFuuffiip_t)(uint32_t, uint32_t, float, float, int32_t, int32_t, void *);
typedef void (*vFuuddiip_t)(uint32_t, uint32_t, double, double, int32_t, int32_t, void *);
typedef void (*vFuulluup_t)(uint32_t, uint32_t, intptr_t, intptr_t, uint32_t, uint32_t, void *);
typedef void (*vFuupiiii_t)(uint32_t, uint32_t, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuppppu_t)(uint32_t, uint32_t, void *, void *, void *, void *, uint32_t);
typedef void (*vFuuppppp_t)(uint32_t, uint32_t, void *, void *, void *, void *, void *);
typedef void (*vFuffffff_t)(uint32_t, float, float, float, float, float, float);
typedef void (*vFudddddd_t)(uint32_t, double, double, double, double, double, double);
typedef void (*vFlipuiip_t)(intptr_t, int32_t, void *, uint32_t, int32_t, int32_t, void *);
typedef void (*vFlliiiip_t)(intptr_t, intptr_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFpiiiipp_t)(void *, int32_t, int32_t, int32_t, int32_t, void *, void *);
typedef void (*vFpiiliip_t)(void *, int32_t, int32_t, intptr_t, int32_t, int32_t, void *);
typedef void (*vFpiipCpp_t)(void *, int32_t, int32_t, void *, uint8_t, void *, void *);
typedef void (*vFpipipii_t)(void *, int32_t, void *, int32_t, void *, int32_t, int32_t);
typedef void (*vFpipppii_t)(void *, int32_t, void *, void *, void *, int32_t, int32_t);
typedef void (*vFpuuuuuu_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFpuuUUuu_t)(void *, uint32_t, uint32_t, uint64_t, uint64_t, uint32_t, uint32_t);
typedef void (*vFpuupppp_t)(void *, uint32_t, uint32_t, void *, void *, void *, void *);
typedef void (*vFpUiUiup_t)(void *, uint64_t, int32_t, uint64_t, int32_t, uint32_t, void *);
typedef void (*vFpUUUUuu_t)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint32_t, uint32_t);
typedef void (*vFpddiidd_t)(void *, double, double, int32_t, int32_t, double, double);
typedef void (*vFpdddddd_t)(void *, double, double, double, double, double, double);
typedef void (*vFpLiLiLp_t)(void *, uintptr_t, int32_t, uintptr_t, int32_t, uintptr_t, void *);
typedef void (*vFppiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiiip_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFppiiipi_t)(void *, void *, int32_t, int32_t, int32_t, void *, int32_t);
typedef void (*vFppiipii_t)(void *, void *, int32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFppiipuu_t)(void *, void *, int32_t, int32_t, void *, uint32_t, uint32_t);
typedef void (*vFppiippp_t)(void *, void *, int32_t, int32_t, void *, void *, void *);
typedef void (*vFppilppi_t)(void *, void *, int32_t, intptr_t, void *, void *, int32_t);
typedef void (*vFppiLiLp_t)(void *, void *, int32_t, uintptr_t, int32_t, uintptr_t, void *);
typedef void (*vFppipiip_t)(void *, void *, int32_t, void *, int32_t, int32_t, void *);
typedef void (*vFppipipp_t)(void *, void *, int32_t, void *, int32_t, void *, void *);
typedef void (*vFppipppp_t)(void *, void *, int32_t, void *, void *, void *, void *);
typedef void (*vFppddddi_t)(void *, void *, double, double, double, double, int32_t);
typedef void (*vFppddpii_t)(void *, void *, double, double, void *, int32_t, int32_t);
typedef void (*vFppLpppi_t)(void *, void *, uintptr_t, void *, void *, void *, int32_t);
typedef void (*vFppLpppp_t)(void *, void *, uintptr_t, void *, void *, void *, void *);
typedef void (*vFpppiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpppiipi_t)(void *, void *, void *, int32_t, int32_t, void *, int32_t);
typedef void (*vFpppiipp_t)(void *, void *, void *, int32_t, int32_t, void *, void *);
typedef void (*vFpppippi_t)(void *, void *, void *, int32_t, void *, void *, int32_t);
typedef void (*vFpppuuuu_t)(void *, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFppppiii_t)(void *, void *, void *, void *, int32_t, int32_t, int32_t);
typedef void (*vFppppiip_t)(void *, void *, void *, void *, int32_t, int32_t, void *);
typedef void (*vFppppipi_t)(void *, void *, void *, void *, int32_t, void *, int32_t);
typedef void (*vFpppppip_t)(void *, void *, void *, void *, void *, int32_t, void *);
typedef void (*vFppppppi_t)(void *, void *, void *, void *, void *, void *, int32_t);
typedef void (*vFppppppp_t)(void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpuiupV_t)(x86emu_t *, void *, uint32_t, int32_t, uint32_t, void *, void *);
typedef int32_t (*iFEpupppp_t)(x86emu_t *, void *, uint32_t, void *, void *, void *, void *);
typedef int32_t (*iFEpUuppp_t)(x86emu_t *, void *, uint64_t, uint32_t, void *, void *, void *);
typedef int32_t (*iFEpLiipV_t)(x86emu_t *, void *, uintptr_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEppiuui_t)(x86emu_t *, void *, void *, int32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFEppuppp_t)(x86emu_t *, void *, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFEpplppi_t)(x86emu_t *, void *, void *, intptr_t, void *, void *, int32_t);
typedef int32_t (*iFEppLpIi_t)(x86emu_t *, void *, void *, uintptr_t, void *, int64_t, int32_t);
typedef int32_t (*iFEpppiiu_t)(x86emu_t *, void *, void *, void *, int32_t, int32_t, uint32_t);
typedef int32_t (*iFEpppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFiiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFippuIup_t)(int32_t, void *, void *, uint32_t, int64_t, uint32_t, void *);
typedef int32_t (*iFpiiiiii_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpiiiiip_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpiiiuwp_t)(void *, int32_t, int32_t, int32_t, uint32_t, int16_t, void *);
typedef int32_t (*iFpiiuuiu_t)(void *, int32_t, int32_t, uint32_t, uint32_t, int32_t, uint32_t);
typedef int32_t (*iFpiiuuuu_t)(void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFpiipppp_t)(void *, int32_t, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFpiuiipp_t)(void *, int32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpiupiii_t)(void *, int32_t, uint32_t, void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFpiupppp_t)(void *, int32_t, uint32_t, void *, void *, void *, void *);
typedef int32_t (*iFpipipip_t)(void *, int32_t, void *, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpippupp_t)(void *, int32_t, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFpippppp_t)(void *, int32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFpIIpppp_t)(void *, int64_t, int64_t, void *, void *, void *, void *);
typedef int32_t (*iFpuiiiip_t)(void *, uint32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpuiiuii_t)(void *, uint32_t, int32_t, int32_t, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpuipupp_t)(void *, uint32_t, int32_t, void *, uint32_t, void *, void *);
typedef int32_t (*iFpuuiuui_t)(void *, uint32_t, uint32_t, int32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpuuuppu_t)(void *, uint32_t, uint32_t, uint32_t, void *, void *, uint32_t);
typedef int32_t (*iFpuupppp_t)(void *, uint32_t, uint32_t, void *, void *, void *, void *);
typedef int32_t (*iFpupuuui_t)(void *, uint32_t, void *, uint32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpupuufu_t)(void *, uint32_t, void *, uint32_t, uint32_t, float, uint32_t);
typedef int32_t (*iFpupuupp_t)(void *, uint32_t, void *, uint32_t, uint32_t, void *, void *);
typedef int32_t (*iFpupupui_t)(void *, uint32_t, void *, uint32_t, void *, uint32_t, int32_t);
typedef int32_t (*iFpuppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFpLipipi_t)(void *, uintptr_t, int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFppiiuui_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFppiipii_t)(void *, void *, int32_t, int32_t, void *, int32_t, int32_t);
typedef int32_t (*iFppiipiL_t)(void *, void *, int32_t, int32_t, void *, int32_t, uintptr_t);
typedef int32_t (*iFppiippp_t)(void *, void *, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFppipiip_t)(void *, void *, int32_t, void *, int32_t, int32_t, void *);
typedef int32_t (*iFppipipi_t)(void *, void *, int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFppipipp_t)(void *, void *, int32_t, void *, int32_t, void *, void *);
typedef int32_t (*iFppippip_t)(void *, void *, int32_t, void *, void *, int32_t, void *);
typedef int32_t (*iFppipppi_t)(void *, void *, int32_t, void *, void *, void *, int32_t);
typedef int32_t (*iFppipppp_t)(void *, void *, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFppuipiL_t)(void *, void *, uint32_t, int32_t, void *, int32_t, uintptr_t);
typedef int32_t (*iFppLiipp_t)(void *, void *, uintptr_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpppiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpppiiuu_t)(void *, void *, void *, int32_t, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFpppiiup_t)(void *, void *, void *, int32_t, int32_t, uint32_t, void *);
typedef int32_t (*iFpppiipi_t)(void *, void *, void *, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFpppiuwu_t)(void *, void *, void *, int32_t, uint32_t, int16_t, uint32_t);
typedef int32_t (*iFpppippi_t)(void *, void *, void *, int32_t, void *, void *, int32_t);
typedef int32_t (*iFpppippp_t)(void *, void *, void *, int32_t, void *, void *, void *);
typedef int32_t (*iFpppuiii_t)(void *, void *, void *, uint32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpppuppp_t)(void *, void *, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFppppiii_t)(void *, void *, void *, void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFppppipp_t)(void *, void *, void *, void *, int32_t, void *, void *);
typedef int32_t (*iFppppdpi_t)(void *, void *, void *, void *, double, void *, int32_t);
typedef int32_t (*iFpppppip_t)(void *, void *, void *, void *, void *, int32_t, void *);
typedef int32_t (*iFpppppup_t)(void *, void *, void *, void *, void *, uint32_t, void *);
typedef int32_t (*iFppppppi_t)(void *, void *, void *, void *, void *, void *, int32_t);
typedef int32_t (*iFppppppp_t)(void *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFEiipppp_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *, void *);
typedef uint32_t (*uFEpiippp_t)(x86emu_t *, void *, int32_t, int32_t, void *, void *, void *);
typedef uint32_t (*uFEpuuppp_t)(x86emu_t *, void *, uint32_t, uint32_t, void *, void *, void *);
typedef uint32_t (*uFEpppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFuippppp_t)(uint32_t, int32_t, void *, void *, void *, void *, void *);
typedef uint32_t (*uFppiuppi_t)(void *, void *, int32_t, uint32_t, void *, void *, int32_t);
typedef uint32_t (*uFppiuppp_t)(void *, void *, int32_t, uint32_t, void *, void *, void *);
typedef uint32_t (*uFppuuuup_t)(void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, void *);
typedef uintptr_t (*LFEppLppU_t)(x86emu_t *, void *, void *, uintptr_t, void *, void *, uint64_t);
typedef uintptr_t (*LFEpppppu_t)(x86emu_t *, void *, void *, void *, void *, void *, uint32_t);
typedef void *(*pFEpiiiiu_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void *(*pFEpupppp_t)(x86emu_t *, void *, uint32_t, void *, void *, void *, void *);
typedef void *(*pFEpLiiii_t)(x86emu_t *, void *, uintptr_t, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFEpLiiiI_t)(x86emu_t *, void *, uintptr_t, int32_t, int32_t, int32_t, int64_t);
typedef void *(*pFEppCuup_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, void *);
typedef void *(*pFEppCppp_t)(x86emu_t *, void *, void *, uint8_t, void *, void *, void *);
typedef void *(*pFEppuipp_t)(x86emu_t *, void *, void *, uint32_t, int32_t, void *, void *);
typedef void *(*pFEppuWWW_t)(x86emu_t *, void *, void *, uint32_t, uint16_t, uint16_t, uint16_t);
typedef void *(*pFEppuuWW_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint16_t, uint16_t);
typedef void *(*pFEppuuup_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, void *);
typedef void *(*pFEppppip_t)(x86emu_t *, void *, void *, void *, void *, int32_t, void *);
typedef void *(*pFEpppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFifffppp_t)(int32_t, float, float, float, void *, void *, void *);
typedef void *(*pFuupupup_t)(uint32_t, uint32_t, void *, uint32_t, void *, uint32_t, void *);
typedef void *(*pFdiiiIiI_t)(double, int32_t, int32_t, int32_t, int64_t, int32_t, int64_t);
typedef void *(*pFpiiUdii_t)(void *, int32_t, int32_t, uint64_t, double, int32_t, int32_t);
typedef void *(*pFpipippp_t)(void *, int32_t, void *, int32_t, void *, void *, void *);
typedef void *(*pFpuppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *);
typedef void *(*pFplppppp_t)(void *, intptr_t, void *, void *, void *, void *, void *);
typedef void *(*pFpLpLLiL_t)(void *, uintptr_t, void *, uintptr_t, uintptr_t, int32_t, uintptr_t);
typedef void *(*pFpLppiip_t)(void *, uintptr_t, void *, void *, int32_t, int32_t, void *);
typedef void *(*pFpLppLLi_t)(void *, uintptr_t, void *, void *, uintptr_t, uintptr_t, int32_t);
typedef void *(*pFppiiipp_t)(void *, void *, int32_t, int32_t, int32_t, void *, void *);
typedef void *(*pFppiiCCC_t)(void *, void *, int32_t, int32_t, uint8_t, uint8_t, uint8_t);
typedef void *(*pFppiippp_t)(void *, void *, int32_t, int32_t, void *, void *, void *);
typedef void *(*pFppiLLip_t)(void *, void *, int32_t, uintptr_t, uintptr_t, int32_t, void *);
typedef void *(*pFppipipp_t)(void *, void *, int32_t, void *, int32_t, void *, void *);
typedef void *(*pFppuuuuu_t)(void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFppuuppp_t)(void *, void *, uint32_t, uint32_t, void *, void *, void *);
typedef void *(*pFppLiiip_t)(void *, void *, uintptr_t, int32_t, int32_t, int32_t, void *);
typedef void *(*pFppLipip_t)(void *, void *, uintptr_t, int32_t, void *, int32_t, void *);
typedef void *(*pFpppccci_t)(void *, void *, void *, int8_t, int8_t, int8_t, int32_t);
typedef void *(*pFpppiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFpppiipp_t)(void *, void *, void *, int32_t, int32_t, void *, void *);
typedef void *(*pFpppIIIi_t)(void *, void *, void *, int64_t, int64_t, int64_t, int32_t);
typedef void *(*pFpppCCCi_t)(void *, void *, void *, uint8_t, uint8_t, uint8_t, int32_t);
typedef void *(*pFpppuuui_t)(void *, void *, void *, uint32_t, uint32_t, uint32_t, int32_t);
typedef void *(*pFpppuupp_t)(void *, void *, void *, uint32_t, uint32_t, void *, void *);
typedef void *(*pFpppUUUi_t)(void *, void *, void *, uint64_t, uint64_t, uint64_t, int32_t);
typedef void *(*pFpppfffi_t)(void *, void *, void *, float, float, float, int32_t);
typedef void *(*pFpppdddi_t)(void *, void *, void *, double, double, double, int32_t);
typedef void *(*pFpppllli_t)(void *, void *, void *, intptr_t, intptr_t, intptr_t, int32_t);
typedef void *(*pFpppLLLi_t)(void *, void *, void *, uintptr_t, uintptr_t, uintptr_t, int32_t);
typedef void *(*pFppppiii_t)(void *, void *, void *, void *, int32_t, int32_t, int32_t);
typedef void *(*pFppppuuu_t)(void *, void *, void *, void *, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpppppuu_t)(void *, void *, void *, void *, void *, uint32_t, uint32_t);
typedef void *(*pFppppppi_t)(void *, void *, void *, void *, void *, void *, int32_t);
typedef void *(*pFppppppp_t)(void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFEiippppV_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *, void *, void *);
typedef void (*vFEiupippp_t)(x86emu_t *, int32_t, uint32_t, void *, int32_t, void *, void *, void *);
typedef void (*vFEippippp_t)(x86emu_t *, int32_t, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFEppipppp_t)(x86emu_t *, void *, void *, int32_t, void *, void *, void *, void *);
typedef void (*vFEpppippp_t)(x86emu_t *, void *, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFEpppuipV_t)(x86emu_t *, void *, void *, void *, uint32_t, int32_t, void *, void *);
typedef void (*vFEpppppuu_t)(x86emu_t *, void *, void *, void *, void *, void *, uint32_t, uint32_t);
typedef void (*vFEppppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFiiiiuuip_t)(int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFiilliilp_t)(int32_t, int32_t, intptr_t, intptr_t, int32_t, int32_t, intptr_t, void *);
typedef void (*vFiupuiuup_t)(int32_t, uint32_t, void *, uint32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFiupuuuup_t)(int32_t, uint32_t, void *, uint32_t, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiiiiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiiiiC_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuiiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiiipiup_t)(uint32_t, int32_t, int32_t, int32_t, void *, int32_t, uint32_t, void *);
typedef void (*vFuiuiiiii_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiuiiiip_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiuiiiuL_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, uint32_t, uintptr_t);
typedef void (*vFuiuiiCuL_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, uint8_t, uint32_t, uintptr_t);
typedef void (*vFuiuiuuuu_t)(uint32_t, int32_t, uint32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuCCCCfff_t)(uint32_t, uint8_t, uint8_t, uint8_t, uint8_t, float, float, float);
typedef void (*vFuuiiiiiC_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuuiiiuip_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiiuupp_t)(uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint32_t, void *, void *);
typedef void (*vFuuiuiiii_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiuiiiC_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuuiuiiip_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuuuiiiiu_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFuuuiuCil_t)(uint32_t, uint32_t, uint32_t, int32_t, uint32_t, uint8_t, int32_t, intptr_t);
typedef void (*vFuuuipipp_t)(uint32_t, uint32_t, uint32_t, int32_t, void *, int32_t, void *, void *);
typedef void (*vFuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuuufffff_t)(uint32_t, uint32_t, uint32_t, float, float, float, float, float);
typedef void (*vFffffffff_t)(float, float, float, float, float, float, float, float);
typedef void (*vFpiiiiiii_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpiiiipii_t)(void *, int32_t, int32_t, int32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFpiiULipp_t)(void *, int32_t, int32_t, uint64_t, uintptr_t, int32_t, void *, void *);
typedef void (*vFpiUuupup_t)(void *, int32_t, uint64_t, uint32_t, uint32_t, void *, uint32_t, void *);
typedef void (*vFpippiiuu_t)(void *, int32_t, void *, void *, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFpippiipi_t)(void *, int32_t, void *, void *, int32_t, int32_t, void *, int32_t);
typedef void (*vFpippippp_t)(void *, int32_t, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFpippippV_t)(void *, int32_t, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFpuppLLLL_t)(void *, uint32_t, void *, void *, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
typedef void (*vFpUiUiupi_t)(void *, uint64_t, int32_t, uint64_t, int32_t, uint32_t, void *, int32_t);
typedef void (*vFpUuuUUUi_t)(void *, uint64_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, int32_t);
typedef void (*vFppiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiipii_t)(void *, void *, int32_t, int32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFppipipii_t)(void *, void *, int32_t, void *, int32_t, void *, int32_t, int32_t);
typedef void (*vFppipppui_t)(void *, void *, int32_t, void *, void *, void *, uint32_t, int32_t);
typedef void (*vFppippppi_t)(void *, void *, int32_t, void *, void *, void *, void *, int32_t);
typedef void (*vFppippppp_t)(void *, void *, int32_t, void *, void *, void *, void *, void *);
typedef void (*vFppdddddd_t)(void *, void *, double, double, double, double, double, double);
typedef void (*vFpplppppi_t)(void *, void *, intptr_t, void *, void *, void *, void *, int32_t);
typedef void (*vFpplppppp_t)(void *, void *, intptr_t, void *, void *, void *, void *, void *);
typedef void (*vFppppiipi_t)(void *, void *, void *, void *, int32_t, int32_t, void *, int32_t);
typedef void (*vFpppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEipupupi_t)(x86emu_t *, int32_t, void *, uint32_t, void *, uint32_t, void *, int32_t);
typedef int32_t (*iFEpippppp_t)(x86emu_t *, void *, int32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpuiippp_t)(x86emu_t *, void *, uint32_t, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFEpuuiipp_t)(x86emu_t *, void *, uint32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEpuuuipp_t)(x86emu_t *, void *, uint32_t, uint32_t, uint32_t, int32_t, void *, void *);
typedef int32_t (*iFEpuuLppp_t)(x86emu_t *, void *, uint32_t, uint32_t, uintptr_t, void *, void *, void *);
typedef int32_t (*iFEpLiLppp_t)(x86emu_t *, void *, uintptr_t, int32_t, uintptr_t, void *, void *, void *);
typedef int32_t (*iFEppppipp_t)(x86emu_t *, void *, void *, void *, void *, int32_t, void *, void *);
typedef int32_t (*iFiiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFiiupiupi_t)(int32_t, int32_t, uint32_t, void *, int32_t, uint32_t, void *, int32_t);
typedef int32_t (*iFuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFpCCWWpWu_t)(void *, uint8_t, uint8_t, uint16_t, uint16_t, void *, uint16_t, uint32_t);
typedef int32_t (*iFpWCuWCuu_t)(void *, uint16_t, uint8_t, uint32_t, uint16_t, uint8_t, uint32_t, uint32_t);
typedef int32_t (*iFpuiipppp_t)(void *, uint32_t, int32_t, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFpuipuppp_t)(void *, uint32_t, int32_t, void *, uint32_t, void *, void *, void *);
typedef int32_t (*iFpuippupp_t)(void *, uint32_t, int32_t, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFpuuiiiii_t)(void *, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpupppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpUuuLpUi_t)(void *, uint64_t, uint32_t, uint32_t, uintptr_t, void *, uint64_t, int32_t);
typedef int32_t (*iFpdiiiIiI_t)(void *, double, int32_t, int32_t, int32_t, int64_t, int32_t, int64_t);
typedef int32_t (*iFppiiiiiu_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef int32_t (*iFppIIIppp_t)(void *, void *, int64_t, int64_t, int64_t, void *, void *, void *);
typedef int32_t (*iFpppiiipi_t)(void *, void *, void *, int32_t, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFpppiippp_t)(void *, void *, void *, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFpppipipi_t)(void *, void *, void *, int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFpppipppp_t)(void *, void *, void *, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFppppiipi_t)(void *, void *, void *, void *, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFppppippp_t)(void *, void *, void *, void *, int32_t, void *, void *, void *);
typedef int32_t (*iFpppppupp_t)(void *, void *, void *, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppppppii_t)(void *, void *, void *, void *, void *, void *, int32_t, int32_t);
typedef int32_t (*iFpppppppi_t)(void *, void *, void *, void *, void *, void *, void *, int32_t);
typedef int32_t (*iFpppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *);
typedef uint8_t (*CFuiifpppp_t)(uint32_t, int32_t, int32_t, float, void *, void *, void *, void *);
typedef uint32_t (*uFEipipppp_t)(x86emu_t *, int32_t, void *, int32_t, void *, void *, void *, void *);
typedef uint32_t (*uFEpiupppp_t)(x86emu_t *, void *, int32_t, uint32_t, void *, void *, void *, void *);
typedef uint32_t (*uFEppipppp_t)(x86emu_t *, void *, void *, int32_t, void *, void *, void *, void *);
typedef uint32_t (*uFEpppuppp_t)(x86emu_t *, void *, void *, void *, uint32_t, void *, void *, void *);
typedef uint32_t (*uFEppppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFuipppppp_t)(uint32_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFuupuuiuf_t)(uint32_t, uint32_t, void *, uint32_t, uint32_t, int32_t, uint32_t, float);
typedef uint32_t (*uFulpppppp_t)(uint32_t, intptr_t, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFpupuuuCp_t)(void *, uint32_t, void *, uint32_t, uint32_t, uint32_t, uint8_t, void *);
typedef uint32_t (*uFppuuuupp_t)(void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, void *, void *);
typedef uint32_t (*uFppuuuppi_t)(void *, void *, uint32_t, uint32_t, uint32_t, void *, void *, int32_t);
typedef uint32_t (*uFppuppppp_t)(void *, void *, uint32_t, void *, void *, void *, void *, void *);
typedef uintptr_t (*LFEpiupppp_t)(x86emu_t *, void *, int32_t, uint32_t, void *, void *, void *, void *);
typedef void *(*pFEiplllpp_t)(x86emu_t *, int32_t, void *, intptr_t, intptr_t, intptr_t, void *, void *);
typedef void *(*pFEpiuCppp_t)(x86emu_t *, void *, int32_t, uint32_t, uint8_t, void *, void *, void *);
typedef void *(*pFEppCuuCC_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint8_t, uint8_t);
typedef void *(*pFEppCuuWW_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint16_t, uint16_t);
typedef void *(*pFEppCuuup_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint32_t, void *);
typedef void *(*pFEppuuwwu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, int16_t, int16_t, uint32_t);
typedef void *(*pFEppuuuuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFEppuuUUU_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t);
typedef void *(*pFEppLiiip_t)(x86emu_t *, void *, void *, uintptr_t, int32_t, int32_t, int32_t, void *);
typedef void *(*pFEpppuipV_t)(x86emu_t *, void *, void *, void *, uint32_t, int32_t, void *, void *);
typedef void *(*pFEpppppiV_t)(x86emu_t *, void *, void *, void *, void *, void *, int32_t, void *);
typedef void *(*pFEppppppi_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, int32_t);
typedef void *(*pFEppppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFiipppppp_t)(int32_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef void *(*pFuiiiuuuu_t)(uint32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFuupupipp_t)(uint32_t, uint32_t, void *, uint32_t, void *, int32_t, void *, void *);
typedef void *(*pFpiiiiiuu_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void *(*pFpiUdiiUi_t)(void *, int32_t, uint64_t, double, int32_t, int32_t, uint64_t, int32_t);
typedef void *(*pFpipppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *);
typedef void *(*pFpWWiCpup_t)(void *, uint16_t, uint16_t, int32_t, uint8_t, void *, uint32_t, void *);
typedef void *(*pFpuuuupup_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t, void *, uint32_t, void *);
typedef void *(*pFpupupuuu_t)(void *, uint32_t, void *, uint32_t, void *, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpupLLLpp_t)(void *, uint32_t, void *, uintptr_t, uintptr_t, uintptr_t, void *, void *);
typedef void *(*pFpdwwWWui_t)(void *, double, int16_t, int16_t, uint16_t, uint16_t, uint32_t, int32_t);
typedef void *(*pFplpppppp_t)(void *, intptr_t, void *, void *, void *, void *, void *, void *);
typedef void *(*pFpLppLLiL_t)(void *, uintptr_t, void *, void *, uintptr_t, uintptr_t, int32_t, uintptr_t);
typedef void *(*pFppiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFpppuuuuu_t)(void *, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpppppupp_t)(void *, void *, void *, void *, void *, uint32_t, void *, void *);
typedef void (*vFEuuuupppp_t)(x86emu_t *, uint32_t, uint32_t, uint32_t, uint32_t, void *, void *, void *, void *);
typedef void (*vFEpiiiiipp_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, void *);
typedef void (*vFEpuuuippp_t)(x86emu_t *, void *, uint32_t, uint32_t, uint32_t, int32_t, void *, void *, void *);
typedef void (*vFEppiipppp_t)(x86emu_t *, void *, void *, int32_t, int32_t, void *, void *, void *, void *);
typedef void (*vFEpppiippp_t)(x86emu_t *, void *, void *, void *, int32_t, int32_t, void *, void *, void *);
typedef void (*vFEppppippp_t)(x86emu_t *, void *, void *, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFiiiiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFiiiiiiill_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t);
typedef void (*vFiiiiillli_t)(int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t);
typedef void (*vFiiilllilp_t)(int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t, intptr_t, void *);
typedef void (*vFiupuiuuup_t)(int32_t, uint32_t, void *, uint32_t, int32_t, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFiupuuuuup_t)(int32_t, uint32_t, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiiiiiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiiiiiC_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuiiiiiuip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuiiiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiuiiiiip_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiuiiiCuL_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, uint8_t, uint32_t, uintptr_t);
typedef void (*vFuiupuffup_t)(uint32_t, int32_t, uint32_t, void *, uint32_t, float, float, uint32_t, void *);
typedef void (*vFuuiiiiiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiiiiiiC_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint8_t);
typedef void (*vFuuiiiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiuiiiii_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiuiiiip_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuuuiiiiCp_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint8_t, void *);
typedef void (*vFuuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuupuuiuuf_t)(uint32_t, uint32_t, void *, uint32_t, uint32_t, int32_t, uint32_t, uint32_t, float);
typedef void (*vFuffffffff_t)(uint32_t, float, float, float, float, float, float, float, float);
typedef void (*vFffCCCCfff_t)(float, float, uint8_t, uint8_t, uint8_t, uint8_t, float, float, float);
typedef void (*vFddddddddd_t)(double, double, double, double, double, double, double, double, double);
typedef void (*vFpipiuiipp_t)(void *, int32_t, void *, int32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef void (*vFpipippppi_t)(void *, int32_t, void *, int32_t, void *, void *, void *, void *, int32_t);
typedef void (*vFpipppiipi_t)(void *, int32_t, void *, void *, void *, int32_t, int32_t, void *, int32_t);
typedef void (*vFppiiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiiiipi_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, int32_t);
typedef void (*vFppiiipiii_t)(void *, void *, int32_t, int32_t, int32_t, void *, int32_t, int32_t, int32_t);
typedef void (*vFppiipiiii_t)(void *, void *, int32_t, int32_t, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppipppiii_t)(void *, void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t);
typedef void (*vFppipppiip_t)(void *, void *, int32_t, void *, void *, void *, int32_t, int32_t, void *);
typedef void (*vFppuuiiiii_t)(void *, void *, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppddddidd_t)(void *, void *, double, double, double, double, int32_t, double, double);
typedef void (*vFpplpppppi_t)(void *, void *, intptr_t, void *, void *, void *, void *, void *, int32_t);
typedef void (*vFpppiiiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppppipiip_t)(void *, void *, void *, void *, int32_t, void *, int32_t, int32_t, void *);
typedef void (*vFpppppippp_t)(void *, void *, void *, void *, void *, int32_t, void *, void *, void *);
typedef void (*vFppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpiiiiipi_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFEpuuiippu_t)(x86emu_t *, void *, uint32_t, uint32_t, int32_t, int32_t, void *, void *, uint32_t);
typedef int32_t (*iFEpuuuiipp_t)(x86emu_t *, void *, uint32_t, uint32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEpppipppp_t)(x86emu_t *, void *, void *, void *, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFEpppppupp_t)(x86emu_t *, void *, void *, void *, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFiiiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFiiiipiiip_t)(int32_t, int32_t, int32_t, int32_t, void *, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFipiipippi_t)(int32_t, void *, int32_t, int32_t, void *, int32_t, void *, void *, int32_t);
typedef int32_t (*iFdddpppppp_t)(double, double, double, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpiuuupipu_t)(void *, int32_t, uint32_t, uint32_t, uint32_t, void *, int32_t, void *, uint32_t);
typedef int32_t (*iFpipLpiiip_t)(void *, int32_t, void *, uintptr_t, void *, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpuiuuipip_t)(void *, uint32_t, int32_t, uint32_t, uint32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpuuuuuuuu_t)(void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef int32_t (*iFpupuupWWu_t)(void *, uint32_t, void *, uint32_t, uint32_t, void *, uint16_t, uint16_t, uint32_t);
typedef int32_t (*iFpdiiiUiUp_t)(void *, double, int32_t, int32_t, int32_t, uint64_t, int32_t, uint64_t, void *);
typedef int32_t (*iFppiiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFppiuiippu_t)(void *, void *, int32_t, uint32_t, int32_t, int32_t, void *, void *, uint32_t);
typedef int32_t (*iFppipiiipi_t)(void *, void *, int32_t, void *, int32_t, int32_t, int32_t, void *, int32_t);
typedef int32_t (*iFppuLLpupp_t)(void *, void *, uint32_t, uintptr_t, uintptr_t, void *, uint32_t, void *, void *);
typedef int32_t (*iFppupppupp_t)(void *, void *, uint32_t, void *, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppLpiippp_t)(void *, void *, uintptr_t, void *, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFpppiiipip_t)(void *, void *, void *, int32_t, int32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpppiiuuii_t)(void *, void *, void *, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpppiipiiu_t)(void *, void *, void *, int32_t, int32_t, void *, int32_t, int32_t, uint32_t);
typedef int32_t (*iFpppLLLupp_t)(void *, void *, void *, uintptr_t, uintptr_t, uintptr_t, uint32_t, void *, void *);
typedef int32_t (*iFpppLppupp_t)(void *, void *, void *, uintptr_t, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppppiiupp_t)(void *, void *, void *, void *, int32_t, int32_t, uint32_t, void *, void *);
typedef int32_t (*iFppppupiii_t)(void *, void *, void *, void *, uint32_t, void *, int32_t, int32_t, int32_t);
typedef int32_t (*iFpppppLupp_t)(void *, void *, void *, void *, void *, uintptr_t, uint32_t, void *, void *);
typedef int32_t (*iFppppppupp_t)(void *, void *, void *, void *, void *, void *, uint32_t, void *, void *);
typedef int32_t (*iFppppppppu_t)(void *, void *, void *, void *, void *, void *, void *, void *, uint32_t);
typedef int32_t (*iFppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFEipippppp_t)(x86emu_t *, int32_t, void *, int32_t, void *, void *, void *, void *, void *);
typedef uint32_t (*uFEpppufppp_t)(x86emu_t *, void *, void *, void *, uint32_t, float, void *, void *, void *);
typedef uint32_t (*uFuulpiuiuf_t)(uint32_t, uint32_t, intptr_t, void *, int32_t, uint32_t, int32_t, uint32_t, float);
typedef uint32_t (*uFppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef uintptr_t (*LFEppppppii_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, int32_t, int32_t);
typedef void *(*pFEppiiuuui_t)(x86emu_t *, void *, void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, int32_t);
typedef void *(*pFEppCuwwWW_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, int16_t, int16_t, uint16_t, uint16_t);
typedef void *(*pFEppCuWCCC_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint16_t, uint8_t, uint8_t, uint8_t);
typedef void *(*pFEppCuuwwp_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, int16_t, int16_t, void *);
typedef void *(*pFEppCuuuuu_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFEppuippuu_t)(x86emu_t *, void *, void *, uint32_t, int32_t, void *, void *, uint32_t, uint32_t);
typedef void *(*pFEppuuuwwu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, int16_t, int16_t, uint32_t);
typedef void *(*pFEppuupwwC_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, void *, int16_t, int16_t, uint8_t);
typedef void *(*pFEpppppiiV_t)(x86emu_t *, void *, void *, void *, void *, void *, int32_t, int32_t, void *);
typedef void *(*pFEpppppppi_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *, int32_t);
typedef void *(*pFEpppppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFpiiiiuuuu_t)(void *, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFpupuuuuup_t)(void *, uint32_t, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, void *);
typedef void *(*pFppiiiiiip_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void *(*pFppiiuuuuu_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFppipppppp_t)(void *, void *, int32_t, void *, void *, void *, void *, void *, void *);
typedef void *(*pFpppiiiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void *(*pFpppiipppp_t)(void *, void *, void *, int32_t, int32_t, void *, void *, void *, void *);
typedef void *(*pFpppppiipp_t)(void *, void *, void *, void *, void *, int32_t, int32_t, void *, void *);
typedef void (*vFEiippppppp_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFEpippppppp_t)(x86emu_t *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFEpppiipppp_t)(x86emu_t *, void *, void *, void *, int32_t, int32_t, void *, void *, void *, void *);
typedef void (*vFiiiiiiiiii_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFiiiiiiiiiu_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t);
typedef void (*vFiiiiiiiiui_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t);
typedef void (*vFiiiiiiiiuu_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFiiillliiip_t)(int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFippppppppp_t)(int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFuiiiiiiiii_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuiiiiiiiip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiiiiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiuiiiiuup_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiiiiiiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFuuiiiiiuip_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiiiiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiuiiiiip_t)(uint32_t, uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuuuuuuuCCC_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, uint8_t, uint8_t);
typedef void (*vFuuuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuupuiupuuf_t)(uint32_t, uint32_t, void *, uint32_t, int32_t, uint32_t, void *, uint32_t, uint32_t, float);
typedef void (*vFuffiiffiip_t)(uint32_t, float, float, int32_t, int32_t, float, float, int32_t, int32_t, void *);
typedef void (*vFuddiiddiip_t)(uint32_t, double, double, int32_t, int32_t, double, double, int32_t, int32_t, void *);
typedef void (*vFffffffffff_t)(float, float, float, float, float, float, float, float, float, float);
typedef void (*vFpipippppip_t)(void *, int32_t, void *, int32_t, void *, void *, void *, void *, int32_t, void *);
typedef void (*vFpipppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFppiiiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiiiipip_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, int32_t, void *);
typedef void (*vFppiipppiip_t)(void *, void *, int32_t, int32_t, void *, void *, void *, int32_t, int32_t, void *);
typedef void (*vFppiippppii_t)(void *, void *, int32_t, int32_t, void *, void *, void *, void *, int32_t, int32_t);
typedef void (*vFppipppiiii_t)(void *, void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppuuuuiiuu_t)(void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFppdddddddd_t)(void *, void *, double, double, double, double, double, double, double, double);
typedef void (*vFpppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpiiiiippp_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, void *, void *);
typedef int32_t (*iFEpuipupppp_t)(x86emu_t *, void *, uint32_t, int32_t, void *, uint32_t, void *, void *, void *, void *);
typedef int32_t (*iFEpuuiiuipp_t)(x86emu_t *, void *, uint32_t, uint32_t, int32_t, int32_t, uint32_t, int32_t, void *, void *);
typedef int32_t (*iFEpuuuuiipp_t)(x86emu_t *, void *, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEppppppipp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, int32_t, void *, void *);
typedef int32_t (*iFiiiiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpiipiiipip_t)(void *, int32_t, int32_t, void *, int32_t, int32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFpippddiidd_t)(void *, int32_t, void *, void *, double, double, int32_t, int32_t, double, double);
typedef int32_t (*iFpuupiuiipp_t)(void *, uint32_t, uint32_t, void *, int32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpddpippppp_t)(void *, double, double, void *, int32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFppipiippii_t)(void *, void *, int32_t, void *, int32_t, int32_t, void *, void *, int32_t, int32_t);
typedef int32_t (*iFppuuiiiiii_t)(void *, void *, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFppuuiiuupi_t)(void *, void *, uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint32_t, void *, int32_t);
typedef int32_t (*iFpppiiipipi_t)(void *, void *, void *, int32_t, int32_t, int32_t, void *, int32_t, void *, int32_t);
typedef int32_t (*iFpppLLipppp_t)(void *, void *, void *, uintptr_t, uintptr_t, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFppppiiuuii_t)(void *, void *, void *, void *, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t);
typedef int32_t (*iFpppppppipi_t)(void *, void *, void *, void *, void *, void *, void *, int32_t, void *, int32_t);
typedef uint32_t (*uFpppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEiippppppp_t)(x86emu_t *, int32_t, int32_t, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEpiiiiiipp_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *, void *);
typedef void *(*pFEpippppppp_t)(x86emu_t *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppCCuuwwC_t)(x86emu_t *, void *, void *, uint8_t, uint8_t, uint32_t, uint32_t, int16_t, int16_t, uint8_t);
typedef void *(*pFEppCuwwWWu_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, int16_t, int16_t, uint16_t, uint16_t, uint32_t);
typedef void *(*pFEppCuuuCup_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, void *);
typedef void *(*pFEppuuWWCuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t);
typedef void *(*pFpupLLLLLpp_t)(void *, uint32_t, void *, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *, void *);
typedef void *(*pFplllllllll_t)(void *, intptr_t, intptr_t, intptr_t, intptr_t, intptr_t, intptr_t, intptr_t, intptr_t, intptr_t);
typedef void *(*pFppuiipuuii_t)(void *, void *, uint32_t, int32_t, int32_t, void *, uint32_t, uint32_t, int32_t, int32_t);
typedef void *(*pFppuuLLuppp_t)(void *, void *, uint32_t, uint32_t, uintptr_t, uintptr_t, uint32_t, void *, void *, void *);
typedef void *(*pFpppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFEpiiiupupup_t)(x86emu_t *, void *, int32_t, int32_t, int32_t, uint32_t, void *, uint32_t, void *, uint32_t, void *);
typedef void (*vFiiiiillliip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t, int32_t, void *);
typedef void (*vFiiiiilllilp_t)(int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t, intptr_t, void *);
typedef void (*vFiippppppppp_t)(int32_t, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFuiiiiiiiiip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef void (*vFuiiiiiiiuip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuiiiiiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuiiiillliip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t, int32_t, int32_t, void *);
typedef void (*vFuiuiiiiiuup_t)(uint32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuiiiiiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuupupppppp_t)(uint32_t, uint32_t, uint32_t, void *, uint32_t, void *, void *, void *, void *, void *, void *);
typedef void (*vFuuffiiffiip_t)(uint32_t, uint32_t, float, float, int32_t, int32_t, float, float, int32_t, int32_t, void *);
typedef void (*vFuufffffffff_t)(uint32_t, uint32_t, float, float, float, float, float, float, float, float, float);
typedef void (*vFuuddiiddiip_t)(uint32_t, uint32_t, double, double, int32_t, int32_t, double, double, int32_t, int32_t, void *);
typedef void (*vFuffffffffff_t)(uint32_t, float, float, float, float, float, float, float, float, float, float);
typedef void (*vFuLuuuuuuuuu_t)(uint32_t, uintptr_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFLufffffffff_t)(uintptr_t, uint32_t, float, float, float, float, float, float, float, float, float);
typedef void (*vFpipipiipiii_t)(void *, int32_t, void *, int32_t, void *, int32_t, int32_t, void *, int32_t, int32_t, int32_t);
typedef void (*vFpipppiiiipi_t)(void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, void *, int32_t);
typedef void (*vFpupiiuPuPuP_t)(void *, uint32_t, void *, int32_t, int32_t, uint32_t, void *, uint32_t, void *, uint32_t, void *);
typedef void (*vFppiiiiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiiiipiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, void *, int32_t, int32_t, int32_t);
typedef void (*vFppiiiiddddi_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, double, double, double, double, int32_t);
typedef void (*vFppiipppiiii_t)(void *, void *, int32_t, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppipppiiiii_t)(void *, void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppipppuiiii_t)(void *, void *, int32_t, void *, void *, void *, uint32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppipppppppp_t)(void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpuipuppppp_t)(x86emu_t *, void *, uint32_t, int32_t, void *, uint32_t, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpuuiiuippu_t)(x86emu_t *, void *, uint32_t, uint32_t, int32_t, int32_t, uint32_t, int32_t, void *, void *, uint32_t);
typedef int32_t (*iFEpuuuuuiipp_t)(x86emu_t *, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFEpppipppppp_t)(x86emu_t *, void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEppppiiiiuu_t)(x86emu_t *, void *, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef int32_t (*iFiiiiiiiiiip_t)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *);
typedef int32_t (*iFpiippiiipip_t)(void *, int32_t, int32_t, void *, void *, int32_t, int32_t, int32_t, void *, int32_t, void *);
typedef int32_t (*iFppippipppip_t)(void *, void *, int32_t, void *, void *, int32_t, void *, void *, void *, int32_t, void *);
typedef int32_t (*iFppuppLLpupp_t)(void *, void *, uint32_t, void *, void *, uintptr_t, uintptr_t, void *, uint32_t, void *, void *);
typedef int32_t (*iFppppiiuuiiu_t)(void *, void *, void *, void *, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t, uint32_t);
typedef uint32_t (*uFEpiiupppiuV_t)(x86emu_t *, void *, int32_t, int32_t, uint32_t, void *, void *, void *, int32_t, uint32_t, void *);
typedef uint32_t (*uFEpiippppiup_t)(x86emu_t *, void *, int32_t, int32_t, void *, void *, void *, void *, int32_t, uint32_t, void *);
typedef uint32_t (*uFEppppppippp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, int32_t, void *, void *, void *);
typedef uint32_t (*uFppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEpipppppppi_t)(x86emu_t *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, int32_t);
typedef void *(*pFEppiiLpppip_t)(x86emu_t *, void *, void *, int32_t, int32_t, uintptr_t, void *, void *, void *, int32_t, void *);
typedef void *(*pFEppCuWCCuuu_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint16_t, uint8_t, uint8_t, uint32_t, uint32_t, uint32_t);
typedef void *(*pFEppuiipuuii_t)(x86emu_t *, void *, void *, uint32_t, int32_t, int32_t, void *, uint32_t, uint32_t, int32_t, int32_t);
typedef void *(*pFEppuuwwWWww_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, int16_t, int16_t, uint16_t, uint16_t, int16_t, int16_t);
typedef void *(*pFpppppppiipp_t)(void *, void *, void *, void *, void *, void *, void *, int32_t, int32_t, void *, void *);
typedef void *(*pFppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFuiiiiiiiiuLC_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uintptr_t, uint8_t);
typedef void (*vFuiiiiiiiuuip_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiiiiiiiiui_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t);
typedef void (*vFuuiiiiiiiiuu_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFuuiiiiiiiuip_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, void *);
typedef void (*vFuuiiiiiiiuup_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuuuuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFffffffffffff_t)(float, float, float, float, float, float, float, float, float, float, float, float);
typedef void (*vFpipppiiiipii_t)(void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, void *, int32_t, int32_t);
typedef void (*vFpippppiiiipi_t)(void *, int32_t, void *, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, void *, int32_t);
typedef void (*vFppiiiiddddii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, double, double, double, double, int32_t, int32_t);
typedef void (*vFppiiuuuiupup_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, int32_t, uint32_t, void *, uint32_t, void *);
typedef void (*vFppiipppiiiii_t)(void *, void *, int32_t, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpppiiiiiiiii_t)(void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEpppippppppp_t)(x86emu_t *, void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFEppppiiiiuui_t)(x86emu_t *, void *, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t);
typedef int32_t (*iFpipllipppppp_t)(void *, int32_t, void *, intptr_t, intptr_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpipppppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppiiipppppp_t)(void *, void *, void *, int32_t, int32_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppllipppppp_t)(void *, void *, void *, intptr_t, intptr_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef intptr_t (*lFpLpppppppppp_t)(void *, uintptr_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppiiuuuipii_t)(x86emu_t *, void *, void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, int32_t, void *, int32_t, int32_t);
typedef void *(*pFEppCuWCCuuCW_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint16_t, uint8_t, uint8_t, uint32_t, uint32_t, uint8_t, uint16_t);
typedef void *(*pFEppuwwWWuCuu_t)(x86emu_t *, void *, void *, uint32_t, int16_t, int16_t, uint16_t, uint16_t, uint32_t, uint8_t, uint32_t, uint32_t);
typedef void *(*pFEppuuuwwwwWW_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t);
typedef void *(*pFEppuuuWWWCCi_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, uint8_t, uint8_t, int32_t);
typedef void *(*pFEppppppppppp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFWWiCCCCiipup_t)(uint16_t, uint16_t, int32_t, uint8_t, uint8_t, uint8_t, uint8_t, int32_t, int32_t, void *, uint32_t, void *);
typedef void *(*pFppiiuuuiupup_t)(void *, void *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, int32_t, uint32_t, void *, uint32_t, void *);
typedef void *(*pFppippLLLiLpp_t)(void *, void *, int32_t, void *, void *, uintptr_t, uintptr_t, uintptr_t, int32_t, uintptr_t, void *, void *);
typedef void *(*pFppuuppppuppp_t)(void *, void *, uint32_t, uint32_t, void *, void *, void *, void *, uint32_t, void *, void *, void *);
typedef void *(*pFpppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFEpppppppiippp_t)(x86emu_t *, void *, void *, void *, void *, void *, void *, void *, int32_t, int32_t, void *, void *, void *);
typedef void (*vFuiiiiiiiiiuup_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, void *);
typedef void (*vFuuuuuuuuuuuuu_t)(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFuffffffffffff_t)(uint32_t, float, float, float, float, float, float, float, float, float, float, float, float);
typedef void (*vFuLuuuuuuuuuuu_t)(uint32_t, uintptr_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*vFpipppiiiiiiuu_t)(void *, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFpippppppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFpuppppppppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFppiiiiiiiiiii_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiipppiiiiii_t)(void *, void *, int32_t, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFddddpppddpppp_t)(double, double, double, double, void *, void *, void *, double, double, void *, void *, void *, void *);
typedef int32_t (*iFpippuuuiipppp_t)(void *, int32_t, void *, void *, uint32_t, uint32_t, uint32_t, int32_t, int32_t, void *, void *, void *, void *);
typedef int32_t (*iFpippppppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpupiiiipppppp_t)(void *, uint32_t, void *, int32_t, int32_t, int32_t, int32_t, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpuppppppppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFppppppLLLLupp_t)(void *, void *, void *, void *, void *, void *, uintptr_t, uintptr_t, uintptr_t, uintptr_t, uint32_t, void *, void *);
typedef int32_t (*iFppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFippuuuulllipp_t)(int32_t, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, intptr_t, intptr_t, intptr_t, int32_t, void *, void *);
typedef uint32_t (*uFpppppuupppppp_t)(void *, void *, void *, void *, void *, uint32_t, uint32_t, void *, void *, void *, void *, void *, void *);
typedef void *(*pFppLppppiiLpip_t)(void *, void *, uintptr_t, void *, void *, void *, void *, int32_t, int32_t, uintptr_t, void *, int32_t, void *);
typedef void *(*pFppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFuffiiffiiffiip_t)(uint32_t, float, float, int32_t, int32_t, float, float, int32_t, int32_t, float, float, int32_t, int32_t, void *);
typedef void (*vFuddiiddiiddiip_t)(uint32_t, double, double, int32_t, int32_t, double, double, int32_t, int32_t, double, double, int32_t, int32_t, void *);
typedef void (*vFppiipppiiiiiii_t)(void *, void *, int32_t, int32_t, void *, void *, void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpipppppppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpupppppppppppp_t)(void *, uint32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFppupppLLLLpupp_t)(void *, void *, uint32_t, void *, void *, void *, uintptr_t, uintptr_t, uintptr_t, uintptr_t, void *, uint32_t, void *, void *);
typedef int32_t (*iFpppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppCuuWWwwCCup_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, uint16_t, uint16_t, int16_t, int16_t, uint8_t, uint8_t, uint32_t, void *);
typedef void *(*pFEppuuuWWWWWWWW_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t);
typedef void *(*pFpuupuupwwwwWWC_t)(void *, uint32_t, uint32_t, void *, uint32_t, uint32_t, void *, int16_t, int16_t, int16_t, int16_t, uint16_t, uint16_t, uint8_t);
typedef void (*vFuiiiiiuiiiiilll_t)(uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuuiiiiuuiiiiiii_t)(uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFfffffffffffffff_t)(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float);
typedef void (*vFppipppppppppppp_t)(void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFpppippppppppppp_t)(void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppCuuwwWWWWuup_t)(x86emu_t *, void *, void *, uint8_t, uint32_t, uint32_t, int16_t, int16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint32_t, uint32_t, void *);
typedef void *(*pFpuiippppppppppp_t)(void *, uint32_t, int32_t, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFppipppppppppppp_t)(void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFpppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFppipipipipipipip_t)(void *, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *);
typedef void (*vFuuuiiiiiuiiiiilll_t)(uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, intptr_t, intptr_t, intptr_t);
typedef void (*vFuuuuiiiiuuiiiiiii_t)(uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFppiiiiddddiiiiiuu_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, double, double, double, double, int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t);
typedef void (*vFpppuppiipppuUUUpi_t)(void *, void *, void *, uint32_t, void *, void *, int32_t, int32_t, void *, void *, void *, uint32_t, uint64_t, uint64_t, uint64_t, void *, int32_t);
typedef int32_t (*iFppipipppppppppppp_t)(void *, void *, int32_t, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppippppppppppppp_t)(void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFppippipipipipipip_t)(void *, void *, int32_t, void *, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *, int32_t, void *);
typedef void (*vFppuiiiiipuiiiiiiii_t)(void *, void *, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef void (*vFpppipppppppppppppp_t)(void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef uintptr_t (*LFpppppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppuuWWWWWWwwCCCuu_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, int16_t, int16_t, uint8_t, uint8_t, uint8_t, uint32_t, uint32_t);
typedef void *(*pFippppppppppppppppp_t)(int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void (*vFpiiiiiiiiiiiiiiiiii_t)(void *, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t);
typedef int32_t (*iFpppippppppppppppppp_t)(void *, void *, void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFEppuuuuuwwuuuuUUUup_t)(x86emu_t *, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int16_t, int16_t, uint32_t, uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, void *);
typedef void *(*pFiiiippppppppppppppp_t)(int32_t, int32_t, int32_t, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef void *(*pFpippppppppppppppppp_t)(void *, int32_t, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef int32_t (*iFpppppppppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
typedef uint32_t (*uFippuuuuiiiiuuiiiiiiiipp_t)(int32_t, void *, void *, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, void *, void *);
typedef int32_t (*iFpppppppppppppppppppppppppppppppppp_t)(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);


typedef int64_t (*IFpi_t)(void *, int32_t);
typedef int32_t (*iFipV_t)(int32_t, void *, void *);
typedef int32_t (*iFiipV_t)(int32_t, int32_t, void *, void *);
typedef int32_t (*iFppiiiip_t)(void *, void *, int32_t, int32_t, int32_t, int32_t, void *);
# 2504 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
typedef int32_t (*iFiiiN_t)(int32_t, int32_t, int32_t, ...);



typedef long double (*DFD_t)(long double);
typedef int32_t (*iFED_t)(x86emu_t *, long double);
typedef int64_t (*IFED_t)(x86emu_t *, long double);
typedef long double (*DFED_t)(x86emu_t *, long double);
typedef long double (*DFDD_t)(long double, long double);
typedef long double (*DFDp_t)(long double, void *);
typedef long double (*DFppi_t)(void *, void *, int32_t);
typedef long double (*DFppp_t)(void *, void *, void *);
typedef int32_t (*iFDipppL_t)(long double, int32_t, void *, void *, void *, uintptr_t);
typedef void (*vFppippDDC_t)(void *, void *, int32_t, void *, void *, long double, long double, uint8_t);
# 2533 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
void vFv(x86emu_t *emu, uintptr_t fcn)
{
 vFv_t fn = (vFv_t)fcn;
 (void)emu;
 fn();
}
void vFc(x86emu_t *emu, uintptr_t fcn)
{
 vFc_t fn = (vFc_t)fcn;
 fn(*(int8_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFw(x86emu_t *emu, uintptr_t fcn)
{
 vFw_t fn = (vFw_t)fcn;
 fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFi(x86emu_t *emu, uintptr_t fcn)
{
 vFi_t fn = (vFi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFC(x86emu_t *emu, uintptr_t fcn)
{
 vFC_t fn = (vFC_t)fcn;
 fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFW(x86emu_t *emu, uintptr_t fcn)
{
 vFW_t fn = (vFW_t)fcn;
 fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFu(x86emu_t *emu, uintptr_t fcn)
{
 vFu_t fn = (vFu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFU(x86emu_t *emu, uintptr_t fcn)
{
 vFU_t fn = (vFU_t)fcn;
 fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFf(x86emu_t *emu, uintptr_t fcn)
{
 vFf_t fn = (vFf_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4));
}
void vFd(x86emu_t *emu, uintptr_t fcn)
{
 vFd_t fn = (vFd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4));
}
void vFl(x86emu_t *emu, uintptr_t fcn)
{
 vFl_t fn = (vFl_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFL(x86emu_t *emu, uintptr_t fcn)
{
 vFL_t fn = (vFL_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFp(x86emu_t *emu, uintptr_t fcn)
{
 vFp_t fn = (vFp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void vFS(x86emu_t *emu, uintptr_t fcn)
{
 vFS_t fn = (vFS_t)fcn;
 fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)));
}
void vFG(x86emu_t *emu, uintptr_t fcn)
{
 vFG_t fn = (vFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void cFv(x86emu_t *emu, uintptr_t fcn)
{
 cFv_t fn = (cFv_t)fcn;
 emu->regs[_AX].dword[0] = fn();
}
void cFi(x86emu_t *emu, uintptr_t fcn)
{
 cFi_t fn = (cFi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void cFu(x86emu_t *emu, uintptr_t fcn)
{
 cFu_t fn = (cFu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void cFf(x86emu_t *emu, uintptr_t fcn)
{
 cFf_t fn = (cFf_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(float *)(emu->regs[_SP].dword[0] + 4));
}
void cFp(x86emu_t *emu, uintptr_t fcn)
{
 cFp_t fn = (cFp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void cFG(x86emu_t *emu, uintptr_t fcn)
{
 cFG_t fn = (cFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void wFp(x86emu_t *emu, uintptr_t fcn)
{
 wFp_t fn = (wFp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void iFv(x86emu_t *emu, uintptr_t fcn)
{
 iFv_t fn = (iFv_t)fcn;
 emu->regs[_AX].dword[0] = fn();
}
void iFw(x86emu_t *emu, uintptr_t fcn)
{
 iFw_t fn = (iFw_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFi(x86emu_t *emu, uintptr_t fcn)
{
 iFi_t fn = (iFi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFI(x86emu_t *emu, uintptr_t fcn)
{
 iFI_t fn = (iFI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFC(x86emu_t *emu, uintptr_t fcn)
{
 iFC_t fn = (iFC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFW(x86emu_t *emu, uintptr_t fcn)
{
 iFW_t fn = (iFW_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFu(x86emu_t *emu, uintptr_t fcn)
{
 iFu_t fn = (iFu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFU(x86emu_t *emu, uintptr_t fcn)
{
 iFU_t fn = (iFU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFf(x86emu_t *emu, uintptr_t fcn)
{
 iFf_t fn = (iFf_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(float *)(emu->regs[_SP].dword[0] + 4));
}
void iFd(x86emu_t *emu, uintptr_t fcn)
{
 iFd_t fn = (iFd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(double *)(emu->regs[_SP].dword[0] + 4));
}
void iFL(x86emu_t *emu, uintptr_t fcn)
{
 iFL_t fn = (iFL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFp(x86emu_t *emu, uintptr_t fcn)
{
 iFp_t fn = (iFp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void iFS(x86emu_t *emu, uintptr_t fcn)
{
 iFS_t fn = (iFS_t)fcn;
 emu->regs[_AX].dword[0] = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)));
}
void iFG(x86emu_t *emu, uintptr_t fcn)
{
 iFG_t fn = (iFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void IFv(x86emu_t *emu, uintptr_t fcn)
{
 IFv_t fn = (IFv_t)fcn;
 ui64_t r;
 r.i = fn();
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFi(x86emu_t *emu, uintptr_t fcn)
{
 IFi_t fn = (IFi_t)fcn;
 ui64_t r;
 r.i = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFf(x86emu_t *emu, uintptr_t fcn)
{
 IFf_t fn = (IFf_t)fcn;
 ui64_t r;
 r.i = fn(*(float *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFd(x86emu_t *emu, uintptr_t fcn)
{
 IFd_t fn = (IFd_t)fcn;
 ui64_t r;
 r.i = fn(*(double *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFp(x86emu_t *emu, uintptr_t fcn)
{
 IFp_t fn = (IFp_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFG(x86emu_t *emu, uintptr_t fcn)
{
 IFG_t fn = (IFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 ui64_t r;
 r.i = fn(&arg4);
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void CFv(x86emu_t *emu, uintptr_t fcn)
{
 CFv_t fn = (CFv_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn();
}
void CFC(x86emu_t *emu, uintptr_t fcn)
{
 CFC_t fn = (CFC_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4));
}
void CFu(x86emu_t *emu, uintptr_t fcn)
{
 CFu_t fn = (CFu_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void CFl(x86emu_t *emu, uintptr_t fcn)
{
 CFl_t fn = (CFl_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void CFL(x86emu_t *emu, uintptr_t fcn)
{
 CFL_t fn = (CFL_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void CFp(x86emu_t *emu, uintptr_t fcn)
{
 CFp_t fn = (CFp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void CFG(x86emu_t *emu, uintptr_t fcn)
{
 CFG_t fn = (CFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = (unsigned char)fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void WFi(x86emu_t *emu, uintptr_t fcn)
{
 WFi_t fn = (WFi_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned short)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void WFu(x86emu_t *emu, uintptr_t fcn)
{
 WFu_t fn = (WFu_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned short)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void WFp(x86emu_t *emu, uintptr_t fcn)
{
 WFp_t fn = (WFp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned short)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void uFv(x86emu_t *emu, uintptr_t fcn)
{
 uFv_t fn = (uFv_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn();
}
void uFi(x86emu_t *emu, uintptr_t fcn)
{
 uFi_t fn = (uFi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void uFu(x86emu_t *emu, uintptr_t fcn)
{
 uFu_t fn = (uFu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void uFU(x86emu_t *emu, uintptr_t fcn)
{
 uFU_t fn = (uFU_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4));
}
void uFd(x86emu_t *emu, uintptr_t fcn)
{
 uFd_t fn = (uFd_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4));
}
void uFl(x86emu_t *emu, uintptr_t fcn)
{
 uFl_t fn = (uFl_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void uFp(x86emu_t *emu, uintptr_t fcn)
{
 uFp_t fn = (uFp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void uFG(x86emu_t *emu, uintptr_t fcn)
{
 uFG_t fn = (uFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = (uint32_t)fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void UFv(x86emu_t *emu, uintptr_t fcn)
{
 UFv_t fn = (UFv_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn();
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFu(x86emu_t *emu, uintptr_t fcn)
{
 UFu_t fn = (UFu_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFU(x86emu_t *emu, uintptr_t fcn)
{
 UFU_t fn = (UFU_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFp(x86emu_t *emu, uintptr_t fcn)
{
 UFp_t fn = (UFp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFG(x86emu_t *emu, uintptr_t fcn)
{
 UFG_t fn = (UFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 ui64_t r;
 r.u = (uint64_t)fn(&arg4);
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void UFs(x86emu_t *emu, uintptr_t fcn)
{
 UFs_t fn = (UFs_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn((void *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void fFi(x86emu_t *emu, uintptr_t fcn)
{
 fFi_t fn = (fFi_t)fcn;
 float fl = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFf(x86emu_t *emu, uintptr_t fcn)
{
 fFf_t fn = (fFf_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFp(x86emu_t *emu, uintptr_t fcn)
{
 fFp_t fn = (fFp_t)fcn;
 float fl = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFG(x86emu_t *emu, uintptr_t fcn)
{
 fFG_t fn = (fFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 float fl = fn(&arg4);
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void dFv(x86emu_t *emu, uintptr_t fcn)
{
 dFv_t fn = (dFv_t)fcn;
 double db = fn();
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFi(x86emu_t *emu, uintptr_t fcn)
{
 dFi_t fn = (dFi_t)fcn;
 double db = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFu(x86emu_t *emu, uintptr_t fcn)
{
 dFu_t fn = (dFu_t)fcn;
 double db = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFd(x86emu_t *emu, uintptr_t fcn)
{
 dFd_t fn = (dFd_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFp(x86emu_t *emu, uintptr_t fcn)
{
 dFp_t fn = (dFp_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFG(x86emu_t *emu, uintptr_t fcn)
{
 dFG_t fn = (dFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 double db = fn(&arg4);
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void lFv(x86emu_t *emu, uintptr_t fcn)
{
 lFv_t fn = (lFv_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn();
}
void lFu(x86emu_t *emu, uintptr_t fcn)
{
 lFu_t fn = (lFu_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void lFl(x86emu_t *emu, uintptr_t fcn)
{
 lFl_t fn = (lFl_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void lFp(x86emu_t *emu, uintptr_t fcn)
{
 lFp_t fn = (lFp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void lFG(x86emu_t *emu, uintptr_t fcn)
{
 lFG_t fn = (lFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = (intptr_t)fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void LFv(x86emu_t *emu, uintptr_t fcn)
{
 LFv_t fn = (LFv_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn();
}
void LFi(x86emu_t *emu, uintptr_t fcn)
{
 LFi_t fn = (LFi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void LFu(x86emu_t *emu, uintptr_t fcn)
{
 LFu_t fn = (LFu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void LFL(x86emu_t *emu, uintptr_t fcn)
{
 LFL_t fn = (LFL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void LFp(x86emu_t *emu, uintptr_t fcn)
{
 LFp_t fn = (LFp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void LFG(x86emu_t *emu, uintptr_t fcn)
{
 LFG_t fn = (LFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = (uintptr_t)fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void pFv(x86emu_t *emu, uintptr_t fcn)
{
 pFv_t fn = (pFv_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn();
}
void pFw(x86emu_t *emu, uintptr_t fcn)
{
 pFw_t fn = (pFw_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFi(x86emu_t *emu, uintptr_t fcn)
{
 pFi_t fn = (pFi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFI(x86emu_t *emu, uintptr_t fcn)
{
 pFI_t fn = (pFI_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFC(x86emu_t *emu, uintptr_t fcn)
{
 pFC_t fn = (pFC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFW(x86emu_t *emu, uintptr_t fcn)
{
 pFW_t fn = (pFW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFu(x86emu_t *emu, uintptr_t fcn)
{
 pFu_t fn = (pFu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFU(x86emu_t *emu, uintptr_t fcn)
{
 pFU_t fn = (pFU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFd(x86emu_t *emu, uintptr_t fcn)
{
 pFd_t fn = (pFd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4));
}
void pFl(x86emu_t *emu, uintptr_t fcn)
{
 pFl_t fn = (pFl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFL(x86emu_t *emu, uintptr_t fcn)
{
 pFL_t fn = (pFL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFp(x86emu_t *emu, uintptr_t fcn)
{
 pFp_t fn = (pFp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4));
}
void pFV(x86emu_t *emu, uintptr_t fcn)
{
 pFV_t fn = (pFV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn((void *)(emu->regs[_SP].dword[0] + 4));
}
void pFG(x86emu_t *emu, uintptr_t fcn)
{
 pFG_t fn = (pFG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = (uintptr_t)fn(&arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFEv(x86emu_t *emu, uintptr_t fcn)
{
 vFEv_t fn = (vFEv_t)fcn;
 fn(emu);
}
void vFEi(x86emu_t *emu, uintptr_t fcn)
{
 vFEi_t fn = (vFEi_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void vFEp(x86emu_t *emu, uintptr_t fcn)
{
 vFEp_t fn = (vFEp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
}
void vFcc(x86emu_t *emu, uintptr_t fcn)
{
 vFcc_t fn = (vFcc_t)fcn;
 fn(*(int8_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFww(x86emu_t *emu, uintptr_t fcn)
{
 vFww_t fn = (vFww_t)fcn;
 fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFii(x86emu_t *emu, uintptr_t fcn)
{
 vFii_t fn = (vFii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFiI(x86emu_t *emu, uintptr_t fcn)
{
 vFiI_t fn = (vFiI_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFiW(x86emu_t *emu, uintptr_t fcn)
{
 vFiW_t fn = (vFiW_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFiu(x86emu_t *emu, uintptr_t fcn)
{
 vFiu_t fn = (vFiu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFiU(x86emu_t *emu, uintptr_t fcn)
{
 vFiU_t fn = (vFiU_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFif(x86emu_t *emu, uintptr_t fcn)
{
 vFif_t fn = (vFif_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void vFid(x86emu_t *emu, uintptr_t fcn)
{
 vFid_t fn = (vFid_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
}
void vFil(x86emu_t *emu, uintptr_t fcn)
{
 vFil_t fn = (vFil_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFiL(x86emu_t *emu, uintptr_t fcn)
{
 vFiL_t fn = (vFiL_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFip(x86emu_t *emu, uintptr_t fcn)
{
 vFip_t fn = (vFip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFWW(x86emu_t *emu, uintptr_t fcn)
{
 vFWW_t fn = (vFWW_t)fcn;
 fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFWp(x86emu_t *emu, uintptr_t fcn)
{
 vFWp_t fn = (vFWp_t)fcn;
 fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFuc(x86emu_t *emu, uintptr_t fcn)
{
 vFuc_t fn = (vFuc_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuw(x86emu_t *emu, uintptr_t fcn)
{
 vFuw_t fn = (vFuw_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFui(x86emu_t *emu, uintptr_t fcn)
{
 vFui_t fn = (vFui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuC(x86emu_t *emu, uintptr_t fcn)
{
 vFuC_t fn = (vFuC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuW(x86emu_t *emu, uintptr_t fcn)
{
 vFuW_t fn = (vFuW_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuu_t fn = (vFuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuU(x86emu_t *emu, uintptr_t fcn)
{
 vFuU_t fn = (vFuU_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuf(x86emu_t *emu, uintptr_t fcn)
{
 vFuf_t fn = (vFuf_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void vFud(x86emu_t *emu, uintptr_t fcn)
{
 vFud_t fn = (vFud_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
}
void vFul(x86emu_t *emu, uintptr_t fcn)
{
 vFul_t fn = (vFul_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuL_t fn = (vFuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFup(x86emu_t *emu, uintptr_t fcn)
{
 vFup_t fn = (vFup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFUi(x86emu_t *emu, uintptr_t fcn)
{
 vFUi_t fn = (vFUi_t)fcn;
 fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFfi(x86emu_t *emu, uintptr_t fcn)
{
 vFfi_t fn = (vFfi_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFfC(x86emu_t *emu, uintptr_t fcn)
{
 vFfC_t fn = (vFfC_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFff(x86emu_t *emu, uintptr_t fcn)
{
 vFff_t fn = (vFff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void vFfp(x86emu_t *emu, uintptr_t fcn)
{
 vFfp_t fn = (vFfp_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFdd(x86emu_t *emu, uintptr_t fcn)
{
 vFdd_t fn = (vFdd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void vFlu(x86emu_t *emu, uintptr_t fcn)
{
 vFlu_t fn = (vFlu_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFlp(x86emu_t *emu, uintptr_t fcn)
{
 vFlp_t fn = (vFlp_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFLu(x86emu_t *emu, uintptr_t fcn)
{
 vFLu_t fn = (vFLu_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFLp(x86emu_t *emu, uintptr_t fcn)
{
 vFLp_t fn = (vFLp_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFpi(x86emu_t *emu, uintptr_t fcn)
{
 vFpi_t fn = (vFpi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpI(x86emu_t *emu, uintptr_t fcn)
{
 vFpI_t fn = (vFpI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpC(x86emu_t *emu, uintptr_t fcn)
{
 vFpC_t fn = (vFpC_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpW(x86emu_t *emu, uintptr_t fcn)
{
 vFpW_t fn = (vFpW_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpu(x86emu_t *emu, uintptr_t fcn)
{
 vFpu_t fn = (vFpu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpU(x86emu_t *emu, uintptr_t fcn)
{
 vFpU_t fn = (vFpU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpf(x86emu_t *emu, uintptr_t fcn)
{
 vFpf_t fn = (vFpf_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void vFpd(x86emu_t *emu, uintptr_t fcn)
{
 vFpd_t fn = (vFpd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
}
void vFpl(x86emu_t *emu, uintptr_t fcn)
{
 vFpl_t fn = (vFpl_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpL(x86emu_t *emu, uintptr_t fcn)
{
 vFpL_t fn = (vFpL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpp_t fn = (vFpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFpV(x86emu_t *emu, uintptr_t fcn)
{
 vFpV_t fn = (vFpV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void vFpS(x86emu_t *emu, uintptr_t fcn)
{
 vFpS_t fn = (vFpS_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), io_convert(*(void **)(emu->regs[_SP].dword[0] + 8)));
}
void vFpP(x86emu_t *emu, uintptr_t fcn)
{
 vFpP_t fn = (vFpP_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8);
 VulkanTox86(arg8);
}
void vFpG(x86emu_t *emu, uintptr_t fcn)
{
 vFpG_t fn = (vFpG_t)fcn;
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
}
void vFSi(x86emu_t *emu, uintptr_t fcn)
{
 vFSi_t fn = (vFSi_t)fcn;
 fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFGc(x86emu_t *emu, uintptr_t fcn)
{
 vFGc_t fn = (vFGc_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(int8_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGi(x86emu_t *emu, uintptr_t fcn)
{
 vFGi_t fn = (vFGi_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(int32_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGI(x86emu_t *emu, uintptr_t fcn)
{
 vFGI_t fn = (vFGI_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(int64_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGC(x86emu_t *emu, uintptr_t fcn)
{
 vFGC_t fn = (vFGC_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGu(x86emu_t *emu, uintptr_t fcn)
{
 vFGu_t fn = (vFGu_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGU(x86emu_t *emu, uintptr_t fcn)
{
 vFGU_t fn = (vFGU_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGf(x86emu_t *emu, uintptr_t fcn)
{
 vFGf_t fn = (vFGf_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(float *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGd(x86emu_t *emu, uintptr_t fcn)
{
 vFGd_t fn = (vFGd_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(double *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGl(x86emu_t *emu, uintptr_t fcn)
{
 vFGl_t fn = (vFGl_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGL(x86emu_t *emu, uintptr_t fcn)
{
 vFGL_t fn = (vFGL_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGp(x86emu_t *emu, uintptr_t fcn)
{
 vFGp_t fn = (vFGp_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 fn(&arg4, *(void **)(emu->regs[_SP].dword[0] + 8));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
}
void vFGG(x86emu_t *emu, uintptr_t fcn)
{
 vFGG_t fn = (vFGG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 fn(&arg4, &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
}
void cFpp(x86emu_t *emu, uintptr_t fcn)
{
 cFpp_t fn = (cFpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFEv(x86emu_t *emu, uintptr_t fcn)
{
 iFEv_t fn = (iFEv_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu);
}
void iFEi(x86emu_t *emu, uintptr_t fcn)
{
 iFEi_t fn = (iFEi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFEu(x86emu_t *emu, uintptr_t fcn)
{
 iFEu_t fn = (iFEu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFEf(x86emu_t *emu, uintptr_t fcn)
{
 iFEf_t fn = (iFEf_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(float *)(emu->regs[_SP].dword[0] + 4));
}
void iFEd(x86emu_t *emu, uintptr_t fcn)
{
 iFEd_t fn = (iFEd_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(double *)(emu->regs[_SP].dword[0] + 4));
}
void iFEL(x86emu_t *emu, uintptr_t fcn)
{
 iFEL_t fn = (iFEL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uintptr_t *)(emu->regs[_SP].dword[0] + 4));
}
void iFEp(x86emu_t *emu, uintptr_t fcn)
{
 iFEp_t fn = (iFEp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
}
void iFwp(x86emu_t *emu, uintptr_t fcn)
{
 iFwp_t fn = (iFwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFii(x86emu_t *emu, uintptr_t fcn)
{
 iFii_t fn = (iFii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFiI(x86emu_t *emu, uintptr_t fcn)
{
 iFiI_t fn = (iFiI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFiu(x86emu_t *emu, uintptr_t fcn)
{
 iFiu_t fn = (iFiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFiU(x86emu_t *emu, uintptr_t fcn)
{
 iFiU_t fn = (iFiU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFil(x86emu_t *emu, uintptr_t fcn)
{
 iFil_t fn = (iFil_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFip(x86emu_t *emu, uintptr_t fcn)
{
 iFip_t fn = (iFip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFiV(x86emu_t *emu, uintptr_t fcn)
{
 iFiV_t fn = (iFiV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void iFIi(x86emu_t *emu, uintptr_t fcn)
{
 iFIi_t fn = (iFIi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFui(x86emu_t *emu, uintptr_t fcn)
{
 iFui_t fn = (iFui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFuu(x86emu_t *emu, uintptr_t fcn)
{
 iFuu_t fn = (iFuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFup(x86emu_t *emu, uintptr_t fcn)
{
 iFup_t fn = (iFup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFli(x86emu_t *emu, uintptr_t fcn)
{
 iFli_t fn = (iFli_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFLL(x86emu_t *emu, uintptr_t fcn)
{
 iFLL_t fn = (iFLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFLp(x86emu_t *emu, uintptr_t fcn)
{
 iFLp_t fn = (iFLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFpw(x86emu_t *emu, uintptr_t fcn)
{
 iFpw_t fn = (iFpw_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpi(x86emu_t *emu, uintptr_t fcn)
{
 iFpi_t fn = (iFpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpI(x86emu_t *emu, uintptr_t fcn)
{
 iFpI_t fn = (iFpI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpC(x86emu_t *emu, uintptr_t fcn)
{
 iFpC_t fn = (iFpC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpW(x86emu_t *emu, uintptr_t fcn)
{
 iFpW_t fn = (iFpW_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpu(x86emu_t *emu, uintptr_t fcn)
{
 iFpu_t fn = (iFpu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpU(x86emu_t *emu, uintptr_t fcn)
{
 iFpU_t fn = (iFpU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpf(x86emu_t *emu, uintptr_t fcn)
{
 iFpf_t fn = (iFpf_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void iFpd(x86emu_t *emu, uintptr_t fcn)
{
 iFpd_t fn = (iFpd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
}
void iFpl(x86emu_t *emu, uintptr_t fcn)
{
 iFpl_t fn = (iFpl_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpL(x86emu_t *emu, uintptr_t fcn)
{
 iFpL_t fn = (iFpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpp_t fn = (iFpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFpV(x86emu_t *emu, uintptr_t fcn)
{
 iFpV_t fn = (iFpV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void iFpO(x86emu_t *emu, uintptr_t fcn)
{
 iFpO_t fn = (iFpO_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 8)));
}
void iFpP(x86emu_t *emu, uintptr_t fcn)
{
 iFpP_t fn = (iFpP_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8);
 VulkanTox86(arg8);
}
void iFpG(x86emu_t *emu, uintptr_t fcn)
{
 iFpG_t fn = (iFpG_t)fcn;
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
}
void iFSi(x86emu_t *emu, uintptr_t fcn)
{
 iFSi_t fn = (iFSi_t)fcn;
 emu->regs[_AX].dword[0] = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFGG(x86emu_t *emu, uintptr_t fcn)
{
 iFGG_t fn = (iFGG_t)fcn;
 my_GValue_t arg4;
 alignGValue(&arg4, *(void **)(emu->regs[_SP].dword[0] + 4));
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(&arg4, &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 4), &arg4);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
}
void IFEf(x86emu_t *emu, uintptr_t fcn)
{
 IFEf_t fn = (IFEf_t)fcn;
 ui64_t r;
 r.i = fn(emu, *(float *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFEd(x86emu_t *emu, uintptr_t fcn)
{
 IFEd_t fn = (IFEd_t)fcn;
 ui64_t r;
 r.i = fn(emu, *(double *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFEp(x86emu_t *emu, uintptr_t fcn)
{
 IFEp_t fn = (IFEp_t)fcn;
 ui64_t r;
 r.i = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFII(x86emu_t *emu, uintptr_t fcn)
{
 IFII_t fn = (IFII_t)fcn;
 ui64_t r;
 r.i = fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFpu(x86emu_t *emu, uintptr_t fcn)
{
 IFpu_t fn = (IFpu_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFpd(x86emu_t *emu, uintptr_t fcn)
{
 IFpd_t fn = (IFpd_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void CFip(x86emu_t *emu, uintptr_t fcn)
{
 CFip_t fn = (CFip_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void CFui(x86emu_t *emu, uintptr_t fcn)
{
 CFui_t fn = (CFui_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void CFuu(x86emu_t *emu, uintptr_t fcn)
{
 CFuu_t fn = (CFuu_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void CFuL(x86emu_t *emu, uintptr_t fcn)
{
 CFuL_t fn = (CFuL_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void CFpi(x86emu_t *emu, uintptr_t fcn)
{
 CFpi_t fn = (CFpi_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void CFpu(x86emu_t *emu, uintptr_t fcn)
{
 CFpu_t fn = (CFpu_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void CFpp(x86emu_t *emu, uintptr_t fcn)
{
 CFpp_t fn = (CFpp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void WFpp(x86emu_t *emu, uintptr_t fcn)
{
 WFpp_t fn = (WFpp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned short)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void uFEu(x86emu_t *emu, uintptr_t fcn)
{
 uFEu_t fn = (uFEu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void uFEp(x86emu_t *emu, uintptr_t fcn)
{
 uFEp_t fn = (uFEp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
}
void uFii(x86emu_t *emu, uintptr_t fcn)
{
 uFii_t fn = (uFii_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFiu(x86emu_t *emu, uintptr_t fcn)
{
 uFiu_t fn = (uFiu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFui(x86emu_t *emu, uintptr_t fcn)
{
 uFui_t fn = (uFui_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFuu(x86emu_t *emu, uintptr_t fcn)
{
 uFuu_t fn = (uFuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFup(x86emu_t *emu, uintptr_t fcn)
{
 uFup_t fn = (uFup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void uFpw(x86emu_t *emu, uintptr_t fcn)
{
 uFpw_t fn = (uFpw_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFpi(x86emu_t *emu, uintptr_t fcn)
{
 uFpi_t fn = (uFpi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFpu(x86emu_t *emu, uintptr_t fcn)
{
 uFpu_t fn = (uFpu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFpf(x86emu_t *emu, uintptr_t fcn)
{
 uFpf_t fn = (uFpf_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
}
void uFpL(x86emu_t *emu, uintptr_t fcn)
{
 uFpL_t fn = (uFpL_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFpp(x86emu_t *emu, uintptr_t fcn)
{
 uFpp_t fn = (uFpp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void uFp2(x86emu_t *emu, uintptr_t fcn)
{
 uFp2_t fn = (uFp2_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), (_2uint_struct_t){*(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8 + 4)});
}
void UFEp(x86emu_t *emu, uintptr_t fcn)
{
 UFEp_t fn = (UFEp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFii(x86emu_t *emu, uintptr_t fcn)
{
 UFii_t fn = (UFii_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFuu(x86emu_t *emu, uintptr_t fcn)
{
 UFuu_t fn = (UFuu_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFUU(x86emu_t *emu, uintptr_t fcn)
{
 UFUU_t fn = (UFUU_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFUp(x86emu_t *emu, uintptr_t fcn)
{
 UFUp_t fn = (UFUp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFpp(x86emu_t *emu, uintptr_t fcn)
{
 UFpp_t fn = (UFpp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFss(x86emu_t *emu, uintptr_t fcn)
{
 UFss_t fn = (UFss_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn((void *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void fFEf(x86emu_t *emu, uintptr_t fcn)
{
 fFEf_t fn = (fFEf_t)fcn;
 float fl = fn(emu, *(float *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFEp(x86emu_t *emu, uintptr_t fcn)
{
 fFEp_t fn = (fFEp_t)fcn;
 float fl = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFif(x86emu_t *emu, uintptr_t fcn)
{
 fFif_t fn = (fFif_t)fcn;
 float fl = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFfi(x86emu_t *emu, uintptr_t fcn)
{
 fFfi_t fn = (fFfi_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFff(x86emu_t *emu, uintptr_t fcn)
{
 fFff_t fn = (fFff_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFfD(x86emu_t *emu, uintptr_t fcn)
{
 fFfD_t fn = (fFfD_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), LD2localLD((void *)(emu->regs[_SP].dword[0] + 8)));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFfp(x86emu_t *emu, uintptr_t fcn)
{
 fFfp_t fn = (fFfp_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFpp(x86emu_t *emu, uintptr_t fcn)
{
 fFpp_t fn = (fFpp_t)fcn;
 float fl = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void dFEd(x86emu_t *emu, uintptr_t fcn)
{
 dFEd_t fn = (dFEd_t)fcn;
 double db = fn(emu, *(double *)(emu->regs[_SP].dword[0] + 4));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFid(x86emu_t *emu, uintptr_t fcn)
{
 dFid_t fn = (dFid_t)fcn;
 double db = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFuu(x86emu_t *emu, uintptr_t fcn)
{
 dFuu_t fn = (dFuu_t)fcn;
 double db = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFdi(x86emu_t *emu, uintptr_t fcn)
{
 dFdi_t fn = (dFdi_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFdd(x86emu_t *emu, uintptr_t fcn)
{
 dFdd_t fn = (dFdd_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFdD(x86emu_t *emu, uintptr_t fcn)
{
 dFdD_t fn = (dFdD_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), LD2localLD((void *)(emu->regs[_SP].dword[0] + 12)));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFdp(x86emu_t *emu, uintptr_t fcn)
{
 dFdp_t fn = (dFdp_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFpi(x86emu_t *emu, uintptr_t fcn)
{
 dFpi_t fn = (dFpi_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFpd(x86emu_t *emu, uintptr_t fcn)
{
 dFpd_t fn = (dFpd_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFpp(x86emu_t *emu, uintptr_t fcn)
{
 dFpp_t fn = (dFpp_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void DFpp(x86emu_t *emu, uintptr_t fcn)
{
 DFpp_t fn = (DFpp_t)fcn;
 long double ld = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void lFEv(x86emu_t *emu, uintptr_t fcn)
{
 lFEv_t fn = (lFEv_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(emu);
}
void lFEi(x86emu_t *emu, uintptr_t fcn)
{
 lFEi_t fn = (lFEi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void lFui(x86emu_t *emu, uintptr_t fcn)
{
 lFui_t fn = (lFui_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void lFll(x86emu_t *emu, uintptr_t fcn)
{
 lFll_t fn = (lFll_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void lFpi(x86emu_t *emu, uintptr_t fcn)
{
 lFpi_t fn = (lFpi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void lFpp(x86emu_t *emu, uintptr_t fcn)
{
 lFpp_t fn = (lFpp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void LFii(x86emu_t *emu, uintptr_t fcn)
{
 LFii_t fn = (LFii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void LFuu(x86emu_t *emu, uintptr_t fcn)
{
 LFuu_t fn = (LFuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void LFUp(x86emu_t *emu, uintptr_t fcn)
{
 LFUp_t fn = (LFUp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void LFLi(x86emu_t *emu, uintptr_t fcn)
{
 LFLi_t fn = (LFLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void LFpi(x86emu_t *emu, uintptr_t fcn)
{
 LFpi_t fn = (LFpi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void LFpL(x86emu_t *emu, uintptr_t fcn)
{
 LFpL_t fn = (LFpL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void LFpp(x86emu_t *emu, uintptr_t fcn)
{
 LFpp_t fn = (LFpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFEv(x86emu_t *emu, uintptr_t fcn)
{
 pFEv_t fn = (pFEv_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu);
}
void pFEi(x86emu_t *emu, uintptr_t fcn)
{
 pFEi_t fn = (pFEi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFEu(x86emu_t *emu, uintptr_t fcn)
{
 pFEu_t fn = (pFEu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4));
}
void pFEp(x86emu_t *emu, uintptr_t fcn)
{
 pFEp_t fn = (pFEp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4));
}
void pFii(x86emu_t *emu, uintptr_t fcn)
{
 pFii_t fn = (pFii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFiI(x86emu_t *emu, uintptr_t fcn)
{
 pFiI_t fn = (pFiI_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFiu(x86emu_t *emu, uintptr_t fcn)
{
 pFiu_t fn = (pFiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFip(x86emu_t *emu, uintptr_t fcn)
{
 pFip_t fn = (pFip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFiV(x86emu_t *emu, uintptr_t fcn)
{
 pFiV_t fn = (pFiV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFII(x86emu_t *emu, uintptr_t fcn)
{
 pFII_t fn = (pFII_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFui(x86emu_t *emu, uintptr_t fcn)
{
 pFui_t fn = (pFui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFuC(x86emu_t *emu, uintptr_t fcn)
{
 pFuC_t fn = (pFuC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFuu(x86emu_t *emu, uintptr_t fcn)
{
 pFuu_t fn = (pFuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFup(x86emu_t *emu, uintptr_t fcn)
{
 pFup_t fn = (pFup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFuV(x86emu_t *emu, uintptr_t fcn)
{
 pFuV_t fn = (pFuV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFUi(x86emu_t *emu, uintptr_t fcn)
{
 pFUi_t fn = (pFUi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFUU(x86emu_t *emu, uintptr_t fcn)
{
 pFUU_t fn = (pFUU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFdi(x86emu_t *emu, uintptr_t fcn)
{
 pFdi_t fn = (pFdi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFdd(x86emu_t *emu, uintptr_t fcn)
{
 pFdd_t fn = (pFdd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void pFlp(x86emu_t *emu, uintptr_t fcn)
{
 pFlp_t fn = (pFlp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFLL(x86emu_t *emu, uintptr_t fcn)
{
 pFLL_t fn = (pFLL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFLp(x86emu_t *emu, uintptr_t fcn)
{
 pFLp_t fn = (pFLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFpi(x86emu_t *emu, uintptr_t fcn)
{
 pFpi_t fn = (pFpi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpC(x86emu_t *emu, uintptr_t fcn)
{
 pFpC_t fn = (pFpC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpu(x86emu_t *emu, uintptr_t fcn)
{
 pFpu_t fn = (pFpu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpU(x86emu_t *emu, uintptr_t fcn)
{
 pFpU_t fn = (pFpU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpd(x86emu_t *emu, uintptr_t fcn)
{
 pFpd_t fn = (pFpd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8));
}
void pFpl(x86emu_t *emu, uintptr_t fcn)
{
 pFpl_t fn = (pFpl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpL(x86emu_t *emu, uintptr_t fcn)
{
 pFpL_t fn = (pFpL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFpp(x86emu_t *emu, uintptr_t fcn)
{
 pFpp_t fn = (pFpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFpV(x86emu_t *emu, uintptr_t fcn)
{
 pFpV_t fn = (pFpV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFpG(x86emu_t *emu, uintptr_t fcn)
{
 pFpG_t fn = (pFpG_t)fcn;
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
}
void pFps(x86emu_t *emu, uintptr_t fcn)
{
 pFps_t fn = (pFps_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFSi(x86emu_t *emu, uintptr_t fcn)
{
 pFSi_t fn = (pFSi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFEip(x86emu_t *emu, uintptr_t fcn)
{
 vFEip_t fn = (vFEip_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFEpi(x86emu_t *emu, uintptr_t fcn)
{
 vFEpi_t fn = (vFEpi_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFEpu(x86emu_t *emu, uintptr_t fcn)
{
 vFEpu_t fn = (vFEpu_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void vFEpp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpp_t fn = (vFEpp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void vFEpV(x86emu_t *emu, uintptr_t fcn)
{
 vFEpV_t fn = (vFEpV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void vFccc(x86emu_t *emu, uintptr_t fcn)
{
 vFccc_t fn = (vFccc_t)fcn;
 fn(*(int8_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8), *(int8_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFwww(x86emu_t *emu, uintptr_t fcn)
{
 vFwww_t fn = (vFwww_t)fcn;
 fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiii_t fn = (vFiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFiif(x86emu_t *emu, uintptr_t fcn)
{
 vFiif_t fn = (vFiif_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFiip(x86emu_t *emu, uintptr_t fcn)
{
 vFiip_t fn = (vFiip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFiui(x86emu_t *emu, uintptr_t fcn)
{
 vFiui_t fn = (vFiui_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFiuu_t fn = (vFiuu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFiuU(x86emu_t *emu, uintptr_t fcn)
{
 vFiuU_t fn = (vFiuU_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFiup(x86emu_t *emu, uintptr_t fcn)
{
 vFiup_t fn = (vFiup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFiff(x86emu_t *emu, uintptr_t fcn)
{
 vFiff_t fn = (vFiff_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFidd(x86emu_t *emu, uintptr_t fcn)
{
 vFidd_t fn = (vFidd_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFill(x86emu_t *emu, uintptr_t fcn)
{
 vFill_t fn = (vFill_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFilp(x86emu_t *emu, uintptr_t fcn)
{
 vFilp_t fn = (vFilp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFiLL(x86emu_t *emu, uintptr_t fcn)
{
 vFiLL_t fn = (vFiLL_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFipi(x86emu_t *emu, uintptr_t fcn)
{
 vFipi_t fn = (vFipi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFipu(x86emu_t *emu, uintptr_t fcn)
{
 vFipu_t fn = (vFipu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFipp(x86emu_t *emu, uintptr_t fcn)
{
 vFipp_t fn = (vFipp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFipV(x86emu_t *emu, uintptr_t fcn)
{
 vFipV_t fn = (vFipV_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void vFCCC(x86emu_t *emu, uintptr_t fcn)
{
 vFCCC_t fn = (vFCCC_t)fcn;
 fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFWWW(x86emu_t *emu, uintptr_t fcn)
{
 vFWWW_t fn = (vFWWW_t)fcn;
 fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFucc(x86emu_t *emu, uintptr_t fcn)
{
 vFucc_t fn = (vFucc_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8), *(int8_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuww(x86emu_t *emu, uintptr_t fcn)
{
 vFuww_t fn = (vFuww_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuii_t fn = (vFuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuiI(x86emu_t *emu, uintptr_t fcn)
{
 vFuiI_t fn = (vFuiI_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiu_t fn = (vFuiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuiU(x86emu_t *emu, uintptr_t fcn)
{
 vFuiU_t fn = (vFuiU_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuif(x86emu_t *emu, uintptr_t fcn)
{
 vFuif_t fn = (vFuif_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFuid(x86emu_t *emu, uintptr_t fcn)
{
 vFuid_t fn = (vFuid_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void vFuil(x86emu_t *emu, uintptr_t fcn)
{
 vFuil_t fn = (vFuil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuiL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiL_t fn = (vFuiL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuip_t fn = (vFuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFuWW(x86emu_t *emu, uintptr_t fcn)
{
 vFuWW_t fn = (vFuWW_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuui(x86emu_t *emu, uintptr_t fcn)
{
 vFuui_t fn = (vFuui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuuC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuC_t fn = (vFuuC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuu_t fn = (vFuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuuU(x86emu_t *emu, uintptr_t fcn)
{
 vFuuU_t fn = (vFuuU_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuuf(x86emu_t *emu, uintptr_t fcn)
{
 vFuuf_t fn = (vFuuf_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFuud(x86emu_t *emu, uintptr_t fcn)
{
 vFuud_t fn = (vFuud_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void vFuuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuuL_t fn = (vFuuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuup_t fn = (vFuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFuff(x86emu_t *emu, uintptr_t fcn)
{
 vFuff_t fn = (vFuff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFufp(x86emu_t *emu, uintptr_t fcn)
{
 vFufp_t fn = (vFufp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFudd(x86emu_t *emu, uintptr_t fcn)
{
 vFudd_t fn = (vFudd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFull(x86emu_t *emu, uintptr_t fcn)
{
 vFull_t fn = (vFull_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFulp(x86emu_t *emu, uintptr_t fcn)
{
 vFulp_t fn = (vFulp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFuLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuLL_t fn = (vFuLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFupu(x86emu_t *emu, uintptr_t fcn)
{
 vFupu_t fn = (vFupu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFupp(x86emu_t *emu, uintptr_t fcn)
{
 vFupp_t fn = (vFupp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFfff(x86emu_t *emu, uintptr_t fcn)
{
 vFfff_t fn = (vFfff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFfpp(x86emu_t *emu, uintptr_t fcn)
{
 vFfpp_t fn = (vFfpp_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFddd(x86emu_t *emu, uintptr_t fcn)
{
 vFddd_t fn = (vFddd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void vFdpp(x86emu_t *emu, uintptr_t fcn)
{
 vFdpp_t fn = (vFdpp_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFlii(x86emu_t *emu, uintptr_t fcn)
{
 vFlii_t fn = (vFlii_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFlip(x86emu_t *emu, uintptr_t fcn)
{
 vFlip_t fn = (vFlip_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFllp(x86emu_t *emu, uintptr_t fcn)
{
 vFllp_t fn = (vFllp_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFlpp(x86emu_t *emu, uintptr_t fcn)
{
 vFlpp_t fn = (vFlpp_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFLpL(x86emu_t *emu, uintptr_t fcn)
{
 vFLpL_t fn = (vFLpL_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpii(x86emu_t *emu, uintptr_t fcn)
{
 vFpii_t fn = (vFpii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpiI(x86emu_t *emu, uintptr_t fcn)
{
 vFpiI_t fn = (vFpiI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpiC(x86emu_t *emu, uintptr_t fcn)
{
 vFpiC_t fn = (vFpiC_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiu_t fn = (vFpiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpif(x86emu_t *emu, uintptr_t fcn)
{
 vFpif_t fn = (vFpif_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFpid(x86emu_t *emu, uintptr_t fcn)
{
 vFpid_t fn = (vFpid_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void vFpip(x86emu_t *emu, uintptr_t fcn)
{
 vFpip_t fn = (vFpip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFpui(x86emu_t *emu, uintptr_t fcn)
{
 vFpui_t fn = (vFpui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpuI(x86emu_t *emu, uintptr_t fcn)
{
 vFpuI_t fn = (vFpuI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuu_t fn = (vFpuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpuU(x86emu_t *emu, uintptr_t fcn)
{
 vFpuU_t fn = (vFpuU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpuL(x86emu_t *emu, uintptr_t fcn)
{
 vFpuL_t fn = (vFpuL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpup(x86emu_t *emu, uintptr_t fcn)
{
 vFpup_t fn = (vFpup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFpUi(x86emu_t *emu, uintptr_t fcn)
{
 vFpUi_t fn = (vFpUi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpUu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUu_t fn = (vFpUu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpUU(x86emu_t *emu, uintptr_t fcn)
{
 vFpUU_t fn = (vFpUU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpUp(x86emu_t *emu, uintptr_t fcn)
{
 vFpUp_t fn = (vFpUp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpUP(x86emu_t *emu, uintptr_t fcn)
{
 vFpUP_t fn = (vFpUP_t)fcn;
 void *arg16 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 16));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), arg16);
 VulkanTox86(arg16);
}
void vFpff(x86emu_t *emu, uintptr_t fcn)
{
 vFpff_t fn = (vFpff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void vFpdd(x86emu_t *emu, uintptr_t fcn)
{
 vFpdd_t fn = (vFpdd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFpll(x86emu_t *emu, uintptr_t fcn)
{
 vFpll_t fn = (vFpll_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFplp(x86emu_t *emu, uintptr_t fcn)
{
 vFplp_t fn = (vFplp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFpLi(x86emu_t *emu, uintptr_t fcn)
{
 vFpLi_t fn = (vFpLi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpLL(x86emu_t *emu, uintptr_t fcn)
{
 vFpLL_t fn = (vFpLL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFpLp(x86emu_t *emu, uintptr_t fcn)
{
 vFpLp_t fn = (vFpLp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppi_t fn = (vFppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFppu(x86emu_t *emu, uintptr_t fcn)
{
 vFppu_t fn = (vFppu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFppU(x86emu_t *emu, uintptr_t fcn)
{
 vFppU_t fn = (vFppU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFppd(x86emu_t *emu, uintptr_t fcn)
{
 vFppd_t fn = (vFppd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void vFppL(x86emu_t *emu, uintptr_t fcn)
{
 vFppL_t fn = (vFppL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppp_t fn = (vFppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFppV(x86emu_t *emu, uintptr_t fcn)
{
 vFppV_t fn = (vFppV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void vFppG(x86emu_t *emu, uintptr_t fcn)
{
 vFppG_t fn = (vFppG_t)fcn;
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), &arg12);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void vFpPp(x86emu_t *emu, uintptr_t fcn)
{
 vFpPp_t fn = (vFpPp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg8);
}
void vFpPP(x86emu_t *emu, uintptr_t fcn)
{
 vFpPP_t fn = (vFpPP_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, arg12);
 VulkanTox86(arg8);
 VulkanTox86(arg12);
}
void iFEiw(x86emu_t *emu, uintptr_t fcn)
{
 iFEiw_t fn = (iFEiw_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFEip(x86emu_t *emu, uintptr_t fcn)
{
 iFEip_t fn = (iFEip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFEWW(x86emu_t *emu, uintptr_t fcn)
{
 iFEWW_t fn = (iFEWW_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFEup(x86emu_t *emu, uintptr_t fcn)
{
 iFEup_t fn = (iFEup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFELp(x86emu_t *emu, uintptr_t fcn)
{
 iFELp_t fn = (iFELp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFEpi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpi_t fn = (iFEpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFEpL(x86emu_t *emu, uintptr_t fcn)
{
 iFEpL_t fn = (iFEpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8));
}
void iFEpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpp_t fn = (iFEpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFEpV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpV_t fn = (iFEpV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void iFESp(x86emu_t *emu, uintptr_t fcn)
{
 iFESp_t fn = (iFESp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void iFwww(x86emu_t *emu, uintptr_t fcn)
{
 iFwww_t fn = (iFwww_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFwpp(x86emu_t *emu, uintptr_t fcn)
{
 iFwpp_t fn = (iFwpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFiwC(x86emu_t *emu, uintptr_t fcn)
{
 iFiwC_t fn = (iFiwC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiii(x86emu_t *emu, uintptr_t fcn)
{
 iFiii_t fn = (iFiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiiI(x86emu_t *emu, uintptr_t fcn)
{
 iFiiI_t fn = (iFiiI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFiiu_t fn = (iFiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiip_t fn = (iFiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFiiO(x86emu_t *emu, uintptr_t fcn)
{
 iFiiO_t fn = (iFiiO_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 12)));
}
void iFiII(x86emu_t *emu, uintptr_t fcn)
{
 iFiII_t fn = (iFiII_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiui(x86emu_t *emu, uintptr_t fcn)
{
 iFiui_t fn = (iFiui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFiuu_t fn = (iFiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFiup(x86emu_t *emu, uintptr_t fcn)
{
 iFiup_t fn = (iFiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFiLN(x86emu_t *emu, uintptr_t fcn)
{
 iFiLN_t fn = (iFiLN_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFipi(x86emu_t *emu, uintptr_t fcn)
{
 iFipi_t fn = (iFipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFipu(x86emu_t *emu, uintptr_t fcn)
{
 iFipu_t fn = (iFipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFipL(x86emu_t *emu, uintptr_t fcn)
{
 iFipL_t fn = (iFipL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFipp(x86emu_t *emu, uintptr_t fcn)
{
 iFipp_t fn = (iFipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFCiW(x86emu_t *emu, uintptr_t fcn)
{
 iFCiW_t fn = (iFCiW_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFuwp_t fn = (iFuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFuii(x86emu_t *emu, uintptr_t fcn)
{
 iFuii_t fn = (iFuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFuip(x86emu_t *emu, uintptr_t fcn)
{
 iFuip_t fn = (iFuip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFuui(x86emu_t *emu, uintptr_t fcn)
{
 iFuui_t fn = (iFuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFuuu_t fn = (iFuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFuup(x86emu_t *emu, uintptr_t fcn)
{
 iFuup_t fn = (iFuup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFuLp(x86emu_t *emu, uintptr_t fcn)
{
 iFuLp_t fn = (iFuLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFupi(x86emu_t *emu, uintptr_t fcn)
{
 iFupi_t fn = (iFupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFupp(x86emu_t *emu, uintptr_t fcn)
{
 iFupp_t fn = (iFupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFfff(x86emu_t *emu, uintptr_t fcn)
{
 iFfff_t fn = (iFfff_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void iFpwp(x86emu_t *emu, uintptr_t fcn)
{
 iFpwp_t fn = (iFpwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFpii(x86emu_t *emu, uintptr_t fcn)
{
 iFpii_t fn = (iFpii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpiI(x86emu_t *emu, uintptr_t fcn)
{
 iFpiI_t fn = (iFpiI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiu_t fn = (iFpiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpiU(x86emu_t *emu, uintptr_t fcn)
{
 iFpiU_t fn = (iFpiU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpil(x86emu_t *emu, uintptr_t fcn)
{
 iFpil_t fn = (iFpil_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpiL(x86emu_t *emu, uintptr_t fcn)
{
 iFpiL_t fn = (iFpiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpip(x86emu_t *emu, uintptr_t fcn)
{
 iFpip_t fn = (iFpip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFpiV(x86emu_t *emu, uintptr_t fcn)
{
 iFpiV_t fn = (iFpiV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFpIi(x86emu_t *emu, uintptr_t fcn)
{
 iFpIi_t fn = (iFpIi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpII(x86emu_t *emu, uintptr_t fcn)
{
 iFpII_t fn = (iFpII_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpCp(x86emu_t *emu, uintptr_t fcn)
{
 iFpCp_t fn = (iFpCp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFpui(x86emu_t *emu, uintptr_t fcn)
{
 iFpui_t fn = (iFpui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuu_t fn = (iFpuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpuU(x86emu_t *emu, uintptr_t fcn)
{
 iFpuU_t fn = (iFpuU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpuL(x86emu_t *emu, uintptr_t fcn)
{
 iFpuL_t fn = (iFpuL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpup(x86emu_t *emu, uintptr_t fcn)
{
 iFpup_t fn = (iFpup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFpuV(x86emu_t *emu, uintptr_t fcn)
{
 iFpuV_t fn = (iFpuV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFpu2(x86emu_t *emu, uintptr_t fcn)
{
 iFpu2_t fn = (iFpu2_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), (_2uint_struct_t){*(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12 + 4)});
}
void iFpuP(x86emu_t *emu, uintptr_t fcn)
{
 iFpuP_t fn = (iFpuP_t)fcn;
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), arg12);
 VulkanTox86(arg12);
}
void iFpUi(x86emu_t *emu, uintptr_t fcn)
{
 iFpUi_t fn = (iFpUi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpUU(x86emu_t *emu, uintptr_t fcn)
{
 iFpUU_t fn = (iFpUU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpUp(x86emu_t *emu, uintptr_t fcn)
{
 iFpUp_t fn = (iFpUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpUP(x86emu_t *emu, uintptr_t fcn)
{
 iFpUP_t fn = (iFpUP_t)fcn;
 void *arg16 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), arg16);
 VulkanTox86(arg16);
}
void iFpfu(x86emu_t *emu, uintptr_t fcn)
{
 iFpfu_t fn = (iFpfu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpff(x86emu_t *emu, uintptr_t fcn)
{
 iFpff_t fn = (iFpff_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void iFpdd(x86emu_t *emu, uintptr_t fcn)
{
 iFpdd_t fn = (iFpdd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void iFpli(x86emu_t *emu, uintptr_t fcn)
{
 iFpli_t fn = (iFpli_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpll(x86emu_t *emu, uintptr_t fcn)
{
 iFpll_t fn = (iFpll_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFplp(x86emu_t *emu, uintptr_t fcn)
{
 iFplp_t fn = (iFplp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFpLi(x86emu_t *emu, uintptr_t fcn)
{
 iFpLi_t fn = (iFpLi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpLL(x86emu_t *emu, uintptr_t fcn)
{
 iFpLL_t fn = (iFpLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpLp(x86emu_t *emu, uintptr_t fcn)
{
 iFpLp_t fn = (iFpLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFppi(x86emu_t *emu, uintptr_t fcn)
{
 iFppi_t fn = (iFppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppI(x86emu_t *emu, uintptr_t fcn)
{
 iFppI_t fn = (iFppI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppC(x86emu_t *emu, uintptr_t fcn)
{
 iFppC_t fn = (iFppC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppW(x86emu_t *emu, uintptr_t fcn)
{
 iFppW_t fn = (iFppW_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppu(x86emu_t *emu, uintptr_t fcn)
{
 iFppu_t fn = (iFppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppU(x86emu_t *emu, uintptr_t fcn)
{
 iFppU_t fn = (iFppU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppd(x86emu_t *emu, uintptr_t fcn)
{
 iFppd_t fn = (iFppd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void iFppl(x86emu_t *emu, uintptr_t fcn)
{
 iFppl_t fn = (iFppl_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppL(x86emu_t *emu, uintptr_t fcn)
{
 iFppL_t fn = (iFppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppp_t fn = (iFppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFppV(x86emu_t *emu, uintptr_t fcn)
{
 iFppV_t fn = (iFppV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFppP(x86emu_t *emu, uintptr_t fcn)
{
 iFppP_t fn = (iFppP_t)fcn;
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), arg12);
 VulkanTox86(arg12);
}
void iFppG(x86emu_t *emu, uintptr_t fcn)
{
 iFppG_t fn = (iFppG_t)fcn;
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), &arg12);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void iFpOu(x86emu_t *emu, uintptr_t fcn)
{
 iFpOu_t fn = (iFpOu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 8)), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFpPU(x86emu_t *emu, uintptr_t fcn)
{
 iFpPU_t fn = (iFpPU_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg8);
}
void iFpPp(x86emu_t *emu, uintptr_t fcn)
{
 iFpPp_t fn = (iFpPp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg8);
}
void iFpPP(x86emu_t *emu, uintptr_t fcn)
{
 iFpPP_t fn = (iFpPP_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, arg12);
 VulkanTox86(arg8);
 VulkanTox86(arg12);
}
void iFpGG(x86emu_t *emu, uintptr_t fcn)
{
 iFpGG_t fn = (iFpGG_t)fcn;
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), &arg8, &arg12);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void iFSpi(x86emu_t *emu, uintptr_t fcn)
{
 iFSpi_t fn = (iFSpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFSpL(x86emu_t *emu, uintptr_t fcn)
{
 iFSpL_t fn = (iFSpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void IFiIi(x86emu_t *emu, uintptr_t fcn)
{
 IFiIi_t fn = (IFiIi_t)fcn;
 ui64_t r;
 r.i = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFpIi(x86emu_t *emu, uintptr_t fcn)
{
 IFpIi_t fn = (IFpIi_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFppi(x86emu_t *emu, uintptr_t fcn)
{
 IFppi_t fn = (IFppi_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFppI(x86emu_t *emu, uintptr_t fcn)
{
 IFppI_t fn = (IFppI_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFppu(x86emu_t *emu, uintptr_t fcn)
{
 IFppu_t fn = (IFppu_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFSIi(x86emu_t *emu, uintptr_t fcn)
{
 IFSIi_t fn = (IFSIi_t)fcn;
 ui64_t r;
 r.i = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void CFipp(x86emu_t *emu, uintptr_t fcn)
{
 CFipp_t fn = (CFipp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void CFuff(x86emu_t *emu, uintptr_t fcn)
{
 CFuff_t fn = (CFuff_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void CFuLu(x86emu_t *emu, uintptr_t fcn)
{
 CFuLu_t fn = (CFuLu_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFEpW(x86emu_t *emu, uintptr_t fcn)
{
 uFEpW_t fn = (uFEpW_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFEpu(x86emu_t *emu, uintptr_t fcn)
{
 uFEpu_t fn = (uFEpu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFEpU(x86emu_t *emu, uintptr_t fcn)
{
 uFEpU_t fn = (uFEpU_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8));
}
void uFEpp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpp_t fn = (uFEpp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void uFipu(x86emu_t *emu, uintptr_t fcn)
{
 uFipu_t fn = (uFipu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFuip(x86emu_t *emu, uintptr_t fcn)
{
 uFuip_t fn = (uFuip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFuuu(x86emu_t *emu, uintptr_t fcn)
{
 uFuuu_t fn = (uFuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFuup(x86emu_t *emu, uintptr_t fcn)
{
 uFuup_t fn = (uFuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFufp(x86emu_t *emu, uintptr_t fcn)
{
 uFufp_t fn = (uFufp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFupi(x86emu_t *emu, uintptr_t fcn)
{
 uFupi_t fn = (uFupi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFupu(x86emu_t *emu, uintptr_t fcn)
{
 uFupu_t fn = (uFupu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFupp(x86emu_t *emu, uintptr_t fcn)
{
 uFupp_t fn = (uFupp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFpii(x86emu_t *emu, uintptr_t fcn)
{
 uFpii_t fn = (uFpii_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpip(x86emu_t *emu, uintptr_t fcn)
{
 uFpip_t fn = (uFpip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFpCi(x86emu_t *emu, uintptr_t fcn)
{
 uFpCi_t fn = (uFpCi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpWi(x86emu_t *emu, uintptr_t fcn)
{
 uFpWi_t fn = (uFpWi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpWu(x86emu_t *emu, uintptr_t fcn)
{
 uFpWu_t fn = (uFpWu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpWf(x86emu_t *emu, uintptr_t fcn)
{
 uFpWf_t fn = (uFpWf_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void uFpWp(x86emu_t *emu, uintptr_t fcn)
{
 uFpWp_t fn = (uFpWp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFpui(x86emu_t *emu, uintptr_t fcn)
{
 uFpui_t fn = (uFpui_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpuC(x86emu_t *emu, uintptr_t fcn)
{
 uFpuC_t fn = (uFpuC_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpuu(x86emu_t *emu, uintptr_t fcn)
{
 uFpuu_t fn = (uFpuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpuL(x86emu_t *emu, uintptr_t fcn)
{
 uFpuL_t fn = (uFpuL_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpup(x86emu_t *emu, uintptr_t fcn)
{
 uFpup_t fn = (uFpup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFpfu(x86emu_t *emu, uintptr_t fcn)
{
 uFpfu_t fn = (uFpfu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFpLp(x86emu_t *emu, uintptr_t fcn)
{
 uFpLp_t fn = (uFpLp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFppi(x86emu_t *emu, uintptr_t fcn)
{
 uFppi_t fn = (uFppi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFppu(x86emu_t *emu, uintptr_t fcn)
{
 uFppu_t fn = (uFppu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppp_t fn = (uFppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void UFUUU(x86emu_t *emu, uintptr_t fcn)
{
 UFUUU_t fn = (UFUUU_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFpiU(x86emu_t *emu, uintptr_t fcn)
{
 UFpiU_t fn = (UFpiU_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFppi(x86emu_t *emu, uintptr_t fcn)
{
 UFppi_t fn = (UFppi_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFppu(x86emu_t *emu, uintptr_t fcn)
{
 UFppu_t fn = (UFppu_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void fFuii(x86emu_t *emu, uintptr_t fcn)
{
 fFuii_t fn = (fFuii_t)fcn;
 float fl = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFfff(x86emu_t *emu, uintptr_t fcn)
{
 fFfff_t fn = (fFfff_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFffp(x86emu_t *emu, uintptr_t fcn)
{
 fFffp_t fn = (fFffp_t)fcn;
 float fl = fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFppu(x86emu_t *emu, uintptr_t fcn)
{
 fFppu_t fn = (fFppu_t)fcn;
 float fl = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void fFppp(x86emu_t *emu, uintptr_t fcn)
{
 fFppp_t fn = (fFppp_t)fcn;
 float fl = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = fl;
}
void dFddd(x86emu_t *emu, uintptr_t fcn)
{
 dFddd_t fn = (dFddd_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFddp(x86emu_t *emu, uintptr_t fcn)
{
 dFddp_t fn = (dFddp_t)fcn;
 double db = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFpdd(x86emu_t *emu, uintptr_t fcn)
{
 dFpdd_t fn = (dFpdd_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFppi(x86emu_t *emu, uintptr_t fcn)
{
 dFppi_t fn = (dFppi_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFppu(x86emu_t *emu, uintptr_t fcn)
{
 dFppu_t fn = (dFppu_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void dFppp(x86emu_t *emu, uintptr_t fcn)
{
 dFppp_t fn = (dFppp_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void lFipi(x86emu_t *emu, uintptr_t fcn)
{
 lFipi_t fn = (lFipi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFipL(x86emu_t *emu, uintptr_t fcn)
{
 lFipL_t fn = (lFipL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFlll(x86emu_t *emu, uintptr_t fcn)
{
 lFlll_t fn = (lFlll_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFlpi(x86emu_t *emu, uintptr_t fcn)
{
 lFlpi_t fn = (lFlpi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFpli(x86emu_t *emu, uintptr_t fcn)
{
 lFpli_t fn = (lFpli_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFpLp(x86emu_t *emu, uintptr_t fcn)
{
 lFpLp_t fn = (lFpLp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void lFppi(x86emu_t *emu, uintptr_t fcn)
{
 lFppi_t fn = (lFppi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFppL(x86emu_t *emu, uintptr_t fcn)
{
 lFppL_t fn = (lFppL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void lFSpl(x86emu_t *emu, uintptr_t fcn)
{
 lFSpl_t fn = (lFSpl_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFiii(x86emu_t *emu, uintptr_t fcn)
{
 LFiii_t fn = (LFiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFLLl(x86emu_t *emu, uintptr_t fcn)
{
 LFLLl_t fn = (LFLLl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFLpu(x86emu_t *emu, uintptr_t fcn)
{
 LFLpu_t fn = (LFLpu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFLpL(x86emu_t *emu, uintptr_t fcn)
{
 LFLpL_t fn = (LFLpL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFpii(x86emu_t *emu, uintptr_t fcn)
{
 LFpii_t fn = (LFpii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFpip(x86emu_t *emu, uintptr_t fcn)
{
 LFpip_t fn = (LFpip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void LFpLi(x86emu_t *emu, uintptr_t fcn)
{
 LFpLi_t fn = (LFpLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFpLp(x86emu_t *emu, uintptr_t fcn)
{
 LFpLp_t fn = (LFpLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void LFppi(x86emu_t *emu, uintptr_t fcn)
{
 LFppi_t fn = (LFppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFppL(x86emu_t *emu, uintptr_t fcn)
{
 LFppL_t fn = (LFppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void LFppp(x86emu_t *emu, uintptr_t fcn)
{
 LFppp_t fn = (LFppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void LFSpL(x86emu_t *emu, uintptr_t fcn)
{
 LFSpL_t fn = (LFSpL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEip(x86emu_t *emu, uintptr_t fcn)
{
 pFEip_t fn = (pFEip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFEiV(x86emu_t *emu, uintptr_t fcn)
{
 pFEiV_t fn = (pFEiV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFEup(x86emu_t *emu, uintptr_t fcn)
{
 pFEup_t fn = (pFEup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFEpi(x86emu_t *emu, uintptr_t fcn)
{
 pFEpi_t fn = (pFEpi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFEpu(x86emu_t *emu, uintptr_t fcn)
{
 pFEpu_t fn = (pFEpu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8));
}
void pFEpp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpp_t fn = (pFEpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8));
}
void pFEpV(x86emu_t *emu, uintptr_t fcn)
{
 pFEpV_t fn = (pFEpV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFiii(x86emu_t *emu, uintptr_t fcn)
{
 pFiii_t fn = (pFiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFiiu_t fn = (pFiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFiip(x86emu_t *emu, uintptr_t fcn)
{
 pFiip_t fn = (pFiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFiIi(x86emu_t *emu, uintptr_t fcn)
{
 pFiIi_t fn = (pFiIi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFiIp(x86emu_t *emu, uintptr_t fcn)
{
 pFiIp_t fn = (pFiIp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFiup(x86emu_t *emu, uintptr_t fcn)
{
 pFiup_t fn = (pFiup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFipi(x86emu_t *emu, uintptr_t fcn)
{
 pFipi_t fn = (pFipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFipu(x86emu_t *emu, uintptr_t fcn)
{
 pFipu_t fn = (pFipu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFipp(x86emu_t *emu, uintptr_t fcn)
{
 pFipp_t fn = (pFipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFIpi(x86emu_t *emu, uintptr_t fcn)
{
 pFIpi_t fn = (pFIpi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int64_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFCiW(x86emu_t *emu, uintptr_t fcn)
{
 pFCiW_t fn = (pFCiW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFWWW(x86emu_t *emu, uintptr_t fcn)
{
 pFWWW_t fn = (pFWWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFuui(x86emu_t *emu, uintptr_t fcn)
{
 pFuui_t fn = (pFuui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFuuu_t fn = (pFuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFulu(x86emu_t *emu, uintptr_t fcn)
{
 pFulu_t fn = (pFulu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFupi(x86emu_t *emu, uintptr_t fcn)
{
 pFupi_t fn = (pFupi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFupL(x86emu_t *emu, uintptr_t fcn)
{
 pFupL_t fn = (pFupL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFUpi(x86emu_t *emu, uintptr_t fcn)
{
 pFUpi_t fn = (pFUpi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFdUU(x86emu_t *emu, uintptr_t fcn)
{
 pFdUU_t fn = (pFdUU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFddd(x86emu_t *emu, uintptr_t fcn)
{
 pFddd_t fn = (pFddd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void pFLLp(x86emu_t *emu, uintptr_t fcn)
{
 pFLLp_t fn = (pFLLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFLpp_t fn = (pFLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFpii(x86emu_t *emu, uintptr_t fcn)
{
 pFpii_t fn = (pFpii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpiu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiu_t fn = (pFpiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpiU(x86emu_t *emu, uintptr_t fcn)
{
 pFpiU_t fn = (pFpiU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpid(x86emu_t *emu, uintptr_t fcn)
{
 pFpid_t fn = (pFpid_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void pFpil(x86emu_t *emu, uintptr_t fcn)
{
 pFpil_t fn = (pFpil_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpiL(x86emu_t *emu, uintptr_t fcn)
{
 pFpiL_t fn = (pFpiL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpip(x86emu_t *emu, uintptr_t fcn)
{
 pFpip_t fn = (pFpip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFpIi(x86emu_t *emu, uintptr_t fcn)
{
 pFpIi_t fn = (pFpIi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpCu(x86emu_t *emu, uintptr_t fcn)
{
 pFpCu_t fn = (pFpCu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpWW(x86emu_t *emu, uintptr_t fcn)
{
 pFpWW_t fn = (pFpWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpui(x86emu_t *emu, uintptr_t fcn)
{
 pFpui_t fn = (pFpui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpuu_t fn = (pFpuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpuL(x86emu_t *emu, uintptr_t fcn)
{
 pFpuL_t fn = (pFpuL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpup(x86emu_t *emu, uintptr_t fcn)
{
 pFpup_t fn = (pFpup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFpuG(x86emu_t *emu, uintptr_t fcn)
{
 pFpuG_t fn = (pFpuG_t)fcn;
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), &arg12);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void pFpUi(x86emu_t *emu, uintptr_t fcn)
{
 pFpUi_t fn = (pFpUi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpUp(x86emu_t *emu, uintptr_t fcn)
{
 pFpUp_t fn = (pFpUp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpdu(x86emu_t *emu, uintptr_t fcn)
{
 pFpdu_t fn = (pFpdu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpdd(x86emu_t *emu, uintptr_t fcn)
{
 pFpdd_t fn = (pFpdd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void pFplC(x86emu_t *emu, uintptr_t fcn)
{
 pFplC_t fn = (pFplC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFplu(x86emu_t *emu, uintptr_t fcn)
{
 pFplu_t fn = (pFplu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpll(x86emu_t *emu, uintptr_t fcn)
{
 pFpll_t fn = (pFpll_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFplp(x86emu_t *emu, uintptr_t fcn)
{
 pFplp_t fn = (pFplp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFpLu(x86emu_t *emu, uintptr_t fcn)
{
 pFpLu_t fn = (pFpLu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpLL(x86emu_t *emu, uintptr_t fcn)
{
 pFpLL_t fn = (pFpLL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFpLp(x86emu_t *emu, uintptr_t fcn)
{
 pFpLp_t fn = (pFpLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFppi(x86emu_t *emu, uintptr_t fcn)
{
 pFppi_t fn = (pFppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppI(x86emu_t *emu, uintptr_t fcn)
{
 pFppI_t fn = (pFppI_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppC(x86emu_t *emu, uintptr_t fcn)
{
 pFppC_t fn = (pFppC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppu(x86emu_t *emu, uintptr_t fcn)
{
 pFppu_t fn = (pFppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppU(x86emu_t *emu, uintptr_t fcn)
{
 pFppU_t fn = (pFppU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppf(x86emu_t *emu, uintptr_t fcn)
{
 pFppf_t fn = (pFppf_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12));
}
void pFppl(x86emu_t *emu, uintptr_t fcn)
{
 pFppl_t fn = (pFppl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppL(x86emu_t *emu, uintptr_t fcn)
{
 pFppL_t fn = (pFppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppp_t fn = (pFppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFppV(x86emu_t *emu, uintptr_t fcn)
{
 pFppV_t fn = (pFppV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void pFpOM(x86emu_t *emu, uintptr_t fcn)
{
 pFpOM_t fn = (pFpOM_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 8)), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 12 + 4));
}
void pFpss(x86emu_t *emu, uintptr_t fcn)
{
 pFpss_t fn = (pFpss_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 8));
}
void pFSpl(x86emu_t *emu, uintptr_t fcn)
{
 pFSpl_t fn = (pFSpl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFSpp(x86emu_t *emu, uintptr_t fcn)
{
 pFSpp_t fn = (pFSpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEiip(x86emu_t *emu, uintptr_t fcn)
{
 vFEiip_t fn = (vFEiip_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEipp(x86emu_t *emu, uintptr_t fcn)
{
 vFEipp_t fn = (vFEipp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEipV(x86emu_t *emu, uintptr_t fcn)
{
 vFEipV_t fn = (vFEipV_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void vFEpii(x86emu_t *emu, uintptr_t fcn)
{
 vFEpii_t fn = (vFEpii_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFEpiL(x86emu_t *emu, uintptr_t fcn)
{
 vFEpiL_t fn = (vFEpiL_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFEpip(x86emu_t *emu, uintptr_t fcn)
{
 vFEpip_t fn = (vFEpip_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEpuu(x86emu_t *emu, uintptr_t fcn)
{
 vFEpuu_t fn = (vFEpuu_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void vFEpup(x86emu_t *emu, uintptr_t fcn)
{
 vFEpup_t fn = (vFEpup_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEpUp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpUp_t fn = (vFEpUp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppp_t fn = (vFEppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void vFEppV(x86emu_t *emu, uintptr_t fcn)
{
 vFEppV_t fn = (vFEppV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void vFEpPp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpPp_t fn = (vFEpPp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg8);
}
void vFcccc(x86emu_t *emu, uintptr_t fcn)
{
 vFcccc_t fn = (vFcccc_t)fcn;
 fn(*(int8_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8), *(int8_t *)(emu->regs[_SP].dword[0] + 12), *(int8_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFwwww(x86emu_t *emu, uintptr_t fcn)
{
 vFwwww_t fn = (vFwwww_t)fcn;
 fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiii_t fn = (vFiiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFiiip_t fn = (vFiiip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiiCp(x86emu_t *emu, uintptr_t fcn)
{
 vFiiCp_t fn = (vFiiCp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiill(x86emu_t *emu, uintptr_t fcn)
{
 vFiill_t fn = (vFiill_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFiipp_t fn = (vFiipp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiipV(x86emu_t *emu, uintptr_t fcn)
{
 vFiipV_t fn = (vFiipV_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void vFiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFiuip_t fn = (vFiuip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFiuuu_t fn = (vFiuuu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFiulp(x86emu_t *emu, uintptr_t fcn)
{
 vFiulp_t fn = (vFiulp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiupV(x86emu_t *emu, uintptr_t fcn)
{
 vFiupV_t fn = (vFiupV_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void vFifff(x86emu_t *emu, uintptr_t fcn)
{
 vFifff_t fn = (vFifff_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFiddd(x86emu_t *emu, uintptr_t fcn)
{
 vFiddd_t fn = (vFiddd_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24));
}
void vFilip(x86emu_t *emu, uintptr_t fcn)
{
 vFilip_t fn = (vFilip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFilll(x86emu_t *emu, uintptr_t fcn)
{
 vFilll_t fn = (vFilll_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFilpu(x86emu_t *emu, uintptr_t fcn)
{
 vFilpu_t fn = (vFilpu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFilpp(x86emu_t *emu, uintptr_t fcn)
{
 vFilpp_t fn = (vFilpp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFiLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFiLLL_t fn = (vFiLLL_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFipii(x86emu_t *emu, uintptr_t fcn)
{
 vFipii_t fn = (vFipii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFipup(x86emu_t *emu, uintptr_t fcn)
{
 vFipup_t fn = (vFipup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFipll(x86emu_t *emu, uintptr_t fcn)
{
 vFipll_t fn = (vFipll_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFippp(x86emu_t *emu, uintptr_t fcn)
{
 vFippp_t fn = (vFippp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFCCCC(x86emu_t *emu, uintptr_t fcn)
{
 vFCCCC_t fn = (vFCCCC_t)fcn;
 fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFWWWW(x86emu_t *emu, uintptr_t fcn)
{
 vFWWWW_t fn = (vFWWWW_t)fcn;
 fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuccc(x86emu_t *emu, uintptr_t fcn)
{
 vFuccc_t fn = (vFuccc_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8), *(int8_t *)(emu->regs[_SP].dword[0] + 12), *(int8_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuwww(x86emu_t *emu, uintptr_t fcn)
{
 vFuwww_t fn = (vFuwww_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiii_t fn = (vFuiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiu_t fn = (vFuiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiip_t fn = (vFuiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuiui(x86emu_t *emu, uintptr_t fcn)
{
 vFuiui_t fn = (vFuiui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiuC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuC_t fn = (vFuiuC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuu_t fn = (vFuiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiup_t fn = (vFuiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuifi(x86emu_t *emu, uintptr_t fcn)
{
 vFuifi_t fn = (vFuifi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuiff(x86emu_t *emu, uintptr_t fcn)
{
 vFuiff_t fn = (vFuiff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFuidd(x86emu_t *emu, uintptr_t fcn)
{
 vFuidd_t fn = (vFuidd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void vFuill(x86emu_t *emu, uintptr_t fcn)
{
 vFuill_t fn = (vFuill_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuilp(x86emu_t *emu, uintptr_t fcn)
{
 vFuilp_t fn = (vFuilp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuiLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiLL_t fn = (vFuiLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuipi(x86emu_t *emu, uintptr_t fcn)
{
 vFuipi_t fn = (vFuipi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuipu(x86emu_t *emu, uintptr_t fcn)
{
 vFuipu_t fn = (vFuipu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuipp(x86emu_t *emu, uintptr_t fcn)
{
 vFuipp_t fn = (vFuipp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuWWW(x86emu_t *emu, uintptr_t fcn)
{
 vFuWWW_t fn = (vFuWWW_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuii_t fn = (vFuuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiu_t fn = (vFuuiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuil(x86emu_t *emu, uintptr_t fcn)
{
 vFuuil_t fn = (vFuuil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuip_t fn = (vFuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuuCu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuCu_t fn = (vFuuCu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuCp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuCp_t fn = (vFuuCp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuuui(x86emu_t *emu, uintptr_t fcn)
{
 vFuuui_t fn = (vFuuui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuu_t fn = (vFuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuuf(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuf_t fn = (vFuuuf_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuud(x86emu_t *emu, uintptr_t fcn)
{
 vFuuud_t fn = (vFuuud_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuul(x86emu_t *emu, uintptr_t fcn)
{
 vFuuul_t fn = (vFuuul_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuup_t fn = (vFuuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuuff(x86emu_t *emu, uintptr_t fcn)
{
 vFuuff_t fn = (vFuuff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFuuli(x86emu_t *emu, uintptr_t fcn)
{
 vFuuli_t fn = (vFuuli_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuulp(x86emu_t *emu, uintptr_t fcn)
{
 vFuulp_t fn = (vFuulp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuuLl(x86emu_t *emu, uintptr_t fcn)
{
 vFuuLl_t fn = (vFuuLl_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuupi(x86emu_t *emu, uintptr_t fcn)
{
 vFuupi_t fn = (vFuupi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuupp(x86emu_t *emu, uintptr_t fcn)
{
 vFuupp_t fn = (vFuupp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFufff(x86emu_t *emu, uintptr_t fcn)
{
 vFufff_t fn = (vFufff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFuddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuddd_t fn = (vFuddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24));
}
void vFuluL(x86emu_t *emu, uintptr_t fcn)
{
 vFuluL_t fn = (vFuluL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFullC(x86emu_t *emu, uintptr_t fcn)
{
 vFullC_t fn = (vFullC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFulll(x86emu_t *emu, uintptr_t fcn)
{
 vFulll_t fn = (vFulll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFullp(x86emu_t *emu, uintptr_t fcn)
{
 vFullp_t fn = (vFullp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFulpi(x86emu_t *emu, uintptr_t fcn)
{
 vFulpi_t fn = (vFulpi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFulpu(x86emu_t *emu, uintptr_t fcn)
{
 vFulpu_t fn = (vFulpu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFulpp(x86emu_t *emu, uintptr_t fcn)
{
 vFulpp_t fn = (vFulpp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuLui(x86emu_t *emu, uintptr_t fcn)
{
 vFuLui_t fn = (vFuLui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuLup(x86emu_t *emu, uintptr_t fcn)
{
 vFuLup_t fn = (vFuLup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFuLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuLLL_t fn = (vFuLLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFupii(x86emu_t *emu, uintptr_t fcn)
{
 vFupii_t fn = (vFupii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuppi(x86emu_t *emu, uintptr_t fcn)
{
 vFuppi_t fn = (vFuppi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFuppu(x86emu_t *emu, uintptr_t fcn)
{
 vFuppu_t fn = (vFuppu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFUUpi(x86emu_t *emu, uintptr_t fcn)
{
 vFUUpi_t fn = (vFUUpi_t)fcn;
 fn(*(uint64_t *)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFffff(x86emu_t *emu, uintptr_t fcn)
{
 vFffff_t fn = (vFffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFdddd(x86emu_t *emu, uintptr_t fcn)
{
 vFdddd_t fn = (vFdddd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28));
}
void vFllii(x86emu_t *emu, uintptr_t fcn)
{
 vFllii_t fn = (vFllii_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFLppi(x86emu_t *emu, uintptr_t fcn)
{
 vFLppi_t fn = (vFLppi_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiii_t fn = (vFpiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiu_t fn = (vFpiiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpiip(x86emu_t *emu, uintptr_t fcn)
{
 vFpiip_t fn = (vFpiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiuu_t fn = (vFpiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpiuL(x86emu_t *emu, uintptr_t fcn)
{
 vFpiuL_t fn = (vFpiuL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpiup(x86emu_t *emu, uintptr_t fcn)
{
 vFpiup_t fn = (vFpiup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpiUu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiUu_t fn = (vFpiUu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiUU(x86emu_t *emu, uintptr_t fcn)
{
 vFpiUU_t fn = (vFpiUU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpifi(x86emu_t *emu, uintptr_t fcn)
{
 vFpifi_t fn = (vFpifi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpipi_t fn = (vFpipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpipu(x86emu_t *emu, uintptr_t fcn)
{
 vFpipu_t fn = (vFpipu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpipp_t fn = (vFpipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpipG(x86emu_t *emu, uintptr_t fcn)
{
 vFpipG_t fn = (vFpipG_t)fcn;
 my_GValue_t arg16;
 alignGValue(&arg16, *(void **)(emu->regs[_SP].dword[0] + 16));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), &arg16);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 16), &arg16);
}
void vFpIdi(x86emu_t *emu, uintptr_t fcn)
{
 vFpIdi_t fn = (vFpIdi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpCiW(x86emu_t *emu, uintptr_t fcn)
{
 vFpCiW_t fn = (vFpCiW_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpuip(x86emu_t *emu, uintptr_t fcn)
{
 vFpuip_t fn = (vFpuip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpuui(x86emu_t *emu, uintptr_t fcn)
{
 vFpuui_t fn = (vFpuui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuu_t fn = (vFpuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpuup(x86emu_t *emu, uintptr_t fcn)
{
 vFpuup_t fn = (vFpuup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpuuV(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuV_t fn = (vFpuuV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void vFpudd(x86emu_t *emu, uintptr_t fcn)
{
 vFpudd_t fn = (vFpudd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void vFpupp(x86emu_t *emu, uintptr_t fcn)
{
 vFpupp_t fn = (vFpupp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpupP(x86emu_t *emu, uintptr_t fcn)
{
 vFpupP_t fn = (vFpupP_t)fcn;
 void *arg16 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 16));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), arg16);
 VulkanTox86(arg16);
}
void vFpUui(x86emu_t *emu, uintptr_t fcn)
{
 vFpUui_t fn = (vFpUui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpUuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUuu_t fn = (vFpUuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpUup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUup_t fn = (vFpUup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpUUi(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUi_t fn = (vFpUUi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpUUu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUu_t fn = (vFpUUu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpUUp(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUp_t fn = (vFpUUp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpUpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpUpp_t fn = (vFpUpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpUPP(x86emu_t *emu, uintptr_t fcn)
{
 vFpUPP_t fn = (vFpUPP_t)fcn;
 void *arg16 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 16));
 void *arg20 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 20));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), arg16, arg20);
 VulkanTox86(arg16);
 VulkanTox86(arg20);
}
void vFpfff(x86emu_t *emu, uintptr_t fcn)
{
 vFpfff_t fn = (vFpfff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void vFpdii(x86emu_t *emu, uintptr_t fcn)
{
 vFpdii_t fn = (vFpdii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpddi(x86emu_t *emu, uintptr_t fcn)
{
 vFpddi_t fn = (vFpddi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpddd_t fn = (vFpddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24));
}
void vFplpp(x86emu_t *emu, uintptr_t fcn)
{
 vFplpp_t fn = (vFplpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFpLLL_t fn = (vFpLLL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppii(x86emu_t *emu, uintptr_t fcn)
{
 vFppii_t fn = (vFppii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppiu(x86emu_t *emu, uintptr_t fcn)
{
 vFppiu_t fn = (vFppiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppid(x86emu_t *emu, uintptr_t fcn)
{
 vFppid_t fn = (vFppid_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFppil(x86emu_t *emu, uintptr_t fcn)
{
 vFppil_t fn = (vFppil_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppiL(x86emu_t *emu, uintptr_t fcn)
{
 vFppiL_t fn = (vFppiL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppip(x86emu_t *emu, uintptr_t fcn)
{
 vFppip_t fn = (vFppip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFppiG(x86emu_t *emu, uintptr_t fcn)
{
 vFppiG_t fn = (vFppiG_t)fcn;
 my_GValue_t arg16;
 alignGValue(&arg16, *(void **)(emu->regs[_SP].dword[0] + 16));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), &arg16);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 16), &arg16);
}
void vFppui(x86emu_t *emu, uintptr_t fcn)
{
 vFppui_t fn = (vFppui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppuu_t fn = (vFppuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppup(x86emu_t *emu, uintptr_t fcn)
{
 vFppup_t fn = (vFppup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFppfi(x86emu_t *emu, uintptr_t fcn)
{
 vFppfi_t fn = (vFppfi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFppdu(x86emu_t *emu, uintptr_t fcn)
{
 vFppdu_t fn = (vFppdu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppdd(x86emu_t *emu, uintptr_t fcn)
{
 vFppdd_t fn = (vFppdd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void vFppdp(x86emu_t *emu, uintptr_t fcn)
{
 vFppdp_t fn = (vFppdp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpplp(x86emu_t *emu, uintptr_t fcn)
{
 vFpplp_t fn = (vFpplp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFppLp(x86emu_t *emu, uintptr_t fcn)
{
 vFppLp_t fn = (vFppLp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpppi_t fn = (vFpppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppI(x86emu_t *emu, uintptr_t fcn)
{
 vFpppI_t fn = (vFpppI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppu(x86emu_t *emu, uintptr_t fcn)
{
 vFpppu_t fn = (vFpppu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppU(x86emu_t *emu, uintptr_t fcn)
{
 vFpppU_t fn = (vFpppU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppd(x86emu_t *emu, uintptr_t fcn)
{
 vFpppd_t fn = (vFpppd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppL(x86emu_t *emu, uintptr_t fcn)
{
 vFpppL_t fn = (vFpppL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppp_t fn = (vFpppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFpppV(x86emu_t *emu, uintptr_t fcn)
{
 vFpppV_t fn = (vFpppV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void vFpppG(x86emu_t *emu, uintptr_t fcn)
{
 vFpppG_t fn = (vFpppG_t)fcn;
 my_GValue_t arg16;
 alignGValue(&arg16, *(void **)(emu->regs[_SP].dword[0] + 16));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), &arg16);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 16), &arg16);
}
void vFppGu(x86emu_t *emu, uintptr_t fcn)
{
 vFppGu_t fn = (vFppGu_t)fcn;
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), &arg12, *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void vFpPpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpPpp_t fn = (vFpPpp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 VulkanTox86(arg8);
}
void vFSppi(x86emu_t *emu, uintptr_t fcn)
{
 vFSppi_t fn = (vFSppi_t)fcn;
 fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void cFpiii(x86emu_t *emu, uintptr_t fcn)
{
 cFpiii_t fn = (cFpiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEiip(x86emu_t *emu, uintptr_t fcn)
{
 iFEiip_t fn = (iFEiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEiiN(x86emu_t *emu, uintptr_t fcn)
{
 iFEiiN_t fn = (iFEiiN_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEipL(x86emu_t *emu, uintptr_t fcn)
{
 iFEipL_t fn = (iFEipL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEipp_t fn = (iFEipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEupu(x86emu_t *emu, uintptr_t fcn)
{
 iFEupu_t fn = (iFEupu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEupp(x86emu_t *emu, uintptr_t fcn)
{
 iFEupp_t fn = (iFEupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFELup(x86emu_t *emu, uintptr_t fcn)
{
 iFELup_t fn = (iFELup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEpii(x86emu_t *emu, uintptr_t fcn)
{
 iFEpii_t fn = (iFEpii_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEpip(x86emu_t *emu, uintptr_t fcn)
{
 iFEpip_t fn = (iFEpip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEpuu(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuu_t fn = (iFEpuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEpup(x86emu_t *emu, uintptr_t fcn)
{
 iFEpup_t fn = (iFEpup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEpUp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpUp_t fn = (iFEpUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpLi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLi_t fn = (iFEpLi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEppi(x86emu_t *emu, uintptr_t fcn)
{
 iFEppi_t fn = (iFEppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEppu(x86emu_t *emu, uintptr_t fcn)
{
 iFEppu_t fn = (iFEppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEppd(x86emu_t *emu, uintptr_t fcn)
{
 iFEppd_t fn = (iFEppd_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12));
}
void iFEppL(x86emu_t *emu, uintptr_t fcn)
{
 iFEppL_t fn = (iFEppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppp_t fn = (iFEppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEppV(x86emu_t *emu, uintptr_t fcn)
{
 iFEppV_t fn = (iFEppV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFEpOu(x86emu_t *emu, uintptr_t fcn)
{
 iFEpOu_t fn = (iFEpOu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 8)), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void iFEpOV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpOV_t fn = (iFEpOV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 8)), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFEpPp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpPp_t fn = (iFEpPp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg8);
}
void iFEPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEPpp_t fn = (iFEPpp_t)fcn;
 void *arg4 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 4));
 emu->regs[_AX].dword[0] = fn(emu, arg4, *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
 VulkanTox86(arg4);
}
void iFwwww(x86emu_t *emu, uintptr_t fcn)
{
 iFwwww_t fn = (iFwwww_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFwppp(x86emu_t *emu, uintptr_t fcn)
{
 iFwppp_t fn = (iFwppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int16_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFiiii_t fn = (iFiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiu_t fn = (iFiiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiip_t fn = (iFiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFiiII(x86emu_t *emu, uintptr_t fcn)
{
 iFiiII_t fn = (iFiiII_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFiiui(x86emu_t *emu, uintptr_t fcn)
{
 iFiiui_t fn = (iFiiui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFiipi_t fn = (iFiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFiipp_t fn = (iFiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFiuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFiuwp_t fn = (iFiuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFiuii(x86emu_t *emu, uintptr_t fcn)
{
 iFiuii_t fn = (iFiuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiuui(x86emu_t *emu, uintptr_t fcn)
{
 iFiuui_t fn = (iFiuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFiLpL(x86emu_t *emu, uintptr_t fcn)
{
 iFiLpL_t fn = (iFiLpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFipii(x86emu_t *emu, uintptr_t fcn)
{
 iFipii_t fn = (iFipii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFipip(x86emu_t *emu, uintptr_t fcn)
{
 iFipip_t fn = (iFipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFipui(x86emu_t *emu, uintptr_t fcn)
{
 iFipui_t fn = (iFipui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFipup(x86emu_t *emu, uintptr_t fcn)
{
 iFipup_t fn = (iFipup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFipLi(x86emu_t *emu, uintptr_t fcn)
{
 iFipLi_t fn = (iFipLi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFipLp(x86emu_t *emu, uintptr_t fcn)
{
 iFipLp_t fn = (iFipLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFippi(x86emu_t *emu, uintptr_t fcn)
{
 iFippi_t fn = (iFippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFippu(x86emu_t *emu, uintptr_t fcn)
{
 iFippu_t fn = (iFippu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFippL(x86emu_t *emu, uintptr_t fcn)
{
 iFippL_t fn = (iFippL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFippp(x86emu_t *emu, uintptr_t fcn)
{
 iFippp_t fn = (iFippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFipON(x86emu_t *emu, uintptr_t fcn)
{
 iFipON_t fn = (iFipON_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), of_convert(*(int32_t *)(emu->regs[_SP].dword[0] + 12)), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFuiup(x86emu_t *emu, uintptr_t fcn)
{
 iFuiup_t fn = (iFuiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFuipu(x86emu_t *emu, uintptr_t fcn)
{
 iFuipu_t fn = (iFuipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFuipp(x86emu_t *emu, uintptr_t fcn)
{
 iFuipp_t fn = (iFuipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFupup(x86emu_t *emu, uintptr_t fcn)
{
 iFupup_t fn = (iFupup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFuppi(x86emu_t *emu, uintptr_t fcn)
{
 iFuppi_t fn = (iFuppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFuppp_t fn = (iFuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFLppp_t fn = (iFLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpwww(x86emu_t *emu, uintptr_t fcn)
{
 iFpwww_t fn = (iFpwww_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpwpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpwpp_t fn = (iFpwpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiii_t fn = (iFpiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiiI(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiI_t fn = (iFpiiI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiu_t fn = (iFpiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiid(x86emu_t *emu, uintptr_t fcn)
{
 iFpiid_t fn = (iFpiid_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiiL(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiL_t fn = (iFpiiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiip_t fn = (iFpiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuu_t fn = (iFpiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiuL(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuL_t fn = (iFpiuL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpiup(x86emu_t *emu, uintptr_t fcn)
{
 iFpiup_t fn = (iFpiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpiUp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiUp_t fn = (iFpiUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpild(x86emu_t *emu, uintptr_t fcn)
{
 iFpild_t fn = (iFpild_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void iFpipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpipi_t fn = (iFpipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpipC(x86emu_t *emu, uintptr_t fcn)
{
 iFpipC_t fn = (iFpipC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpipL(x86emu_t *emu, uintptr_t fcn)
{
 iFpipL_t fn = (iFpipL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipp_t fn = (iFpipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpipV(x86emu_t *emu, uintptr_t fcn)
{
 iFpipV_t fn = (iFpipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFpIip(x86emu_t *emu, uintptr_t fcn)
{
 iFpIip_t fn = (iFpIip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpCCC(x86emu_t *emu, uintptr_t fcn)
{
 iFpCCC_t fn = (iFpCCC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpCpi(x86emu_t *emu, uintptr_t fcn)
{
 iFpCpi_t fn = (iFpCpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpWWu(x86emu_t *emu, uintptr_t fcn)
{
 iFpWWu_t fn = (iFpWWu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuwp_t fn = (iFpuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpuii(x86emu_t *emu, uintptr_t fcn)
{
 iFpuii_t fn = (iFpuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiu_t fn = (iFpuiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuiL(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiL_t fn = (iFpuiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuip(x86emu_t *emu, uintptr_t fcn)
{
 iFpuip_t fn = (iFpuip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpuui(x86emu_t *emu, uintptr_t fcn)
{
 iFpuui_t fn = (iFpuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuu_t fn = (iFpuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuup(x86emu_t *emu, uintptr_t fcn)
{
 iFpuup_t fn = (iFpuup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpuUp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuUp_t fn = (iFpuUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuLL(x86emu_t *emu, uintptr_t fcn)
{
 iFpuLL_t fn = (iFpuLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuLp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuLp_t fn = (iFpuLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpupi(x86emu_t *emu, uintptr_t fcn)
{
 iFpupi_t fn = (iFpupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpupu(x86emu_t *emu, uintptr_t fcn)
{
 iFpupu_t fn = (iFpupu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpupp_t fn = (iFpupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpupV(x86emu_t *emu, uintptr_t fcn)
{
 iFpupV_t fn = (iFpupV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFpuPU(x86emu_t *emu, uintptr_t fcn)
{
 iFpuPU_t fn = (iFpuPU_t)fcn;
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), arg12, *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
 VulkanTox86(arg12);
}
void iFpUup(x86emu_t *emu, uintptr_t fcn)
{
 iFpUup_t fn = (iFpUup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpUUU(x86emu_t *emu, uintptr_t fcn)
{
 iFpUUU_t fn = (iFpUUU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpUpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpUpp_t fn = (iFpUpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFplii(x86emu_t *emu, uintptr_t fcn)
{
 iFplii_t fn = (iFplii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFplip(x86emu_t *emu, uintptr_t fcn)
{
 iFplip_t fn = (iFplip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpLpi(x86emu_t *emu, uintptr_t fcn)
{
 iFpLpi_t fn = (iFpLpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpLpL(x86emu_t *emu, uintptr_t fcn)
{
 iFpLpL_t fn = (iFpLpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppii(x86emu_t *emu, uintptr_t fcn)
{
 iFppii_t fn = (iFppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppiu_t fn = (iFppiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppiU(x86emu_t *emu, uintptr_t fcn)
{
 iFppiU_t fn = (iFppiU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppiL(x86emu_t *emu, uintptr_t fcn)
{
 iFppiL_t fn = (iFppiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppip(x86emu_t *emu, uintptr_t fcn)
{
 iFppip_t fn = (iFppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFppIL(x86emu_t *emu, uintptr_t fcn)
{
 iFppIL_t fn = (iFppIL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppCC(x86emu_t *emu, uintptr_t fcn)
{
 iFppCC_t fn = (iFppCC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppuw(x86emu_t *emu, uintptr_t fcn)
{
 iFppuw_t fn = (iFppuw_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppui(x86emu_t *emu, uintptr_t fcn)
{
 iFppui_t fn = (iFppui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppuW(x86emu_t *emu, uintptr_t fcn)
{
 iFppuW_t fn = (iFppuW_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppuu(x86emu_t *emu, uintptr_t fcn)
{
 iFppuu_t fn = (iFppuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppup(x86emu_t *emu, uintptr_t fcn)
{
 iFppup_t fn = (iFppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFppdp(x86emu_t *emu, uintptr_t fcn)
{
 iFppdp_t fn = (iFppdp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppll(x86emu_t *emu, uintptr_t fcn)
{
 iFppll_t fn = (iFppll_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpplp(x86emu_t *emu, uintptr_t fcn)
{
 iFpplp_t fn = (iFpplp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFppLi(x86emu_t *emu, uintptr_t fcn)
{
 iFppLi_t fn = (iFppLi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppLL(x86emu_t *emu, uintptr_t fcn)
{
 iFppLL_t fn = (iFppLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFppLp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLp_t fn = (iFppLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpppi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppi_t fn = (iFpppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpppC(x86emu_t *emu, uintptr_t fcn)
{
 iFpppC_t fn = (iFpppC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpppu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppu_t fn = (iFpppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpppU(x86emu_t *emu, uintptr_t fcn)
{
 iFpppU_t fn = (iFpppU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpppL(x86emu_t *emu, uintptr_t fcn)
{
 iFpppL_t fn = (iFpppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppp_t fn = (iFpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFpPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpPpp_t fn = (iFpPpp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 VulkanTox86(arg8);
}
void iFpGGi(x86emu_t *emu, uintptr_t fcn)
{
 iFpGGi_t fn = (iFpGGi_t)fcn;
 my_GValue_t arg8;
 alignGValue(&arg8, *(void **)(emu->regs[_SP].dword[0] + 8));
 my_GValue_t arg12;
 alignGValue(&arg12, *(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), &arg8, &arg12, *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 8), &arg8);
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 12), &arg12);
}
void IFEpIi(x86emu_t *emu, uintptr_t fcn)
{
 IFEpIi_t fn = (IFEpIi_t)fcn;
 ui64_t r;
 r.i = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFpIip(x86emu_t *emu, uintptr_t fcn)
{
 IFpIip_t fn = (IFpIip_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFppii(x86emu_t *emu, uintptr_t fcn)
{
 IFppii_t fn = (IFppii_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFppip(x86emu_t *emu, uintptr_t fcn)
{
 IFppip_t fn = (IFppip_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFpppp(x86emu_t *emu, uintptr_t fcn)
{
 IFpppp_t fn = (IFpppp_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void IFSIii(x86emu_t *emu, uintptr_t fcn)
{
 IFSIii_t fn = (IFSIii_t)fcn;
 ui64_t r;
 r.i = fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void CFuuff(x86emu_t *emu, uintptr_t fcn)
{
 CFuuff_t fn = (CFuuff_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void uFEipp(x86emu_t *emu, uintptr_t fcn)
{
 uFEipp_t fn = (uFEipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFEupp(x86emu_t *emu, uintptr_t fcn)
{
 uFEupp_t fn = (uFEupp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFEpup(x86emu_t *emu, uintptr_t fcn)
{
 uFEpup_t fn = (uFEpup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFEppu(x86emu_t *emu, uintptr_t fcn)
{
 uFEppu_t fn = (uFEppu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void uFEppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEppp_t fn = (uFEppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void uFifff(x86emu_t *emu, uintptr_t fcn)
{
 uFifff_t fn = (uFifff_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void uFippu(x86emu_t *emu, uintptr_t fcn)
{
 uFippu_t fn = (uFippu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFuuuu(x86emu_t *emu, uintptr_t fcn)
{
 uFuuuu_t fn = (uFuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpipu(x86emu_t *emu, uintptr_t fcn)
{
 uFpipu_t fn = (uFpipu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpipp(x86emu_t *emu, uintptr_t fcn)
{
 uFpipp_t fn = (uFpipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFpCCC(x86emu_t *emu, uintptr_t fcn)
{
 uFpCCC_t fn = (uFpCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpuip(x86emu_t *emu, uintptr_t fcn)
{
 uFpuip_t fn = (uFpuip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFpuuu(x86emu_t *emu, uintptr_t fcn)
{
 uFpuuu_t fn = (uFpuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpuup(x86emu_t *emu, uintptr_t fcn)
{
 uFpuup_t fn = (uFpuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFpupu(x86emu_t *emu, uintptr_t fcn)
{
 uFpupu_t fn = (uFpupu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFppiu(x86emu_t *emu, uintptr_t fcn)
{
 uFppiu_t fn = (uFppiu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFppip(x86emu_t *emu, uintptr_t fcn)
{
 uFppip_t fn = (uFppip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFppuu(x86emu_t *emu, uintptr_t fcn)
{
 uFppuu_t fn = (uFppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFppup(x86emu_t *emu, uintptr_t fcn)
{
 uFppup_t fn = (uFppup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFppLp(x86emu_t *emu, uintptr_t fcn)
{
 uFppLp_t fn = (uFppLp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFpppi(x86emu_t *emu, uintptr_t fcn)
{
 uFpppi_t fn = (uFpppi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpppu(x86emu_t *emu, uintptr_t fcn)
{
 uFpppu_t fn = (uFpppu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFpppp(x86emu_t *emu, uintptr_t fcn)
{
 uFpppp_t fn = (uFpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFpppV(x86emu_t *emu, uintptr_t fcn)
{
 uFpppV_t fn = (uFpppV_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void UFpipp(x86emu_t *emu, uintptr_t fcn)
{
 UFpipp_t fn = (UFpipp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFppii(x86emu_t *emu, uintptr_t fcn)
{
 UFppii_t fn = (UFppii_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFppip(x86emu_t *emu, uintptr_t fcn)
{
 UFppip_t fn = (UFppip_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFpppp(x86emu_t *emu, uintptr_t fcn)
{
 UFpppp_t fn = (UFpppp_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void UFSUii(x86emu_t *emu, uintptr_t fcn)
{
 UFSUii_t fn = (UFSUii_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void dFpppp(x86emu_t *emu, uintptr_t fcn)
{
 dFpppp_t fn = (dFpppp_t)fcn;
 double db = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 fpu_do_push(emu);
 emu->x87[emu->top].d = db;
}
void lFEpip(x86emu_t *emu, uintptr_t fcn)
{
 lFEpip_t fn = (lFEpip_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void lFiipL(x86emu_t *emu, uintptr_t fcn)
{
 lFiipL_t fn = (lFiipL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFipLi(x86emu_t *emu, uintptr_t fcn)
{
 lFipLi_t fn = (lFipLi_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFipLI(x86emu_t *emu, uintptr_t fcn)
{
 lFipLI_t fn = (lFipLI_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFipLl(x86emu_t *emu, uintptr_t fcn)
{
 lFipLl_t fn = (lFipLl_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFipLL(x86emu_t *emu, uintptr_t fcn)
{
 lFipLL_t fn = (lFipLL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFippL(x86emu_t *emu, uintptr_t fcn)
{
 lFippL_t fn = (lFippL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFpili(x86emu_t *emu, uintptr_t fcn)
{
 lFpili_t fn = (lFpili_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFpilp(x86emu_t *emu, uintptr_t fcn)
{
 lFpilp_t fn = (lFpilp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void lFpuip(x86emu_t *emu, uintptr_t fcn)
{
 lFpuip_t fn = (lFpuip_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void lFpupp(x86emu_t *emu, uintptr_t fcn)
{
 lFpupp_t fn = (lFpupp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void lFpppL(x86emu_t *emu, uintptr_t fcn)
{
 lFpppL_t fn = (lFpppL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFippp(x86emu_t *emu, uintptr_t fcn)
{
 LFippp_t fn = (LFippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFpLCL(x86emu_t *emu, uintptr_t fcn)
{
 LFpLCL_t fn = (LFpLCL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFpLLp(x86emu_t *emu, uintptr_t fcn)
{
 LFpLLp_t fn = (LFpLLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFpLpL(x86emu_t *emu, uintptr_t fcn)
{
 LFpLpL_t fn = (LFpLpL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFpLpp(x86emu_t *emu, uintptr_t fcn)
{
 LFpLpp_t fn = (LFpLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFppii(x86emu_t *emu, uintptr_t fcn)
{
 LFppii_t fn = (LFppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFppip(x86emu_t *emu, uintptr_t fcn)
{
 LFppip_t fn = (LFppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFppLu(x86emu_t *emu, uintptr_t fcn)
{
 LFppLu_t fn = (LFppLu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFppLL(x86emu_t *emu, uintptr_t fcn)
{
 LFppLL_t fn = (LFppLL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFppLp(x86emu_t *emu, uintptr_t fcn)
{
 LFppLp_t fn = (LFppLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFpppi(x86emu_t *emu, uintptr_t fcn)
{
 LFpppi_t fn = (LFpppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFpppL(x86emu_t *emu, uintptr_t fcn)
{
 LFpppL_t fn = (LFpppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void LFpppp(x86emu_t *emu, uintptr_t fcn)
{
 LFpppp_t fn = (LFpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEipi(x86emu_t *emu, uintptr_t fcn)
{
 pFEipi_t fn = (pFEipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEipp(x86emu_t *emu, uintptr_t fcn)
{
 pFEipp_t fn = (pFEipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFEipV(x86emu_t *emu, uintptr_t fcn)
{
 pFEipV_t fn = (pFEipV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void pFEupp(x86emu_t *emu, uintptr_t fcn)
{
 pFEupp_t fn = (pFEupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFEpii(x86emu_t *emu, uintptr_t fcn)
{
 pFEpii_t fn = (pFEpii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEpip(x86emu_t *emu, uintptr_t fcn)
{
 pFEpip_t fn = (pFEpip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFEplp(x86emu_t *emu, uintptr_t fcn)
{
 pFEplp_t fn = (pFEplp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFEppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEppi_t fn = (pFEppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEppC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppC_t fn = (pFEppC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEppu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppu_t fn = (pFEppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12));
}
void pFEppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppp_t fn = (pFEppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void pFEppV(x86emu_t *emu, uintptr_t fcn)
{
 pFEppV_t fn = (pFEppV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void pFiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFiiii_t fn = (pFiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFiiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFiiiu_t fn = (pFiiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFiiuu(x86emu_t *emu, uintptr_t fcn)
{
 pFiiuu_t fn = (pFiiuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFiiup(x86emu_t *emu, uintptr_t fcn)
{
 pFiiup_t fn = (pFiiup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFiipi(x86emu_t *emu, uintptr_t fcn)
{
 pFiipi_t fn = (pFiipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFiipp_t fn = (pFiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFiIIi(x86emu_t *emu, uintptr_t fcn)
{
 pFiIIi_t fn = (pFiIIi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFillu(x86emu_t *emu, uintptr_t fcn)
{
 pFillu_t fn = (pFillu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFipii(x86emu_t *emu, uintptr_t fcn)
{
 pFipii_t fn = (pFipii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFipip(x86emu_t *emu, uintptr_t fcn)
{
 pFipip_t fn = (pFipip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFipup(x86emu_t *emu, uintptr_t fcn)
{
 pFipup_t fn = (pFipup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFippi(x86emu_t *emu, uintptr_t fcn)
{
 pFippi_t fn = (pFippi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFippu(x86emu_t *emu, uintptr_t fcn)
{
 pFippu_t fn = (pFippu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFuuii(x86emu_t *emu, uintptr_t fcn)
{
 pFuuii_t fn = (pFuuii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFuuuu_t fn = (pFuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFullu(x86emu_t *emu, uintptr_t fcn)
{
 pFullu_t fn = (pFullu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFffff(x86emu_t *emu, uintptr_t fcn)
{
 pFffff_t fn = (pFffff_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void pFdipp(x86emu_t *emu, uintptr_t fcn)
{
 pFdipp_t fn = (pFdipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFdddd(x86emu_t *emu, uintptr_t fcn)
{
 pFdddd_t fn = (pFdddd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28));
}
void pFlfff(x86emu_t *emu, uintptr_t fcn)
{
 pFlfff_t fn = (pFlfff_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16));
}
void pFLiip(x86emu_t *emu, uintptr_t fcn)
{
 pFLiip_t fn = (pFLiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFLppp(x86emu_t *emu, uintptr_t fcn)
{
 pFLppp_t fn = (pFLppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpiii_t fn = (pFpiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiu_t fn = (pFpiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpiip(x86emu_t *emu, uintptr_t fcn)
{
 pFpiip_t fn = (pFpiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpiuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiuu_t fn = (pFpiuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpiLL(x86emu_t *emu, uintptr_t fcn)
{
 pFpiLL_t fn = (pFpiLL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpipd(x86emu_t *emu, uintptr_t fcn)
{
 pFpipd_t fn = (pFpipd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16));
}
void pFpipp(x86emu_t *emu, uintptr_t fcn)
{
 pFpipp_t fn = (pFpipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpipV(x86emu_t *emu, uintptr_t fcn)
{
 pFpipV_t fn = (pFpipV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void pFpuii(x86emu_t *emu, uintptr_t fcn)
{
 pFpuii_t fn = (pFpuii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpuil(x86emu_t *emu, uintptr_t fcn)
{
 pFpuil_t fn = (pFpuil_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpuip(x86emu_t *emu, uintptr_t fcn)
{
 pFpuip_t fn = (pFpuip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpuuu_t fn = (pFpuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpupi(x86emu_t *emu, uintptr_t fcn)
{
 pFpupi_t fn = (pFpupi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpupu(x86emu_t *emu, uintptr_t fcn)
{
 pFpupu_t fn = (pFpupu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpdIU(x86emu_t *emu, uintptr_t fcn)
{
 pFpdIU_t fn = (pFpdIU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFplpl(x86emu_t *emu, uintptr_t fcn)
{
 pFplpl_t fn = (pFplpl_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpLip(x86emu_t *emu, uintptr_t fcn)
{
 pFpLip_t fn = (pFpLip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpLLp(x86emu_t *emu, uintptr_t fcn)
{
 pFpLLp_t fn = (pFpLLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFppii(x86emu_t *emu, uintptr_t fcn)
{
 pFppii_t fn = (pFppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppiu(x86emu_t *emu, uintptr_t fcn)
{
 pFppiu_t fn = (pFppiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppiL(x86emu_t *emu, uintptr_t fcn)
{
 pFppiL_t fn = (pFppiL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppip(x86emu_t *emu, uintptr_t fcn)
{
 pFppip_t fn = (pFppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFppuu(x86emu_t *emu, uintptr_t fcn)
{
 pFppuu_t fn = (pFppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppuL(x86emu_t *emu, uintptr_t fcn)
{
 pFppuL_t fn = (pFppuL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppup(x86emu_t *emu, uintptr_t fcn)
{
 pFppup_t fn = (pFppup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFppUU(x86emu_t *emu, uintptr_t fcn)
{
 pFppUU_t fn = (pFppUU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppdd(x86emu_t *emu, uintptr_t fcn)
{
 pFppdd_t fn = (pFppdd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20));
}
void pFppll(x86emu_t *emu, uintptr_t fcn)
{
 pFppll_t fn = (pFppll_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppLL(x86emu_t *emu, uintptr_t fcn)
{
 pFppLL_t fn = (pFppLL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFppLp(x86emu_t *emu, uintptr_t fcn)
{
 pFppLp_t fn = (pFppLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpppi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppi_t fn = (pFpppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpppu(x86emu_t *emu, uintptr_t fcn)
{
 pFpppu_t fn = (pFpppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpppL(x86emu_t *emu, uintptr_t fcn)
{
 pFpppL_t fn = (pFpppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFpppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppp_t fn = (pFpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFpppV(x86emu_t *emu, uintptr_t fcn)
{
 pFpppV_t fn = (pFpppV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void pFSppi(x86emu_t *emu, uintptr_t fcn)
{
 pFSppi_t fn = (pFSppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFEippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEippp_t fn = (vFEippp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEpipu(x86emu_t *emu, uintptr_t fcn)
{
 vFEpipu_t fn = (vFEpipu_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFEpuup(x86emu_t *emu, uintptr_t fcn)
{
 vFEpuup_t fn = (vFEpuup_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEpupp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpupp_t fn = (vFEpupp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEpLLp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpLLp_t fn = (vFEpLLp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEppip(x86emu_t *emu, uintptr_t fcn)
{
 vFEppip_t fn = (vFEppip_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEppiV(x86emu_t *emu, uintptr_t fcn)
{
 vFEppiV_t fn = (vFEppiV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void vFEppup(x86emu_t *emu, uintptr_t fcn)
{
 vFEppup_t fn = (vFEppup_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEpppi(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppi_t fn = (vFEpppi_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void vFEpppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppp_t fn = (vFEpppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void vFEpPpp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpPpp_t fn = (vFEpPpp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 VulkanTox86(arg8);
}
void vFiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiii_t fn = (vFiiiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiu_t fn = (vFiiiiu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiiuii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiuii_t fn = (vFiiuii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiiuup_t fn = (vFiiuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFiillu(x86emu_t *emu, uintptr_t fcn)
{
 vFiillu_t fn = (vFiillu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiilll(x86emu_t *emu, uintptr_t fcn)
{
 vFiilll_t fn = (vFiilll_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiipii(x86emu_t *emu, uintptr_t fcn)
{
 vFiipii_t fn = (vFiipii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiipll(x86emu_t *emu, uintptr_t fcn)
{
 vFiipll_t fn = (vFiipll_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFiuiip_t fn = (vFiuiip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFiuipi(x86emu_t *emu, uintptr_t fcn)
{
 vFiuipi_t fn = (vFiuipi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFiuuuu_t fn = (vFiuuuu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiulpp(x86emu_t *emu, uintptr_t fcn)
{
 vFiulpp_t fn = (vFiulpp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFiffff(x86emu_t *emu, uintptr_t fcn)
{
 vFiffff_t fn = (vFiffff_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFidddd(x86emu_t *emu, uintptr_t fcn)
{
 vFidddd_t fn = (vFidddd_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void vFilill(x86emu_t *emu, uintptr_t fcn)
{
 vFilill_t fn = (vFilill_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFilipi(x86emu_t *emu, uintptr_t fcn)
{
 vFilipi_t fn = (vFilipi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFilipl(x86emu_t *emu, uintptr_t fcn)
{
 vFilipl_t fn = (vFilipl_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFillll(x86emu_t *emu, uintptr_t fcn)
{
 vFillll_t fn = (vFillll_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFiLLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFiLLLL_t fn = (vFiLLLL_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFipipu(x86emu_t *emu, uintptr_t fcn)
{
 vFipipu_t fn = (vFipipu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFipipp(x86emu_t *emu, uintptr_t fcn)
{
 vFipipp_t fn = (vFipipp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFipupi(x86emu_t *emu, uintptr_t fcn)
{
 vFipupi_t fn = (vFipupi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFucccc(x86emu_t *emu, uintptr_t fcn)
{
 vFucccc_t fn = (vFucccc_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int8_t *)(emu->regs[_SP].dword[0] + 8), *(int8_t *)(emu->regs[_SP].dword[0] + 12), *(int8_t *)(emu->regs[_SP].dword[0] + 16), *(int8_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuwwww(x86emu_t *emu, uintptr_t fcn)
{
 vFuwwww_t fn = (vFuwwww_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiii_t fn = (vFuiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiu_t fn = (vFuiiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiip_t fn = (vFuiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuiiCp(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiCp_t fn = (vFuiiCp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuiiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiup_t fn = (vFuiiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuiill(x86emu_t *emu, uintptr_t fcn)
{
 vFuiill_t fn = (vFuiill_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiIII(x86emu_t *emu, uintptr_t fcn)
{
 vFuiIII_t fn = (vFuiIII_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuii_t fn = (vFuiuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuip_t fn = (vFuiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuiuCi(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuCi_t fn = (vFuiuCi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiuCu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuCu_t fn = (vFuiuCu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuuu_t fn = (vFuiuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuup_t fn = (vFuiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuiupi(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupi_t fn = (vFuiupi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuifff(x86emu_t *emu, uintptr_t fcn)
{
 vFuifff_t fn = (vFuifff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuiddd_t fn = (vFuiddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28));
}
void vFuilll(x86emu_t *emu, uintptr_t fcn)
{
 vFuilll_t fn = (vFuilll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuiLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiLLL_t fn = (vFuiLLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuipii(x86emu_t *emu, uintptr_t fcn)
{
 vFuipii_t fn = (vFuipii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuipip(x86emu_t *emu, uintptr_t fcn)
{
 vFuipip_t fn = (vFuipip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuipup(x86emu_t *emu, uintptr_t fcn)
{
 vFuipup_t fn = (vFuipup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuippp(x86emu_t *emu, uintptr_t fcn)
{
 vFuippp_t fn = (vFuippp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuCCCC(x86emu_t *emu, uintptr_t fcn)
{
 vFuCCCC_t fn = (vFuCCCC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuCuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuCuip_t fn = (vFuCuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuCuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuCuup_t fn = (vFuCuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuWWWW(x86emu_t *emu, uintptr_t fcn)
{
 vFuWWWW_t fn = (vFuWWWW_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiii_t fn = (vFuuiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiu_t fn = (vFuuiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiip_t fn = (vFuuiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiui(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiui_t fn = (vFuuiui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuu_t fn = (vFuuiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiup_t fn = (vFuuiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuuifi(x86emu_t *emu, uintptr_t fcn)
{
 vFuuifi_t fn = (vFuuifi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuipC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuipC_t fn = (vFuuipC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuipu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuipu_t fn = (vFuuipu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuipp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuipp_t fn = (vFuuipp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuii_t fn = (vFuuuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiu_t fn = (vFuuuiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuil(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuil_t fn = (vFuuuil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuip_t fn = (vFuuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuui(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuui_t fn = (vFuuuui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuu_t fn = (vFuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuup_t fn = (vFuuuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuuuli(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuli_t fn = (vFuuuli_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuull(x86emu_t *emu, uintptr_t fcn)
{
 vFuuull_t fn = (vFuuull_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuulll(x86emu_t *emu, uintptr_t fcn)
{
 vFuulll_t fn = (vFuulll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuullp(x86emu_t *emu, uintptr_t fcn)
{
 vFuullp_t fn = (vFuullp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuupii(x86emu_t *emu, uintptr_t fcn)
{
 vFuupii_t fn = (vFuupii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuuppu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuppu_t fn = (vFuuppu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuffff_t fn = (vFuffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFudddd(x86emu_t *emu, uintptr_t fcn)
{
 vFudddd_t fn = (vFudddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void vFulill(x86emu_t *emu, uintptr_t fcn)
{
 vFulill_t fn = (vFulill_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFullll(x86emu_t *emu, uintptr_t fcn)
{
 vFullll_t fn = (vFullll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFullpu(x86emu_t *emu, uintptr_t fcn)
{
 vFullpu_t fn = (vFullpu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuLLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuLLLL_t fn = (vFuLLLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFupiii(x86emu_t *emu, uintptr_t fcn)
{
 vFupiii_t fn = (vFupiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFupupi(x86emu_t *emu, uintptr_t fcn)
{
 vFupupi_t fn = (vFupupi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFupupp(x86emu_t *emu, uintptr_t fcn)
{
 vFupupp_t fn = (vFupupp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFuplii(x86emu_t *emu, uintptr_t fcn)
{
 vFuplii_t fn = (vFuplii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFuppip(x86emu_t *emu, uintptr_t fcn)
{
 vFuppip_t fn = (vFuppip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFupppp(x86emu_t *emu, uintptr_t fcn)
{
 vFupppp_t fn = (vFupppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFfffff(x86emu_t *emu, uintptr_t fcn)
{
 vFfffff_t fn = (vFfffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFddddp(x86emu_t *emu, uintptr_t fcn)
{
 vFddddp_t fn = (vFddddp_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFluipp(x86emu_t *emu, uintptr_t fcn)
{
 vFluipp_t fn = (vFluipp_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFLpppi(x86emu_t *emu, uintptr_t fcn)
{
 vFLpppi_t fn = (vFLpppi_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiii_t fn = (vFpiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiiiI(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiI_t fn = (vFpiiiI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiu_t fn = (vFpiiiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiip_t fn = (vFpiiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpiiII(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiII_t fn = (vFpiiII_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpiiff(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiff_t fn = (vFpiiff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFpiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiipp_t fn = (vFpiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpiIiI(x86emu_t *emu, uintptr_t fcn)
{
 vFpiIiI_t fn = (vFpiIiI_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpiIII(x86emu_t *emu, uintptr_t fcn)
{
 vFpiIII_t fn = (vFpiIII_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpiUUp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiUUp_t fn = (vFpiUUp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpilpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpilpp_t fn = (vFpilpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpipii(x86emu_t *emu, uintptr_t fcn)
{
 vFpipii_t fn = (vFpipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpipiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpipiu_t fn = (vFpipiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFpuiip_t fn = (vFpuiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpuipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuipp_t fn = (vFpuipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpuipV(x86emu_t *emu, uintptr_t fcn)
{
 vFpuipV_t fn = (vFpuipV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), (void *)(emu->regs[_SP].dword[0] + 20));
}
void vFpuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuuu_t fn = (vFpuuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuup_t fn = (vFpuuup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpuupp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuupp_t fn = (vFpuupp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpuUUu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuUUu_t fn = (vFpuUUu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpuddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpuddd_t fn = (vFpuddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28));
}
void vFpupup(x86emu_t *emu, uintptr_t fcn)
{
 vFpupup_t fn = (vFpupup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpUuiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUuiu_t fn = (vFpUuiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpUUuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUuu_t fn = (vFpUUuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpUUup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUup_t fn = (vFpUUup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpUUUu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUUu_t fn = (vFpUUUu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpUUUp(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUUp_t fn = (vFpUUUp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFpffff(x86emu_t *emu, uintptr_t fcn)
{
 vFpffff_t fn = (vFpffff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFpdiII(x86emu_t *emu, uintptr_t fcn)
{
 vFpdiII_t fn = (vFpdiII_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpddii(x86emu_t *emu, uintptr_t fcn)
{
 vFpddii_t fn = (vFpddii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpdddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpdddd_t fn = (vFpdddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void vFpddpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpddpp_t fn = (vFpddpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpliil(x86emu_t *emu, uintptr_t fcn)
{
 vFpliil_t fn = (vFpliil_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFplppp(x86emu_t *emu, uintptr_t fcn)
{
 vFplppp_t fn = (vFplppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpLLpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpLLpp_t fn = (vFpLLpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiii_t fn = (vFppiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiu_t fn = (vFppiiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppiip_t fn = (vFppiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppiup(x86emu_t *emu, uintptr_t fcn)
{
 vFppiup_t fn = (vFppiup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppiff(x86emu_t *emu, uintptr_t fcn)
{
 vFppiff_t fn = (vFppiff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20));
}
void vFppipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppipi_t fn = (vFppipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppipp(x86emu_t *emu, uintptr_t fcn)
{
 vFppipp_t fn = (vFppipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppWui(x86emu_t *emu, uintptr_t fcn)
{
 vFppWui_t fn = (vFppWui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppuui(x86emu_t *emu, uintptr_t fcn)
{
 vFppuui_t fn = (vFppuui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppuuu_t fn = (vFppuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppuup(x86emu_t *emu, uintptr_t fcn)
{
 vFppuup_t fn = (vFppuup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppudd(x86emu_t *emu, uintptr_t fcn)
{
 vFppudd_t fn = (vFppudd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24));
}
void vFppupi(x86emu_t *emu, uintptr_t fcn)
{
 vFppupi_t fn = (vFppupi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppupp(x86emu_t *emu, uintptr_t fcn)
{
 vFppupp_t fn = (vFppupp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFppddp(x86emu_t *emu, uintptr_t fcn)
{
 vFppddp_t fn = (vFppddp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpppii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppii_t fn = (vFpppii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpppip(x86emu_t *emu, uintptr_t fcn)
{
 vFpppip_t fn = (vFpppip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpppuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpppuu_t fn = (vFpppuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFpppup(x86emu_t *emu, uintptr_t fcn)
{
 vFpppup_t fn = (vFpppup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFpppdd(x86emu_t *emu, uintptr_t fcn)
{
 vFpppdd_t fn = (vFpppdd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24));
}
void vFppppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppppi_t fn = (vFppppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppppu(x86emu_t *emu, uintptr_t fcn)
{
 vFppppu_t fn = (vFppppu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppppL(x86emu_t *emu, uintptr_t fcn)
{
 vFppppL_t fn = (vFppppL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppp_t fn = (vFppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEiipp_t fn = (iFEiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEiipV(x86emu_t *emu, uintptr_t fcn)
{
 iFEiipV_t fn = (iFEiipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEiupp(x86emu_t *emu, uintptr_t fcn)
{
 iFEiupp_t fn = (iFEiupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEipip(x86emu_t *emu, uintptr_t fcn)
{
 iFEipip_t fn = (iFEipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEipuu(x86emu_t *emu, uintptr_t fcn)
{
 iFEipuu_t fn = (iFEipuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEippi(x86emu_t *emu, uintptr_t fcn)
{
 iFEippi_t fn = (iFEippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEippL(x86emu_t *emu, uintptr_t fcn)
{
 iFEippL_t fn = (iFEippL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEippp(x86emu_t *emu, uintptr_t fcn)
{
 iFEippp_t fn = (iFEippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEuuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFEuuuu_t fn = (iFEuuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpiii(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiii_t fn = (iFEpiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpiup(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiup_t fn = (iFEpiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpipi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpipi_t fn = (iFEpipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpipp_t fn = (iFEpipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpipV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpipV_t fn = (iFEpipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpupU(x86emu_t *emu, uintptr_t fcn)
{
 iFEpupU_t fn = (iFEpupU_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpupp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpupp_t fn = (iFEpupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpupV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpupV_t fn = (iFEpupV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpUup(x86emu_t *emu, uintptr_t fcn)
{
 iFEpUup_t fn = (iFEpUup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpUpP(x86emu_t *emu, uintptr_t fcn)
{
 iFEpUpP_t fn = (iFEpUpP_t)fcn;
 void *arg20 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16), arg20);
 VulkanTox86(arg20);
}
void iFEpLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLpp_t fn = (iFEpLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpLpV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLpV_t fn = (iFEpLpV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEppii(x86emu_t *emu, uintptr_t fcn)
{
 iFEppii_t fn = (iFEppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEppip(x86emu_t *emu, uintptr_t fcn)
{
 iFEppip_t fn = (iFEppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEppiV(x86emu_t *emu, uintptr_t fcn)
{
 iFEppiV_t fn = (iFEppiV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpplp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpplp_t fn = (iFEpplp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpppi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppi_t fn = (iFEpppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppp_t fn = (iFEpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpppV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppV_t fn = (iFEpppV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFEpPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpPpp_t fn = (iFEpPpp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), arg8, *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
 VulkanTox86(arg8);
}
void iFiiipu(x86emu_t *emu, uintptr_t fcn)
{
 iFiiipu_t fn = (iFiiipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFiiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFiiipp_t fn = (iFiiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFiiupp(x86emu_t *emu, uintptr_t fcn)
{
 iFiiupp_t fn = (iFiiupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFiipip(x86emu_t *emu, uintptr_t fcn)
{
 iFiipip_t fn = (iFiipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFipiii(x86emu_t *emu, uintptr_t fcn)
{
 iFipiii_t fn = (iFipiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFipipi_t fn = (iFipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFipipu(x86emu_t *emu, uintptr_t fcn)
{
 iFipipu_t fn = (iFipipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFipuii(x86emu_t *emu, uintptr_t fcn)
{
 iFipuii_t fn = (iFipuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFipuui(x86emu_t *emu, uintptr_t fcn)
{
 iFipuui_t fn = (iFipuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFippui(x86emu_t *emu, uintptr_t fcn)
{
 iFippui_t fn = (iFippui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFippuu(x86emu_t *emu, uintptr_t fcn)
{
 iFippuu_t fn = (iFippuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFippup(x86emu_t *emu, uintptr_t fcn)
{
 iFippup_t fn = (iFippup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFipppi(x86emu_t *emu, uintptr_t fcn)
{
 iFipppi_t fn = (iFipppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFipppp_t fn = (iFipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFuppup(x86emu_t *emu, uintptr_t fcn)
{
 iFuppup_t fn = (iFuppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFLpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFLpppp_t fn = (iFLpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpwwww(x86emu_t *emu, uintptr_t fcn)
{
 iFpwwww_t fn = (iFpwwww_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpwppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpwppp_t fn = (iFpwppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int16_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiii_t fn = (iFpiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiu_t fn = (iFpiiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiiL(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiL_t fn = (iFpiiiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiip_t fn = (iFpiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiui(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiui_t fn = (iFpiiui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiuu_t fn = (iFpiiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpiipi_t fn = (iFpiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiipp_t fn = (iFpiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpiIip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiIip_t fn = (iFpiIip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuwp_t fn = (iFpiuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpiupu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiupu_t fn = (iFpiupu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpiUUU(x86emu_t *emu, uintptr_t fcn)
{
 iFpiUUU_t fn = (iFpiUUU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpipii(x86emu_t *emu, uintptr_t fcn)
{
 iFpipii_t fn = (iFpipii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpipiL(x86emu_t *emu, uintptr_t fcn)
{
 iFpipiL_t fn = (iFpipiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpipip_t fn = (iFpipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpippi(x86emu_t *emu, uintptr_t fcn)
{
 iFpippi_t fn = (iFpippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpippp(x86emu_t *emu, uintptr_t fcn)
{
 iFpippp_t fn = (iFpippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpipGp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipGp_t fn = (iFpipGp_t)fcn;
 my_GValue_t arg16;
 alignGValue(&arg16, *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), &arg16, *(void **)(emu->regs[_SP].dword[0] + 20));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 16), &arg16);
}
void iFpIppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpIppp_t fn = (iFpIppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpCCCC(x86emu_t *emu, uintptr_t fcn)
{
 iFpCCCC_t fn = (iFpCCCC_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiii_t fn = (iFpuiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuiup(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiup_t fn = (iFpuiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuill(x86emu_t *emu, uintptr_t fcn)
{
 iFpuill_t fn = (iFpuill_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpuipi_t fn = (iFpuipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuuip(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuip_t fn = (iFpuuip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuuui(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuui_t fn = (iFpuuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuuup(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuup_t fn = (iFpuuup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuuLL(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuLL_t fn = (iFpuuLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuupu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuupu_t fn = (iFpuupu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuupp_t fn = (iFpuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuLpL(x86emu_t *emu, uintptr_t fcn)
{
 iFpuLpL_t fn = (iFpuLpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuLpp_t fn = (iFpuLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpupiU(x86emu_t *emu, uintptr_t fcn)
{
 iFpupiU_t fn = (iFpupiU_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpupuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuu_t fn = (iFpupuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpupup(x86emu_t *emu, uintptr_t fcn)
{
 iFpupup_t fn = (iFpupup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuppu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuppu_t fn = (iFpuppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuppp_t fn = (iFpuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpuPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuPpp_t fn = (iFpuPpp_t)fcn;
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), arg12, *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
 VulkanTox86(arg12);
}
void iFpUiUi(x86emu_t *emu, uintptr_t fcn)
{
 iFpUiUi_t fn = (iFpUiUi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFplluu(x86emu_t *emu, uintptr_t fcn)
{
 iFplluu_t fn = (iFplluu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpLlpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpLlpp_t fn = (iFpLlpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpLLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpLLpp_t fn = (iFpLLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiu_t fn = (iFppiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppiip(x86emu_t *emu, uintptr_t fcn)
{
 iFppiip_t fn = (iFppiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppiIp(x86emu_t *emu, uintptr_t fcn)
{
 iFppiIp_t fn = (iFppiIp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppiup(x86emu_t *emu, uintptr_t fcn)
{
 iFppiup_t fn = (iFppiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppiLL(x86emu_t *emu, uintptr_t fcn)
{
 iFppiLL_t fn = (iFppiLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppipi(x86emu_t *emu, uintptr_t fcn)
{
 iFppipi_t fn = (iFppipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppipu(x86emu_t *emu, uintptr_t fcn)
{
 iFppipu_t fn = (iFppipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppipp_t fn = (iFppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuwp_t fn = (iFppuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppuip(x86emu_t *emu, uintptr_t fcn)
{
 iFppuip_t fn = (iFppuip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppupi(x86emu_t *emu, uintptr_t fcn)
{
 iFppupi_t fn = (iFppupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppupp_t fn = (iFppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppllp(x86emu_t *emu, uintptr_t fcn)
{
 iFppllp_t fn = (iFppllp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpplpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpplpp_t fn = (iFpplpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppLip(x86emu_t *emu, uintptr_t fcn)
{
 iFppLip_t fn = (iFppLip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFppLpi(x86emu_t *emu, uintptr_t fcn)
{
 iFppLpi_t fn = (iFppLpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppLpL(x86emu_t *emu, uintptr_t fcn)
{
 iFppLpL_t fn = (iFppLpL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLpp_t fn = (iFppLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpppii(x86emu_t *emu, uintptr_t fcn)
{
 iFpppii_t fn = (iFpppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpppiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiu_t fn = (iFpppiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpppip(x86emu_t *emu, uintptr_t fcn)
{
 iFpppip_t fn = (iFpppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpppui(x86emu_t *emu, uintptr_t fcn)
{
 iFpppui_t fn = (iFpppui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpppuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppuu_t fn = (iFpppuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFpppup(x86emu_t *emu, uintptr_t fcn)
{
 iFpppup_t fn = (iFpppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpppUi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppUi_t fn = (iFpppUi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppLi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppLi_t fn = (iFpppLi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppppi(x86emu_t *emu, uintptr_t fcn)
{
 iFppppi_t fn = (iFppppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppppu(x86emu_t *emu, uintptr_t fcn)
{
 iFppppu_t fn = (iFppppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppppL(x86emu_t *emu, uintptr_t fcn)
{
 iFppppL_t fn = (iFppppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppp_t fn = (iFppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFpppGp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppGp_t fn = (iFpppGp_t)fcn;
 my_GValue_t arg16;
 alignGValue(&arg16, *(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), &arg16, *(void **)(emu->regs[_SP].dword[0] + 20));
 unalignGValue(*(void **)(emu->regs[_SP].dword[0] + 16), &arg16);
}
void iFpPPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpPPpp_t fn = (iFpPPpp_t)fcn;
 void *arg8 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 8));
 void *arg12 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), arg8, arg12, *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
 VulkanTox86(arg8);
 VulkanTox86(arg12);
}
void IFppIII(x86emu_t *emu, uintptr_t fcn)
{
 IFppIII_t fn = (IFppIII_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 28));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void uFEippp(x86emu_t *emu, uintptr_t fcn)
{
 uFEippp_t fn = (uFEippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFEpipp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpipp_t fn = (uFEpipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFEppuu(x86emu_t *emu, uintptr_t fcn)
{
 uFEppuu_t fn = (uFEppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void uFEpppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpppp_t fn = (uFEpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void uFiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 uFiuuuu_t fn = (uFiuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void uFipipp(x86emu_t *emu, uintptr_t fcn)
{
 uFipipp_t fn = (uFipipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFipLpp(x86emu_t *emu, uintptr_t fcn)
{
 uFipLpp_t fn = (uFipLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFpCCCC(x86emu_t *emu, uintptr_t fcn)
{
 uFpCCCC_t fn = (uFpCCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void uFpWuip(x86emu_t *emu, uintptr_t fcn)
{
 uFpWuip_t fn = (uFpWuip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFpuuuu(x86emu_t *emu, uintptr_t fcn)
{
 uFpuuuu_t fn = (uFpuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void uFpuuup(x86emu_t *emu, uintptr_t fcn)
{
 uFpuuup_t fn = (uFpuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFpupuu(x86emu_t *emu, uintptr_t fcn)
{
 uFpupuu_t fn = (uFpupuu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void uFppiip(x86emu_t *emu, uintptr_t fcn)
{
 uFppiip_t fn = (uFppiip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFppipp(x86emu_t *emu, uintptr_t fcn)
{
 uFppipp_t fn = (uFppipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFppuup(x86emu_t *emu, uintptr_t fcn)
{
 uFppuup_t fn = (uFppuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFppupp(x86emu_t *emu, uintptr_t fcn)
{
 uFppupp_t fn = (uFppupp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFpplip(x86emu_t *emu, uintptr_t fcn)
{
 uFpplip_t fn = (uFpplip_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFppLpp(x86emu_t *emu, uintptr_t fcn)
{
 uFppLpp_t fn = (uFppLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppppp_t fn = (uFppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void UFuiiii(x86emu_t *emu, uintptr_t fcn)
{
 UFuiiii_t fn = (UFuiiii_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void lFEipiI(x86emu_t *emu, uintptr_t fcn)
{
 lFEipiI_t fn = (lFEipiI_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16));
}
void lFipLli(x86emu_t *emu, uintptr_t fcn)
{
 lFipLli_t fn = (lFipLli_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void lFipLlL(x86emu_t *emu, uintptr_t fcn)
{
 lFipLlL_t fn = (lFipLlL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void lFpuipC(x86emu_t *emu, uintptr_t fcn)
{
 lFpuipC_t fn = (lFpuipC_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void lFppiip(x86emu_t *emu, uintptr_t fcn)
{
 lFppiip_t fn = (lFppiip_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFEpppp(x86emu_t *emu, uintptr_t fcn)
{
 LFEpppp_t fn = (LFEpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void LFuiCiu(x86emu_t *emu, uintptr_t fcn)
{
 LFuiCiu_t fn = (LFuiCiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFLpppL(x86emu_t *emu, uintptr_t fcn)
{
 LFLpppL_t fn = (LFLpppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFLpppp(x86emu_t *emu, uintptr_t fcn)
{
 LFLpppp_t fn = (LFLpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFpuipp(x86emu_t *emu, uintptr_t fcn)
{
 LFpuipp_t fn = (LFpuipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFpuppi(x86emu_t *emu, uintptr_t fcn)
{
 LFpuppi_t fn = (LFpuppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFpLppL(x86emu_t *emu, uintptr_t fcn)
{
 LFpLppL_t fn = (LFpLppL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFpLppp(x86emu_t *emu, uintptr_t fcn)
{
 LFpLppp_t fn = (LFpLppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFppLLp(x86emu_t *emu, uintptr_t fcn)
{
 LFppLLp_t fn = (LFppLLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFpppii(x86emu_t *emu, uintptr_t fcn)
{
 LFpppii_t fn = (LFpppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFppppp(x86emu_t *emu, uintptr_t fcn)
{
 LFppppp_t fn = (LFppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpiii(x86emu_t *emu, uintptr_t fcn)
{
 pFEpiii_t fn = (pFEpiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEpipi(x86emu_t *emu, uintptr_t fcn)
{
 pFEpipi_t fn = (pFEpipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEpipL(x86emu_t *emu, uintptr_t fcn)
{
 pFEpipL_t fn = (pFEpipL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEpipp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpipp_t fn = (pFEpipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEpupp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpupp_t fn = (pFEpupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEpUpp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpUpp_t fn = (pFEpUpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppii(x86emu_t *emu, uintptr_t fcn)
{
 pFEppii_t fn = (pFEppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEppip(x86emu_t *emu, uintptr_t fcn)
{
 pFEppip_t fn = (pFEppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEppCC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCC_t fn = (pFEppCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEppuW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuW_t fn = (pFEppuW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEppuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuu_t fn = (pFEppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEppup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppup_t fn = (pFEppup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEppLp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppLp_t fn = (pFEppLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFEpppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppi_t fn = (pFEpppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEpppu(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppu_t fn = (pFEpppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16));
}
void pFEpppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppp_t fn = (pFEpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void pFiiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFiiiii_t fn = (pFiiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFipipL(x86emu_t *emu, uintptr_t fcn)
{
 pFipipL_t fn = (pFipipL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFipppi(x86emu_t *emu, uintptr_t fcn)
{
 pFipppi_t fn = (pFipppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFipppu(x86emu_t *emu, uintptr_t fcn)
{
 pFipppu_t fn = (pFipppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFipppp(x86emu_t *emu, uintptr_t fcn)
{
 pFipppp_t fn = (pFipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFuiiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFuiiiu_t fn = (pFuiiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFuiupp(x86emu_t *emu, uintptr_t fcn)
{
 pFuiupp_t fn = (pFuiupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiii_t fn = (pFpiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpiiip(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiip_t fn = (pFpiiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpiiuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiuu_t fn = (pFpiiuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpiipi(x86emu_t *emu, uintptr_t fcn)
{
 pFpiipi_t fn = (pFpiipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFpiipp_t fn = (pFpiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpiCCC(x86emu_t *emu, uintptr_t fcn)
{
 pFpiCCC_t fn = (pFpiCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpiuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiuuu_t fn = (pFpiuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpiLip(x86emu_t *emu, uintptr_t fcn)
{
 pFpiLip_t fn = (pFpiLip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpippi(x86emu_t *emu, uintptr_t fcn)
{
 pFpippi_t fn = (pFpippi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpippp(x86emu_t *emu, uintptr_t fcn)
{
 pFpippp_t fn = (pFpippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpIiip(x86emu_t *emu, uintptr_t fcn)
{
 pFpIiip_t fn = (pFpIiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpuiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpuiii_t fn = (pFpuiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpuiip(x86emu_t *emu, uintptr_t fcn)
{
 pFpuiip_t fn = (pFpuiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpuuip(x86emu_t *emu, uintptr_t fcn)
{
 pFpuuip_t fn = (pFpuuip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpuuup(x86emu_t *emu, uintptr_t fcn)
{
 pFpuuup_t fn = (pFpuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpuupp(x86emu_t *emu, uintptr_t fcn)
{
 pFpuupp_t fn = (pFpuupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpuLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFpuLpp_t fn = (pFpuLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpuppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpuppp_t fn = (pFpuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpUdii(x86emu_t *emu, uintptr_t fcn)
{
 pFpUdii_t fn = (pFpUdii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpdddd(x86emu_t *emu, uintptr_t fcn)
{
 pFpdddd_t fn = (pFpdddd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void pFplppp(x86emu_t *emu, uintptr_t fcn)
{
 pFplppp_t fn = (pFplppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpLpip(x86emu_t *emu, uintptr_t fcn)
{
 pFpLpip_t fn = (pFpLpip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppiii(x86emu_t *emu, uintptr_t fcn)
{
 pFppiii_t fn = (pFppiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppiip(x86emu_t *emu, uintptr_t fcn)
{
 pFppiip_t fn = (pFppiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppiup(x86emu_t *emu, uintptr_t fcn)
{
 pFppiup_t fn = (pFppiup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppipi(x86emu_t *emu, uintptr_t fcn)
{
 pFppipi_t fn = (pFppipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppipp(x86emu_t *emu, uintptr_t fcn)
{
 pFppipp_t fn = (pFppipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppuui(x86emu_t *emu, uintptr_t fcn)
{
 pFppuui_t fn = (pFppuui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFppuuu_t fn = (pFppuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppuup(x86emu_t *emu, uintptr_t fcn)
{
 pFppuup_t fn = (pFppuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppddi(x86emu_t *emu, uintptr_t fcn)
{
 pFppddi_t fn = (pFppddi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppLLi(x86emu_t *emu, uintptr_t fcn)
{
 pFppLLi_t fn = (pFppLLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFppLpp_t fn = (pFppLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpppii(x86emu_t *emu, uintptr_t fcn)
{
 pFpppii_t fn = (pFpppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpppip(x86emu_t *emu, uintptr_t fcn)
{
 pFpppip_t fn = (pFpppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFpppui(x86emu_t *emu, uintptr_t fcn)
{
 pFpppui_t fn = (pFpppui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpppuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpppuu_t fn = (pFpppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFpppup(x86emu_t *emu, uintptr_t fcn)
{
 pFpppup_t fn = (pFpppup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFppppi_t fn = (pFppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppppp_t fn = (pFppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEiiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFEiiipp_t fn = (vFEiiipp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpiLpp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpiLpp_t fn = (vFEpiLpp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpippp_t fn = (vFEpippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpuipp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpuipp_t fn = (vFEpuipp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpupup(x86emu_t *emu, uintptr_t fcn)
{
 vFEpupup_t fn = (vFEpupup_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpLLpp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpLLpp_t fn = (vFEpLLpp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEppipV(x86emu_t *emu, uintptr_t fcn)
{
 vFEppipV_t fn = (vFEppipV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), (void *)(emu->regs[_SP].dword[0] + 20));
}
void vFEppupp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppupp_t fn = (vFEppupp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFEpppiu(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppiu_t fn = (vFEpppiu_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void vFEppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppppp_t fn = (vFEppppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void vFiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiii_t fn = (vFiiiiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFiiiuil(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiuil_t fn = (vFiiiuil_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFiiilpi(x86emu_t *emu, uintptr_t fcn)
{
 vFiiilpi_t fn = (vFiiilpi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFiiuilp(x86emu_t *emu, uintptr_t fcn)
{
 vFiiuilp_t fn = (vFiiuilp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFiffiff(x86emu_t *emu, uintptr_t fcn)
{
 vFiffiff_t fn = (vFiffiff_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFiddidd(x86emu_t *emu, uintptr_t fcn)
{
 vFiddidd_t fn = (vFiddidd_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36));
}
void vFilipli(x86emu_t *emu, uintptr_t fcn)
{
 vFilipli_t fn = (vFilipli_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFiliplu(x86emu_t *emu, uintptr_t fcn)
{
 vFiliplu_t fn = (vFiliplu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFillill(x86emu_t *emu, uintptr_t fcn)
{
 vFillill_t fn = (vFillill_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFipiplp(x86emu_t *emu, uintptr_t fcn)
{
 vFipiplp_t fn = (vFipiplp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFCCCCff(x86emu_t *emu, uintptr_t fcn)
{
 vFCCCCff_t fn = (vFCCCCff_t)fcn;
 fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiii_t fn = (vFuiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiip_t fn = (vFuiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuiiuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiuii_t fn = (vFuiiuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiuup_t fn = (vFuiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiii_t fn = (vFuiuiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiC_t fn = (vFuiuiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiil(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiil_t fn = (vFuiuiil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiip_t fn = (vFuiuiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiuu_t fn = (vFuiuiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuiuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiuL_t fn = (vFuiuiuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuCip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuCip_t fn = (vFuiuCip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuuip_t fn = (vFuiuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuuuu_t fn = (vFuiuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiupii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupii_t fn = (vFuiupii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiupiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupiu_t fn = (vFuiupiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuiffff_t fn = (vFuiffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFuidddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuidddd_t fn = (vFuidddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36));
}
void vFuillll(x86emu_t *emu, uintptr_t fcn)
{
 vFuillll_t fn = (vFuillll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuiLLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiLLLL_t fn = (vFuiLLLL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuipiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuipiup_t fn = (vFuipiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuCuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuCuuip_t fn = (vFuCuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiii_t fn = (vFuuiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiu_t fn = (vFuuiiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuii_t fn = (vFuuiuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiuil(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuil_t fn = (vFuuiuil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuip_t fn = (vFuuiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiuCu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuCu_t fn = (vFuuiuCu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuup_t fn = (vFuuiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuippp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuippp_t fn = (vFuuippp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiii_t fn = (vFuuuiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiup_t fn = (vFuuuiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuipi(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuipi_t fn = (vFuuuipi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuipC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuipC_t fn = (vFuuuipC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuipp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuipp_t fn = (vFuuuipp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuii_t fn = (vFuuuuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuip_t fn = (vFuuuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuu_t fn = (vFuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuull(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuull_t fn = (vFuuuull_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuppi(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuppi_t fn = (vFuuuppi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuuuppp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuppp_t fn = (vFuuuppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuuffff_t fn = (vFuuffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFuudddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuudddd_t fn = (vFuudddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36));
}
void vFuupiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuupiii_t fn = (vFuupiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuupupp(x86emu_t *emu, uintptr_t fcn)
{
 vFuupupp_t fn = (vFuupupp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuuplii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuplii_t fn = (vFuuplii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuffiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuffiip_t fn = (vFuffiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFufffff(x86emu_t *emu, uintptr_t fcn)
{
 vFufffff_t fn = (vFufffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFuddiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuddiip_t fn = (vFuddiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFullill(x86emu_t *emu, uintptr_t fcn)
{
 vFullill_t fn = (vFullill_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFulluLC(x86emu_t *emu, uintptr_t fcn)
{
 vFulluLC_t fn = (vFulluLC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFupiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFupiiii_t fn = (vFupiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFupupip(x86emu_t *emu, uintptr_t fcn)
{
 vFupupip_t fn = (vFupupip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFuppppu(x86emu_t *emu, uintptr_t fcn)
{
 vFuppppu_t fn = (vFuppppu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFuppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFuppppp_t fn = (vFuppppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFffffff_t fn = (vFffffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFdddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFdddddd_t fn = (vFdddddd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44));
}
void vFpiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiii_t fn = (vFpiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpiiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiipp_t fn = (vFpiiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpiiuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiuuu_t fn = (vFpiiuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpiippi(x86emu_t *emu, uintptr_t fcn)
{
 vFpiippi_t fn = (vFpiippi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpiippp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiippp_t fn = (vFpiippp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpiUuup(x86emu_t *emu, uintptr_t fcn)
{
 vFpiUuup_t fn = (vFpiUuup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpipiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpipiiu_t fn = (vFpipiiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpipipV(x86emu_t *emu, uintptr_t fcn)
{
 vFpipipV_t fn = (vFpipipV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), (void *)(emu->regs[_SP].dword[0] + 24));
}
void vFpipppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppi_t fn = (vFpipppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppp_t fn = (vFpipppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpuiiii_t fn = (vFpuiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpuiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuiiiu_t fn = (vFpuiiiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpuiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuiipp_t fn = (vFpuiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpuuuiu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuuiu_t fn = (vFpuuuiu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpuuppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuppp_t fn = (vFpuuppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpudddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpudddd_t fn = (vFpudddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36));
}
void vFpupuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpupuuu_t fn = (vFpupuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpupppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpupppp_t fn = (vFpupppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpUiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUiuup_t fn = (vFpUiuup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpUiUup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUiUup_t fn = (vFpUiUup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFpUipup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUipup_t fn = (vFpUipup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpUUiup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUiup_t fn = (vFpUUiup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFpdddii(x86emu_t *emu, uintptr_t fcn)
{
 vFpdddii_t fn = (vFpdddii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFpddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpddddd_t fn = (vFpddddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40));
}
void vFpddddp(x86emu_t *emu, uintptr_t fcn)
{
 vFpddddp_t fn = (vFpddddp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFppiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiii_t fn = (vFppiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiip_t fn = (vFppiiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppiiui(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiui_t fn = (vFppiiui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiuu_t fn = (vFppiiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipi_t fn = (vFppiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipp_t fn = (vFppiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppilpp(x86emu_t *emu, uintptr_t fcn)
{
 vFppilpp_t fn = (vFppilpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppippi(x86emu_t *emu, uintptr_t fcn)
{
 vFppippi_t fn = (vFppippi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppippp(x86emu_t *emu, uintptr_t fcn)
{
 vFppippp_t fn = (vFppippp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppuuuu_t fn = (vFppuuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppuUUU(x86emu_t *emu, uintptr_t fcn)
{
 vFppuUUU_t fn = (vFppuUUU_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppupii(x86emu_t *emu, uintptr_t fcn)
{
 vFppupii_t fn = (vFppupii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppuppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppuppp_t fn = (vFppuppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppdidd(x86emu_t *emu, uintptr_t fcn)
{
 vFppdidd_t fn = (vFppdidd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void vFppdddd(x86emu_t *emu, uintptr_t fcn)
{
 vFppdddd_t fn = (vFppdddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36));
}
void vFpplppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpplppi_t fn = (vFpplppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpplppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpplppp_t fn = (vFpplppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFppLppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppLppi_t fn = (vFppLppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppLppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppLppp_t fn = (vFppLppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpppiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiii_t fn = (vFpppiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppiip(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiip_t fn = (vFpppiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFpppiff(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiff_t fn = (vFpppiff_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppipu(x86emu_t *emu, uintptr_t fcn)
{
 vFpppipu_t fn = (vFpppipu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppuii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppuii_t fn = (vFpppuii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFppppii(x86emu_t *emu, uintptr_t fcn)
{
 vFppppii_t fn = (vFppppii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppi_t fn = (vFpppppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppppu(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppu_t fn = (vFpppppu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppppL(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppL_t fn = (vFpppppL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFpppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppp_t fn = (vFpppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void cFppLppi(x86emu_t *emu, uintptr_t fcn)
{
 cFppLppi_t fn = (cFppLppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFEiippi(x86emu_t *emu, uintptr_t fcn)
{
 iFEiippi_t fn = (iFEiippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFEiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFEiippp_t fn = (iFEiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEiLLLL(x86emu_t *emu, uintptr_t fcn)
{
 iFEiLLLL_t fn = (iFEiLLLL_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFEipuup(x86emu_t *emu, uintptr_t fcn)
{
 iFEipuup_t fn = (iFEipuup_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEippLp(x86emu_t *emu, uintptr_t fcn)
{
 iFEippLp_t fn = (iFEippLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEipppi(x86emu_t *emu, uintptr_t fcn)
{
 iFEipppi_t fn = (iFEipppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFElpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFElpppp_t fn = (iFElpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiipp_t fn = (iFEpiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpiipV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiipV_t fn = (iFEpiipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), (void *)(emu->regs[_SP].dword[0] + 20));
}
void iFEpiLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiLpp_t fn = (iFEpiLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpippi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpippi_t fn = (iFEpippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void iFEpippp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpippp_t fn = (iFEpippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpuuip(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuip_t fn = (iFEpuuip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuppp_t fn = (iFEpuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpUPpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpUPpp_t fn = (iFEpUPpp_t)fcn;
 void *arg16 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 16));
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), arg16, *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
 VulkanTox86(arg16);
}
void iFEpLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLppp_t fn = (iFEpLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEpppip(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppip_t fn = (iFEpppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFEppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppppp_t fn = (iFEppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void iFiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiii_t fn = (iFiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiip_t fn = (iFiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFiiiuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiuwp_t fn = (iFiiiuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFiuiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFiuiipi_t fn = (iFiuiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFiuUuUu(x86emu_t *emu, uintptr_t fcn)
{
 iFiuUuUu_t fn = (iFiuUuUu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFipiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFipiipi_t fn = (iFipiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFipipuu(x86emu_t *emu, uintptr_t fcn)
{
 iFipipuu_t fn = (iFipipuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFipuIup(x86emu_t *emu, uintptr_t fcn)
{
 iFipuIup_t fn = (iFipuIup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFipupup(x86emu_t *emu, uintptr_t fcn)
{
 iFipupup_t fn = (iFipupup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFipuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFipuppp_t fn = (iFipuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFipppup(x86emu_t *emu, uintptr_t fcn)
{
 iFipppup_t fn = (iFipppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFippppp(x86emu_t *emu, uintptr_t fcn)
{
 iFippppp_t fn = (iFippppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFuppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFuppipp_t fn = (iFuppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFuppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFuppppp_t fn = (iFuppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFdipppL(x86emu_t *emu, uintptr_t fcn)
{
 iFdipppL_t fn = (iFdipppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFLpppii(x86emu_t *emu, uintptr_t fcn)
{
 iFLpppii_t fn = (iFLpppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiii_t fn = (iFpiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiip_t fn = (iFpiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiipp_t fn = (iFpiiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiiuii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiuii_t fn = (iFpiiuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpiipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiipip_t fn = (iFpiipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiippu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiippu_t fn = (iFpiippu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiippp_t fn = (iFpiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiuuup(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuuup_t fn = (iFpiuuup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuupp_t fn = (iFpiuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpiuppu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuppu_t fn = (iFpiuppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpiUUpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiUUpp_t fn = (iFpiUUpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpipipi_t fn = (iFpipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpippip(x86emu_t *emu, uintptr_t fcn)
{
 iFpippip_t fn = (iFpippip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipppp_t fn = (iFpipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpCpipu(x86emu_t *emu, uintptr_t fcn)
{
 iFpCpipu_t fn = (iFpCpipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpuiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiiii_t fn = (iFpuiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpuuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuupp_t fn = (iFpuuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpuuLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuLpp_t fn = (iFpuuLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpupipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpupipi_t fn = (iFpupipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpupuui(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuui_t fn = (iFpupuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpUuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpUuupp_t fn = (iFpUuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpUUUip(x86emu_t *emu, uintptr_t fcn)
{
 iFpUUUip_t fn = (iFpUUUip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpUUUUp(x86emu_t *emu, uintptr_t fcn)
{
 iFpUUUUp_t fn = (iFpUUUUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFpLLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpLLppp_t fn = (iFpLLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiii_t fn = (iFppiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiip_t fn = (iFppiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppiiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiuu_t fn = (iFppiiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFppiipi_t fn = (iFppiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppiipp_t fn = (iFppiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppipii(x86emu_t *emu, uintptr_t fcn)
{
 iFppipii_t fn = (iFppipii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppipiL(x86emu_t *emu, uintptr_t fcn)
{
 iFppipiL_t fn = (iFppipiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppipip(x86emu_t *emu, uintptr_t fcn)
{
 iFppipip_t fn = (iFppipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppIipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppIipp_t fn = (iFppIipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppIppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppIppp_t fn = (iFppIppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppuiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppuiii_t fn = (iFppuiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppuiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppuiiu_t fn = (iFppuiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppuipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuipp_t fn = (iFppuipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppuIII(x86emu_t *emu, uintptr_t fcn)
{
 iFppuIII_t fn = (iFppuIII_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 24), *(int64_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFppuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuupp_t fn = (iFppuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppuLpp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuLpp_t fn = (iFppuLpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppupip(x86emu_t *emu, uintptr_t fcn)
{
 iFppupip_t fn = (iFppupip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuppp_t fn = (iFppuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppUipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppUipp_t fn = (iFppUipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppUupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppUupp_t fn = (iFppUupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppUUup(x86emu_t *emu, uintptr_t fcn)
{
 iFppUUup_t fn = (iFppUUup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFppdidd(x86emu_t *emu, uintptr_t fcn)
{
 iFppdidd_t fn = (iFppdidd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32));
}
void iFppLupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLupp_t fn = (iFppLupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppLpLp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLpLp_t fn = (iFppLpLp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLppp_t fn = (iFppLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpppiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiuu_t fn = (iFpppiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppipi_t fn = (iFpppipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppipp_t fn = (iFpppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpppuii(x86emu_t *emu, uintptr_t fcn)
{
 iFpppuii_t fn = (iFpppuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppupu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppupu_t fn = (iFpppupu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppupp_t fn = (iFpppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppppii(x86emu_t *emu, uintptr_t fcn)
{
 iFppppii_t fn = (iFppppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppppiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiu_t fn = (iFppppiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFppppip(x86emu_t *emu, uintptr_t fcn)
{
 iFppppip_t fn = (iFppppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFppppup(x86emu_t *emu, uintptr_t fcn)
{
 iFppppup_t fn = (iFppppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFpppppi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppi_t fn = (iFpppppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppppu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppu_t fn = (iFpppppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFpppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppp_t fn = (iFpppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFEiippp(x86emu_t *emu, uintptr_t fcn)
{
 uFEiippp_t fn = (uFEiippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFEiuppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEiuppp_t fn = (uFEiuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFEpCppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpCppp_t fn = (uFEpCppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFEpuppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpuppp_t fn = (uFEpuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void uFupuufp(x86emu_t *emu, uintptr_t fcn)
{
 uFupuufp_t fn = (uFupuufp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFpippup(x86emu_t *emu, uintptr_t fcn)
{
 uFpippup_t fn = (uFpippup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFpWuwCp(x86emu_t *emu, uintptr_t fcn)
{
 uFpWuwCp_t fn = (uFpWuwCp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFpWuipp(x86emu_t *emu, uintptr_t fcn)
{
 uFpWuipp_t fn = (uFpWuipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFpWuuCp(x86emu_t *emu, uintptr_t fcn)
{
 uFpWuuCp_t fn = (uFpWuuCp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFpuippp(x86emu_t *emu, uintptr_t fcn)
{
 uFpuippp_t fn = (uFpuippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFppippp(x86emu_t *emu, uintptr_t fcn)
{
 uFppippp_t fn = (uFppippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFppuuup(x86emu_t *emu, uintptr_t fcn)
{
 uFppuuup_t fn = (uFppuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFppuupu(x86emu_t *emu, uintptr_t fcn)
{
 uFppuupu_t fn = (uFppuupu_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void uFpppppi(x86emu_t *emu, uintptr_t fcn)
{
 uFpppppi_t fn = (uFpppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void uFpppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFpppppp_t fn = (uFpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void UFpippup(x86emu_t *emu, uintptr_t fcn)
{
 UFpippup_t fn = (UFpippup_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void lFipLipu(x86emu_t *emu, uintptr_t fcn)
{
 lFipLipu_t fn = (lFipLipu_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void lFipLipp(x86emu_t *emu, uintptr_t fcn)
{
 lFipLipp_t fn = (lFipLipp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void lFipLpLL(x86emu_t *emu, uintptr_t fcn)
{
 lFipLpLL_t fn = (lFipLpLL_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24));
}
void LFEupppp(x86emu_t *emu, uintptr_t fcn)
{
 LFEupppp_t fn = (LFEupppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void LFEppppi(x86emu_t *emu, uintptr_t fcn)
{
 LFEppppi_t fn = (LFEppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void LFpipipi(x86emu_t *emu, uintptr_t fcn)
{
 LFpipipi_t fn = (LFpipipi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void LFpLippp(x86emu_t *emu, uintptr_t fcn)
{
 LFpLippp_t fn = (LFpLippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void LFSpLiip(x86emu_t *emu, uintptr_t fcn)
{
 LFSpLiip_t fn = (LFSpLiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEipppV(x86emu_t *emu, uintptr_t fcn)
{
 pFEipppV_t fn = (pFEipppV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), (void *)(emu->regs[_SP].dword[0] + 20));
}
void pFEpiupp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpiupp_t fn = (pFEpiupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpippp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpippp_t fn = (pFEpippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpuipp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpuipp_t fn = (pFEpuipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpuupp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpuupp_t fn = (pFEpuupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpuppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpuppp_t fn = (pFEpuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpLLiN(x86emu_t *emu, uintptr_t fcn)
{
 pFEpLLiN_t fn = (pFEpLLiN_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppCWp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCWp_t fn = (pFEppCWp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppCuW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuW_t fn = (pFEppCuW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFEppCuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuu_t fn = (pFEppCuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFEppuWp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuWp_t fn = (pFEppuWp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppuuC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuC_t fn = (pFEppuuC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFEppuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuu_t fn = (pFEppuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFEppuup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuup_t fn = (pFEppuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppLLp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppLLp_t fn = (pFEppLLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEpppLp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppLp_t fn = (pFEpppLp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFEppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppi_t fn = (pFEppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20));
}
void pFEppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppp_t fn = (pFEppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20));
}
void pFiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFiiiiii_t fn = (pFiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFiCiiCi(x86emu_t *emu, uintptr_t fcn)
{
 pFiCiiCi_t fn = (pFiCiiCi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFdddddd(x86emu_t *emu, uintptr_t fcn)
{
 pFdddddd_t fn = (pFdddddd_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44));
}
void pFpiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiiiu_t fn = (pFpiiiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpiiCCC(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiCCC_t fn = (pFpiiCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpiiuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiuuu_t fn = (pFpiiuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpiUUUU(x86emu_t *emu, uintptr_t fcn)
{
 pFpiUUUU_t fn = (pFpiUUUU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 28), *(uint64_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpippip(x86emu_t *emu, uintptr_t fcn)
{
 pFpippip_t fn = (pFpippip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpipppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpipppp_t fn = (pFpipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpuuuuu_t fn = (pFpuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpupppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpupppp_t fn = (pFpupppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFplpppp(x86emu_t *emu, uintptr_t fcn)
{
 pFplpppp_t fn = (pFplpppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpLiLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFpLiLpp_t fn = (pFpLiLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpLpLLi(x86emu_t *emu, uintptr_t fcn)
{
 pFpLpLLi_t fn = (pFpLpLLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFppiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiii_t fn = (pFppiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFppiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFppiipp_t fn = (pFppiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFppiCCC(x86emu_t *emu, uintptr_t fcn)
{
 pFppiCCC_t fn = (pFppiCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFppippi(x86emu_t *emu, uintptr_t fcn)
{
 pFppippi_t fn = (pFppippi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFppippp(x86emu_t *emu, uintptr_t fcn)
{
 pFppippp_t fn = (pFppippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFpppiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiii_t fn = (pFpppiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpppiui(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiui_t fn = (pFpppiui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpppupp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppupp_t fn = (pFpppupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFppppii(x86emu_t *emu, uintptr_t fcn)
{
 pFppppii_t fn = (pFppppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppi_t fn = (pFpppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpppppu(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppu_t fn = (pFpppppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFpppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppp_t fn = (pFpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFSpiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFSpiiii_t fn = (pFSpiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(io_convert(*(void **)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void vFEpipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpipppp_t fn = (vFEpipppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFEpuipuV(x86emu_t *emu, uintptr_t fcn)
{
 vFEpuipuV_t fn = (vFEpuipuV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), (void *)(emu->regs[_SP].dword[0] + 24));
}
void vFEppippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppippp_t fn = (vFEppippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFEpppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppppp_t fn = (vFEpppppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void vFiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiip_t fn = (vFiiiiiip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiuup_t fn = (vFiiiiuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFiiuilil(x86emu_t *emu, uintptr_t fcn)
{
 vFiiuilil_t fn = (vFiiuilil_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFiiffffp(x86emu_t *emu, uintptr_t fcn)
{
 vFiiffffp_t fn = (vFiiffffp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFiuulipi(x86emu_t *emu, uintptr_t fcn)
{
 vFiuulipi_t fn = (vFiuulipi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFiupuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiupuuup_t fn = (vFiupuuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFilipliu(x86emu_t *emu, uintptr_t fcn)
{
 vFilipliu_t fn = (vFilipliu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFilulipi(x86emu_t *emu, uintptr_t fcn)
{
 vFilulipi_t fn = (vFilulipi_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFCCCCfff(x86emu_t *emu, uintptr_t fcn)
{
 vFCCCCfff_t fn = (vFCCCCfff_t)fcn;
 fn(*(uint8_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiii_t fn = (vFuiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiC_t fn = (vFuiiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiuip_t fn = (vFuiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiuup_t fn = (vFuiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiii_t fn = (vFuiuiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiC_t fn = (vFuiuiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiip_t fn = (vFuiuiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuiiuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiuL_t fn = (vFuiuiiuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiuCiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuCiuu_t fn = (vFuiuCiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiupiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupiiu_t fn = (vFuiupiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuiupuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupuip_t fn = (vFuiupuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuipiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuipiiii_t fn = (vFuipiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuipffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuipffff_t fn = (vFuipffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28));
}
void vFuipdddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuipdddd_t fn = (vFuipdddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40));
}
void vFuuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiii_t fn = (vFuuiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiC_t fn = (vFuuiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiu_t fn = (vFuuiiiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiip_t fn = (vFuuiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiuup_t fn = (vFuuiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiCiui(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiCiui_t fn = (vFuuiCiui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiCiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiCiuu_t fn = (vFuuiCiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiuiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiii_t fn = (vFuuiuiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuiuiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiC_t fn = (vFuuiuiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuipppp_t fn = (vFuuipppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiiii_t fn = (vFuuuiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuiiCp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiiCp_t fn = (vFuuuiiCp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuiuii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiuii_t fn = (vFuuuiuii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuiuil(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiuil_t fn = (vFuuuiuil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuiupi(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiupi_t fn = (vFuuuiupi_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuu_t fn = (vFuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuulll(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuulll_t fn = (vFuuuulll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuuffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuffff_t fn = (vFuuuffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuudddd(x86emu_t *emu, uintptr_t fcn)
{
 vFuuudddd_t fn = (vFuuudddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40));
}
void vFuuffiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuffiip_t fn = (vFuuffiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuuddiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuddiip_t fn = (vFuuddiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuulluup(x86emu_t *emu, uintptr_t fcn)
{
 vFuulluup_t fn = (vFuulluup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuupiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuupiiii_t fn = (vFuupiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuppppu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuppppu_t fn = (vFuuppppu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFuuppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuppppp_t fn = (vFuuppppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFuffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuffffff_t fn = (vFuffffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28));
}
void vFudddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFudddddd_t fn = (vFudddddd_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40), *(double *)(emu->regs[_SP].dword[0] + 48));
}
void vFlipuiip(x86emu_t *emu, uintptr_t fcn)
{
 vFlipuiip_t fn = (vFlipuiip_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFlliiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFlliiiip_t fn = (vFlliiiip_t)fcn;
 fn(*(intptr_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpiiiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiipp_t fn = (vFpiiiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpiiliip(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiliip_t fn = (vFpiiliip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpiipCpp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiipCpp_t fn = (vFpiipCpp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpipipii(x86emu_t *emu, uintptr_t fcn)
{
 vFpipipii_t fn = (vFpipipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpipppii(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppii_t fn = (vFpipppii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuuuuu_t fn = (vFpuuuuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpuuUUuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpuuUUuu_t fn = (vFpuuUUuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFpuupppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuupppp_t fn = (vFpuupppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpUiUiup(x86emu_t *emu, uintptr_t fcn)
{
 vFpUiUiup_t fn = (vFpUiUiup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFpUUUUuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpUUUUuu_t fn = (vFpUUUUuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFpddiidd(x86emu_t *emu, uintptr_t fcn)
{
 vFpddiidd_t fn = (vFpddiidd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40));
}
void vFpdddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFpdddddd_t fn = (vFpdddddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40), *(double *)(emu->regs[_SP].dword[0] + 48));
}
void vFpLiLiLp(x86emu_t *emu, uintptr_t fcn)
{
 vFpLiLiLp_t fn = (vFpLiLiLp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiii_t fn = (vFppiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiip_t fn = (vFppiiiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppiiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiipi_t fn = (vFppiiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppiipii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipii_t fn = (vFppiipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppiipuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipuu_t fn = (vFppiipuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppiippp(x86emu_t *emu, uintptr_t fcn)
{
 vFppiippp_t fn = (vFppiippp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppilppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppilppi_t fn = (vFppilppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppiLiLp(x86emu_t *emu, uintptr_t fcn)
{
 vFppiLiLp_t fn = (vFppiLiLp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppipiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppipiip_t fn = (vFppipiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppipipp(x86emu_t *emu, uintptr_t fcn)
{
 vFppipipp_t fn = (vFppipipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppp_t fn = (vFppipppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppddddi(x86emu_t *emu, uintptr_t fcn)
{
 vFppddddi_t fn = (vFppddddi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppddpii(x86emu_t *emu, uintptr_t fcn)
{
 vFppddpii_t fn = (vFppddpii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppLpppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppLpppi_t fn = (vFppLpppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppLpppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppLpppp_t fn = (vFppLpppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpppiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiiii_t fn = (vFpppiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpppiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiipi_t fn = (vFpppiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpppiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiipp_t fn = (vFpppiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFpppippi(x86emu_t *emu, uintptr_t fcn)
{
 vFpppippi_t fn = (vFpppippi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpppuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpppuuuu_t fn = (vFpppuuuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppppiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppppiii_t fn = (vFppppiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppppiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppppiip_t fn = (vFppppiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppppipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppppipi_t fn = (vFppppipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFpppppip(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppip_t fn = (vFpppppip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFppppppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppi_t fn = (vFppppppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppp_t fn = (vFppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpuiupV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuiupV_t fn = (iFEpuiupV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), (void *)(emu->regs[_SP].dword[0] + 24));
}
void iFEpupppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpupppp_t fn = (iFEpupppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFEpUuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpUuppp_t fn = (iFEpUuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpLiipV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLiipV_t fn = (iFEpLiipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), (void *)(emu->regs[_SP].dword[0] + 24));
}
void iFEppiuui(x86emu_t *emu, uintptr_t fcn)
{
 iFEppiuui_t fn = (iFEppiuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFEppuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppuppp_t fn = (iFEppuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFEpplppi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpplppi_t fn = (iFEpplppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFEppLpIi(x86emu_t *emu, uintptr_t fcn)
{
 iFEppLpIi_t fn = (iFEppLpIi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFEpppiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppiiu_t fn = (iFEpppiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void iFEpppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppppp_t fn = (iFEpppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void iFiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiii_t fn = (iFiiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiip_t fn = (iFiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFippuIup(x86emu_t *emu, uintptr_t fcn)
{
 iFippuIup_t fn = (iFippuIup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiiii_t fn = (iFpiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiiip_t fn = (iFpiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpiiiuwp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiiuwp_t fn = (iFpiiiuwp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpiiuuiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiuuiu_t fn = (iFpiiuuiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpiiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiiuuuu_t fn = (iFpiiuuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpiipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiipppp_t fn = (iFpiipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpiuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuiipp_t fn = (iFpiuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpiupiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpiupiii_t fn = (iFpiupiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpiupppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpiupppp_t fn = (iFpiupppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpipipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpipipip_t fn = (iFpipipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpippupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpippupp_t fn = (iFpippupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpippppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpippppp_t fn = (iFpippppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpIIpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpIIpppp_t fn = (iFpIIpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int64_t *)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpuiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiiiip_t fn = (iFpuiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpuiiuii(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiiuii_t fn = (iFpuiiuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpuipupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuipupp_t fn = (iFpuipupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpuuiuui(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuiuui_t fn = (iFpuuiuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpuuuppu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuuppu_t fn = (iFpuuuppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpuupppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuupppp_t fn = (iFpuupppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpupuuui(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuuui_t fn = (iFpupuuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpupuufu(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuufu_t fn = (iFpupuufu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpupuupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuupp_t fn = (iFpupuupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpupupui(x86emu_t *emu, uintptr_t fcn)
{
 iFpupupui_t fn = (iFpupupui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpuppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuppppp_t fn = (iFpuppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpLipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpLipipi_t fn = (iFpLipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppiiuui(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiuui_t fn = (iFppiiuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppiipii(x86emu_t *emu, uintptr_t fcn)
{
 iFppiipii_t fn = (iFppiipii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppiipiL(x86emu_t *emu, uintptr_t fcn)
{
 iFppiipiL_t fn = (iFppiipiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFppiippp_t fn = (iFppiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppipiip(x86emu_t *emu, uintptr_t fcn)
{
 iFppipiip_t fn = (iFppipiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFppipipi_t fn = (iFppipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppipipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppipipp_t fn = (iFppipipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppippip(x86emu_t *emu, uintptr_t fcn)
{
 iFppippip_t fn = (iFppippip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppipppi(x86emu_t *emu, uintptr_t fcn)
{
 iFppipppi_t fn = (iFppipppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppipppp_t fn = (iFppipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppuipiL(x86emu_t *emu, uintptr_t fcn)
{
 iFppuipiL_t fn = (iFppuipiL_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppLiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLiipp_t fn = (iFppLiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpppiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiii_t fn = (iFpppiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppiiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiuu_t fn = (iFpppiiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppiiup(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiup_t fn = (iFpppiiup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpppiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiipi_t fn = (iFpppiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppiuwu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiuwu_t fn = (iFpppiuwu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppippi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppippi_t fn = (iFpppippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppippp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppippp_t fn = (iFpppippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpppuiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpppuiii_t fn = (iFpppuiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFpppuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppuppp_t fn = (iFpppuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppppiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiii_t fn = (iFppppiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppipp_t fn = (iFppppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppppdpi(x86emu_t *emu, uintptr_t fcn)
{
 iFppppdpi_t fn = (iFppppdpi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpppppip(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppip_t fn = (iFpppppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFpppppup(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppup_t fn = (iFpppppup_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFppppppi(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppi_t fn = (iFppppppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppp_t fn = (iFppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFEiipppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEiipppp_t fn = (uFEiipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFEpiippp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpiippp_t fn = (uFEpiippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFEpuuppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpuuppp_t fn = (uFEpuuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFEpppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpppppp_t fn = (uFEpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void uFuippppp(x86emu_t *emu, uintptr_t fcn)
{
 uFuippppp_t fn = (uFuippppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFppiuppi(x86emu_t *emu, uintptr_t fcn)
{
 uFppiuppi_t fn = (uFppiuppi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void uFppiuppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppiuppp_t fn = (uFppiuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFppuuuup(x86emu_t *emu, uintptr_t fcn)
{
 uFppuuuup_t fn = (uFppuuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void LFEppLppU(x86emu_t *emu, uintptr_t fcn)
{
 LFEppLppU_t fn = (LFEppLppU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 24));
}
void LFEpppppu(x86emu_t *emu, uintptr_t fcn)
{
 LFEpppppu_t fn = (LFEpppppu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEpiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 pFEpiiiiu_t fn = (pFEpiiiiu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEpupppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpupppp_t fn = (pFEpupppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEpLiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFEpLiiii_t fn = (pFEpLiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEpLiiiI(x86emu_t *emu, uintptr_t fcn)
{
 pFEpLiiiI_t fn = (pFEpLiiiI_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEppCuup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuup_t fn = (pFEppCuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEppCppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCppp_t fn = (pFEppCppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEppuipp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuipp_t fn = (pFEppuipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEppuWWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuWWW_t fn = (pFEppuWWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEppuuWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuWW_t fn = (pFEppuuWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24));
}
void pFEppuuup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuup_t fn = (pFEppuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEppppip(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppip_t fn = (pFEppppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFEpppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppppp_t fn = (pFEpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24));
}
void pFifffppp(x86emu_t *emu, uintptr_t fcn)
{
 pFifffppp_t fn = (pFifffppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFuupupup(x86emu_t *emu, uintptr_t fcn)
{
 pFuupupup_t fn = (pFuupupup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFdiiiIiI(x86emu_t *emu, uintptr_t fcn)
{
 pFdiiiIiI_t fn = (pFdiiiIiI_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int64_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpiiUdii(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiUdii_t fn = (pFpiiUdii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpipippp(x86emu_t *emu, uintptr_t fcn)
{
 pFpipippp_t fn = (pFpipippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpuppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpuppppp_t fn = (pFpuppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFplppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFplppppp_t fn = (pFplppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpLpLLiL(x86emu_t *emu, uintptr_t fcn)
{
 pFpLpLLiL_t fn = (pFpLpLLiL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpLppiip(x86emu_t *emu, uintptr_t fcn)
{
 pFpLppiip_t fn = (pFpLppiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpLppLLi(x86emu_t *emu, uintptr_t fcn)
{
 pFpLppLLi_t fn = (pFpLppLLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppiiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiipp_t fn = (pFppiiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppiiCCC(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiCCC_t fn = (pFppiiCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppiippp(x86emu_t *emu, uintptr_t fcn)
{
 pFppiippp_t fn = (pFppiippp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppiLLip(x86emu_t *emu, uintptr_t fcn)
{
 pFppiLLip_t fn = (pFppiLLip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppipipp(x86emu_t *emu, uintptr_t fcn)
{
 pFppipipp_t fn = (pFppipipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFppuuuuu_t fn = (pFppuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppuuppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppuuppp_t fn = (pFppuuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppLiiip(x86emu_t *emu, uintptr_t fcn)
{
 pFppLiiip_t fn = (pFppLiiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFppLipip(x86emu_t *emu, uintptr_t fcn)
{
 pFppLipip_t fn = (pFppLipip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpppccci(x86emu_t *emu, uintptr_t fcn)
{
 pFpppccci_t fn = (pFpppccci_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int8_t *)(emu->regs[_SP].dword[0] + 16), *(int8_t *)(emu->regs[_SP].dword[0] + 20), *(int8_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiiii_t fn = (pFpppiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiipp_t fn = (pFpppiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpppIIIi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppIIIi_t fn = (pFpppIIIi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 16), *(int64_t *)(emu->regs[_SP].dword[0] + 24), *(int64_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFpppCCCi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppCCCi_t fn = (pFpppCCCi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppuuui(x86emu_t *emu, uintptr_t fcn)
{
 pFpppuuui_t fn = (pFpppuuui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppuupp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppuupp_t fn = (pFpppuupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFpppUUUi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppUUUi_t fn = (pFpppUUUi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFpppfffi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppfffi_t fn = (pFpppfffi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppdddi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppdddi_t fn = (pFpppdddi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFpppllli(x86emu_t *emu, uintptr_t fcn)
{
 pFpppllli_t fn = (pFpppllli_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppLLLi(x86emu_t *emu, uintptr_t fcn)
{
 pFpppLLLi_t fn = (pFpppLLLi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppppiii(x86emu_t *emu, uintptr_t fcn)
{
 pFppppiii_t fn = (pFppppiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppppuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFppppuuu_t fn = (pFppppuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFpppppuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppuu_t fn = (pFpppppuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFppppppi_t fn = (pFppppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppppppp_t fn = (pFppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFEiippppV(x86emu_t *emu, uintptr_t fcn)
{
 vFEiippppV_t fn = (vFEiippppV_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), (void *)(emu->regs[_SP].dword[0] + 28));
}
void vFEiupippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEiupippp_t fn = (vFEiupippp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFEippippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEippippp_t fn = (vFEippippp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFEppipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppipppp_t fn = (vFEppipppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFEpppippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppippp_t fn = (vFEpppippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFEpppuipV(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppuipV_t fn = (vFEpppuipV_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), (void *)(emu->regs[_SP].dword[0] + 28));
}
void vFEpppppuu(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppppuu_t fn = (vFEpppppuu_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void vFEppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppppppp_t fn = (vFEppppppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void vFiiiiuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiuuip_t fn = (vFiiiiuuip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFiilliilp(x86emu_t *emu, uintptr_t fcn)
{
 vFiilliilp_t fn = (vFiilliilp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFiupuiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiupuiuup_t fn = (vFiupuiuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFiupuuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiupuuuup_t fn = (vFiupuuuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiii_t fn = (vFuiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuiiiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiC_t fn = (vFuiiiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiuup_t fn = (vFuiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuiiipiup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiipiup_t fn = (vFuiiipiup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuiuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiii_t fn = (vFuiuiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuiuiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiip_t fn = (vFuiuiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuiuiiiuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiuL_t fn = (vFuiuiiiuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuiuiiCuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiCuL_t fn = (vFuiuiiCuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuiuiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiuuuu_t fn = (vFuiuiuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuCCCCfff(x86emu_t *emu, uintptr_t fcn)
{
 vFuCCCCfff_t fn = (vFuCCCCfff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiC_t fn = (vFuuiiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiuip_t fn = (vFuuiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiuup_t fn = (vFuuiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiiuupp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiuupp_t fn = (vFuuiiuupp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiii_t fn = (vFuuiuiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiuiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiiC_t fn = (vFuuiuiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuiuiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiip_t fn = (vFuuiuiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuuuiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiiiiu_t fn = (vFuuuiiiiu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuuiuCil(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiuCil_t fn = (vFuuuiuCil_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuuipipp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuipipp_t fn = (vFuuuipipp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuu_t fn = (vFuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFuuufffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuuufffff_t fn = (vFuuufffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32));
}
void vFffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFffffffff_t fn = (vFffffffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32));
}
void vFpiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiiiii_t fn = (vFpiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpiiiipii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiipii_t fn = (vFpiiiipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpiiULipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiULipp_t fn = (vFpiiULipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint64_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFpiUuupup(x86emu_t *emu, uintptr_t fcn)
{
 vFpiUuupup_t fn = (vFpiUuupup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFpippiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpippiiuu_t fn = (vFpippiiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpippiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpippiipi_t fn = (vFpippiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpippippp(x86emu_t *emu, uintptr_t fcn)
{
 vFpippippp_t fn = (vFpippippp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFpippippV(x86emu_t *emu, uintptr_t fcn)
{
 vFpippippV_t fn = (vFpippippV_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), (void *)(emu->regs[_SP].dword[0] + 32));
}
void vFpuppLLLL(x86emu_t *emu, uintptr_t fcn)
{
 vFpuppLLLL_t fn = (vFpuppLLLL_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpUiUiupi(x86emu_t *emu, uintptr_t fcn)
{
 vFpUiUiupi_t fn = (vFpUiUiupi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFpUuuUUUi(x86emu_t *emu, uintptr_t fcn)
{
 vFpUuuUUUi_t fn = (vFpUuuUUUi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 32), *(uint64_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFppiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiii_t fn = (vFppiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppiiipii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiipii_t fn = (vFppiiipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppipipii(x86emu_t *emu, uintptr_t fcn)
{
 vFppipipii_t fn = (vFppipipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppipppui(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppui_t fn = (vFppipppui_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppippppi(x86emu_t *emu, uintptr_t fcn)
{
 vFppippppi_t fn = (vFppippppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppippppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppippppp_t fn = (vFppippppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFppdddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFppdddddd_t fn = (vFppdddddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52));
}
void vFpplppppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpplppppi_t fn = (vFpplppppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpplppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpplppppp_t fn = (vFpplppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFppppiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppppiipi_t fn = (vFppppiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFpppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppppp_t fn = (vFpppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFEipupupi(x86emu_t *emu, uintptr_t fcn)
{
 iFEipupupi_t fn = (iFEipupupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void iFEpippppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpippppp_t fn = (iFEpippppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpuiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuiippp_t fn = (iFEpuiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpuuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuiipp_t fn = (iFEpuuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpuuuipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuuipp_t fn = (iFEpuuuipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpuuLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuLppp_t fn = (iFEpuuLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEpLiLppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpLiLppp_t fn = (iFEpLiLppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFEppppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppppipp_t fn = (iFEppppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void iFiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiiip_t fn = (iFiiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFiiupiupi(x86emu_t *emu, uintptr_t fcn)
{
 iFiiupiupi_t fn = (iFiiupiupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFuuuuuuuu_t fn = (iFuuuuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpCCWWpWu(x86emu_t *emu, uintptr_t fcn)
{
 iFpCCWWpWu_t fn = (iFpCCWWpWu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint8_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint16_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpWCuWCuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpWCuWCuu_t fn = (iFpWCuWCuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpuiipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiipppp_t fn = (iFpuiipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpuipuppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuipuppp_t fn = (iFpuipuppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpuippupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuippupp_t fn = (iFpuippupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpuuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuiiiii_t fn = (iFpuuiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpupppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpupppppp_t fn = (iFpupppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpUuuLpUi(x86emu_t *emu, uintptr_t fcn)
{
 iFpUuuLpUi_t fn = (iFpUuuLpUi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint64_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(uint64_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFpdiiiIiI(x86emu_t *emu, uintptr_t fcn)
{
 iFpdiiiIiI_t fn = (iFpdiiiIiI_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int64_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int64_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFppiiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiiiiu_t fn = (iFppiiiiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFppIIIppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppIIIppp_t fn = (iFppIIIppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int64_t *)(emu->regs[_SP].dword[0] + 12), *(int64_t *)(emu->regs[_SP].dword[0] + 20), *(int64_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFpppiiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiipi_t fn = (iFpppiiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpppiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiippp_t fn = (iFpppiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpppipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppipipi_t fn = (iFpppipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpppipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppipppp_t fn = (iFpppipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFppppiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiipi_t fn = (iFppppiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFppppippp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppippp_t fn = (iFppppippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFpppppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppupp_t fn = (iFpppppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFppppppii(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppii_t fn = (iFppppppii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpppppppi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppi_t fn = (iFpppppppi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFpppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppp_t fn = (iFpppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void CFuiifpppp(x86emu_t *emu, uintptr_t fcn)
{
 CFuiifpppp_t fn = (CFuiifpppp_t)fcn;
 emu->regs[_AX].dword[0] = (unsigned char)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFEipipppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEipipppp_t fn = (uFEipipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFEpiupppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpiupppp_t fn = (uFEpiupppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFEppipppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEppipppp_t fn = (uFEppipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFEpppuppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpppuppp_t fn = (uFEpppuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFEppppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEppppppp_t fn = (uFEppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void uFuipppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFuipppppp_t fn = (uFuipppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFuupuuiuf(x86emu_t *emu, uintptr_t fcn)
{
 uFuupuuiuf_t fn = (uFuupuuiuf_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32));
}
void uFulpppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFulpppppp_t fn = (uFulpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFpupuuuCp(x86emu_t *emu, uintptr_t fcn)
{
 uFpupuuuCp_t fn = (uFpupuuuCp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFppuuuupp(x86emu_t *emu, uintptr_t fcn)
{
 uFppuuuupp_t fn = (uFppuuuupp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFppuuuppi(x86emu_t *emu, uintptr_t fcn)
{
 uFppuuuppi_t fn = (uFppuuuppi_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void uFppuppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppuppppp_t fn = (uFppuppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void LFEpiupppp(x86emu_t *emu, uintptr_t fcn)
{
 LFEpiupppp_t fn = (LFEpiupppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFEiplllpp(x86emu_t *emu, uintptr_t fcn)
{
 pFEiplllpp_t fn = (pFEiplllpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFEpiuCppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpiuCppp_t fn = (pFEpiuCppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFEppCuuCC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuCC_t fn = (pFEppCuuCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppCuuWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuWW_t fn = (pFEppCuuWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppCuuup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuup_t fn = (pFEppCuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFEppuuwwu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuwwu_t fn = (pFEppuuwwu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuuu_t fn = (pFEppuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppuuUUU(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuUUU_t fn = (pFEppuuUUU_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint64_t *)(emu->regs[_SP].dword[0] + 20), *(uint64_t *)(emu->regs[_SP].dword[0] + 28), *(uint64_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFEppLiiip(x86emu_t *emu, uintptr_t fcn)
{
 pFEppLiiip_t fn = (pFEppLiiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFEpppuipV(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppuipV_t fn = (pFEpppuipV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), (void *)(emu->regs[_SP].dword[0] + 28));
}
void pFEpppppiV(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppppiV_t fn = (pFEpppppiV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), (void *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppppi_t fn = (pFEppppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28));
}
void pFEppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppppp_t fn = (pFEppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
void pFiipppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFiipppppp_t fn = (pFiipppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFuiiiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFuiiiuuuu_t fn = (pFuiiiuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFuupupipp(x86emu_t *emu, uintptr_t fcn)
{
 pFuupupipp_t fn = (pFuupupipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpiiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiiiiuu_t fn = (pFpiiiiiuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFpiUdiiUi(x86emu_t *emu, uintptr_t fcn)
{
 pFpiUdiiUi_t fn = (pFpiUdiiUi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint64_t *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint64_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFpipppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpipppppp_t fn = (pFpipppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpWWiCpup(x86emu_t *emu, uintptr_t fcn)
{
 pFpWWiCpup_t fn = (pFpWWiCpup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(uint16_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpuuuupup(x86emu_t *emu, uintptr_t fcn)
{
 pFpuuuupup_t fn = (pFpuuuupup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpupupuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpupupuuu_t fn = (pFpupupuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFpupLLLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFpupLLLpp_t fn = (pFpupLLLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpdwwWWui(x86emu_t *emu, uintptr_t fcn)
{
 pFpdwwWWui_t fn = (pFpdwwWWui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFplpppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFplpppppp_t fn = (pFplpppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpLppLLiL(x86emu_t *emu, uintptr_t fcn)
{
 pFpLppLLiL_t fn = (pFpLppLLiL_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFppiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiiiii_t fn = (pFppiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFpppuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpppuuuuu_t fn = (pFpppuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFpppppupp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppupp_t fn = (pFpppppupp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEuuuupppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEuuuupppp_t fn = (vFEuuuupppp_t)fcn;
 fn(emu, *(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEpiiiiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpiiiiipp_t fn = (vFEpiiiiipp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEpuuuippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpuuuippp_t fn = (vFEpuuuippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEppiipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppiipppp_t fn = (vFEppiipppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEpppiippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppiippp_t fn = (vFEpppiippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFEppppippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEppppippp_t fn = (vFEppppippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void vFiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiiii_t fn = (vFiiiiiiiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFiiiiiiill(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiill_t fn = (vFiiiiiiill_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(intptr_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFiiiiillli(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiillli_t fn = (vFiiiiillli_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFiiilllilp(x86emu_t *emu, uintptr_t fcn)
{
 vFiiilllilp_t fn = (vFiiilllilp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFiupuiuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiupuiuuup_t fn = (vFiupuiuuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFiupuuuuup(x86emu_t *emu, uintptr_t fcn)
{
 vFiupuuuuup_t fn = (vFiupuuuuup_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiii_t fn = (vFuiiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuiiiiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiC_t fn = (vFuiiiiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuiiiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiuip_t fn = (vFuiiiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiuup_t fn = (vFuiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuiuiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiiip_t fn = (vFuiuiiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuiuiiiCuL(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiCuL_t fn = (vFuiuiiiCuL_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uintptr_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuiupuffup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiupuffup_t fn = (vFuiupuffup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuuiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiii_t fn = (vFuuiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuuiiiiiiC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiC_t fn = (vFuuiiiiiiC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuuiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiuup_t fn = (vFuuiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuuiuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiiii_t fn = (vFuuiuiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuuiuiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiiip_t fn = (vFuuiuiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuuuiiiiCp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiiiiCp_t fn = (vFuuuiiiiCp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuuu_t fn = (vFuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFuupuuiuuf(x86emu_t *emu, uintptr_t fcn)
{
 vFuupuuiuuf_t fn = (vFuupuuiuuf_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36));
}
void vFuffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuffffffff_t fn = (vFuffffffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36));
}
void vFffCCCCfff(x86emu_t *emu, uintptr_t fcn)
{
 vFffCCCCfff_t fn = (vFffCCCCfff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36));
}
void vFddddddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFddddddddd_t fn = (vFddddddddd_t)fcn;
 fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52), *(double *)(emu->regs[_SP].dword[0] + 60), *(double *)(emu->regs[_SP].dword[0] + 68));
}
void vFpipiuiipp(x86emu_t *emu, uintptr_t fcn)
{
 vFpipiuiipp_t fn = (vFpipiuiipp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFpipippppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpipippppi_t fn = (vFpipippppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFpipppiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppiipi_t fn = (vFpipppiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiiii_t fn = (vFppiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppiiiiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiipi_t fn = (vFppiiiiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppiiipiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiipiii_t fn = (vFppiiipiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppiipiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipiiii_t fn = (vFppiipiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppipppiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppiii_t fn = (vFppipppiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppipppiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppiip_t fn = (vFppipppiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFppuuiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppuuiiiii_t fn = (vFppuuiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppddddidd(x86emu_t *emu, uintptr_t fcn)
{
 vFppddddidd_t fn = (vFppddddidd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 48), *(double *)(emu->regs[_SP].dword[0] + 56));
}
void vFpplpppppi(x86emu_t *emu, uintptr_t fcn)
{
 vFpplpppppi_t fn = (vFpplpppppi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFpppiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiiiiii_t fn = (vFpppiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void vFppppipiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppppipiip_t fn = (vFppppipiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFpppppippp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppippp_t fn = (vFpppppippp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppppp_t fn = (vFppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFEpiiiiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiiiiipi_t fn = (iFEpiiiiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFEpuuiippu(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuiippu_t fn = (iFEpuuiippu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void iFEpuuuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuuiipp_t fn = (iFEpuuuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFEpppipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppipppp_t fn = (iFEpppipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFEpppppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppppupp_t fn = (iFEpppppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void iFiiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiiiip_t fn = (iFiiiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFiiiipiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiipiiip_t fn = (iFiiiipiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFipiipippi(x86emu_t *emu, uintptr_t fcn)
{
 iFipiipippi_t fn = (iFipiipippi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFdddpppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFdddpppppp_t fn = (iFdddpppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFpiuuupipu(x86emu_t *emu, uintptr_t fcn)
{
 iFpiuuupipu_t fn = (iFpiuuupipu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpipLpiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFpipLpiiip_t fn = (iFpipLpiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpuiuuipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpuiuuipip_t fn = (iFpuiuuipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 iFpuuuuuuuu_t fn = (iFpuuuuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpupuupWWu(x86emu_t *emu, uintptr_t fcn)
{
 iFpupuupWWu_t fn = (iFpupuupWWu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpdiiiUiUp(x86emu_t *emu, uintptr_t fcn)
{
 iFpdiiiUiUp_t fn = (iFpdiiiUiUp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint64_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uint64_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFppiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiiiiii_t fn = (iFppiiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFppiuiippu(x86emu_t *emu, uintptr_t fcn)
{
 iFppiuiippu_t fn = (iFppiuiippu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFppipiiipi(x86emu_t *emu, uintptr_t fcn)
{
 iFppipiiipi_t fn = (iFppipiiipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFppuLLpupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuLLpupp_t fn = (iFppuLLpupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppupppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppupppupp_t fn = (iFppupppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppLpiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFppLpiippp_t fn = (iFppLpiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpppiiipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiipip_t fn = (iFpppiiipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpppiiuuii(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiuuii_t fn = (iFpppiiuuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpppiipiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiipiiu_t fn = (iFpppiipiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpppLLLupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppLLLupp_t fn = (iFpppLLLupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFpppLppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppLppupp_t fn = (iFpppLppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppppiiupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiiupp_t fn = (iFppppiiupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppppupiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppppupiii_t fn = (iFppppupiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFpppppLupp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppLupp_t fn = (iFpppppLupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppppppupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppupp_t fn = (iFppppppupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFppppppppu(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppppu_t fn = (iFppppppppu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void iFppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppppp_t fn = (iFppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void uFEipippppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEipippppp_t fn = (uFEipippppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFEpppufppp(x86emu_t *emu, uintptr_t fcn)
{
 uFEpppufppp_t fn = (uFEpppufppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void uFuulpiuiuf(x86emu_t *emu, uintptr_t fcn)
{
 uFuulpiuiuf_t fn = (uFuulpiuiuf_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36));
}
void uFppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppppppppp_t fn = (uFppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void LFEppppppii(x86emu_t *emu, uintptr_t fcn)
{
 LFEppppppii_t fn = (LFEppppppii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppiiuuui(x86emu_t *emu, uintptr_t fcn)
{
 pFEppiiuuui_t fn = (pFEppiiuuui_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppCuwwWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuwwWW_t fn = (pFEppCuwwWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppCuWCCC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuWCCC_t fn = (pFEppCuWCCC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppCuuwwp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuwwp_t fn = (pFEppCuuwwp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFEppCuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuuuu_t fn = (pFEppCuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppuippuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuippuu_t fn = (pFEppuippuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppuuuwwu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuwwu_t fn = (pFEppuuuwwu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEppuupwwC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuupwwC_t fn = (pFEppuupwwC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEpppppiiV(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppppiiV_t fn = (pFEpppppiiV_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), (void *)(emu->regs[_SP].dword[0] + 32));
}
void pFEpppppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppppppi_t fn = (pFEpppppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32));
}
void pFEpppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpppppppp_t fn = (pFEpppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32));
}
void pFpiiiiuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFpiiiiuuuu_t fn = (pFpiiiiuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpupuuuuup(x86emu_t *emu, uintptr_t fcn)
{
 pFpupuuuuup_t fn = (pFpupuuuuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFppiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiiiiip_t fn = (pFppiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFppiiuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiuuuuu_t fn = (pFppiiuuuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFppipppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppipppppp_t fn = (pFppipppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFpppiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiiiiii_t fn = (pFpppiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpppiipppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppiipppp_t fn = (pFpppiipppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFpppppiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppiipp_t fn = (pFpppppiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFEiippppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEiippppppp_t fn = (vFEiippppppp_t)fcn;
 fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFEpippppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpippppppp_t fn = (vFEpippppppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFEpppiipppp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppiipppp_t fn = (vFEpppiipppp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void vFiiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiiiii_t fn = (vFiiiiiiiiii_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFiiiiiiiiiu(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiiiiu_t fn = (vFiiiiiiiiiu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFiiiiiiiiui(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiiiui_t fn = (vFiiiiiiiiui_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFiiiiiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiiiiiuu_t fn = (vFiiiiiiiiuu_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFiiillliiip(x86emu_t *emu, uintptr_t fcn)
{
 vFiiillliiip_t fn = (vFiiillliiip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFippppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFippppppppp_t fn = (vFippppppppp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiii_t fn = (vFuiiiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFuiiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiip_t fn = (vFuiiiiiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuiiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiuup_t fn = (vFuiiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuiuiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiiuup_t fn = (vFuiuiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuuiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiii_t fn = (vFuuiiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFuuiiiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiuip_t fn = (vFuuiiiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuuiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiuup_t fn = (vFuuiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuuiuiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiuiiiiip_t fn = (vFuuiuiiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuuuuuuuCCC(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuCCC_t fn = (vFuuuuuuuCCC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint8_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36), *(uint8_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFuuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuuuu_t fn = (vFuuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFuupuiupuuf(x86emu_t *emu, uintptr_t fcn)
{
 vFuupuiupuuf_t fn = (vFuupuiupuuf_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40));
}
void vFuffiiffiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuffiiffiip_t fn = (vFuffiiffiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFuddiiddiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuddiiddiip_t fn = (vFuddiiddiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void vFffffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFffffffffff_t fn = (vFffffffffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40));
}
void vFpipippppip(x86emu_t *emu, uintptr_t fcn)
{
 vFpipippppip_t fn = (vFpipippppip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFpipppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppppppp_t fn = (vFpipppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFppiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiiiii_t fn = (vFppiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFppiiiiipip(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiipip_t fn = (vFppiiiiipip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFppiipppiip(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipppiip_t fn = (vFppiipppiip_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFppiippppii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiippppii_t fn = (vFppiippppii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFppipppiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppiiii_t fn = (vFppipppiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFppuuuuiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppuuuuiiuu_t fn = (vFppuuuuiiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void vFppdddddddd(x86emu_t *emu, uintptr_t fcn)
{
 vFppdddddddd_t fn = (vFppdddddddd_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52), *(double *)(emu->regs[_SP].dword[0] + 60), *(double *)(emu->regs[_SP].dword[0] + 68));
}
void vFpppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppppppp_t fn = (vFpppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFEpiiiiippp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpiiiiippp_t fn = (iFEpiiiiippp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFEpuipupppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuipupppp_t fn = (iFEpuipupppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFEpuuiiuipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuiiuipp_t fn = (iFEpuuiiuipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFEpuuuuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuuuiipp_t fn = (iFEpuuuuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFEppppppipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppppppipp_t fn = (iFEppppppipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void iFiiiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiiiiip_t fn = (iFiiiiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFpiipiiipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiipiiipip_t fn = (iFpiipiiipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFpippddiidd(x86emu_t *emu, uintptr_t fcn)
{
 iFpippddiidd_t fn = (iFpippddiidd_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52));
}
void iFpuupiuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuupiuiipp_t fn = (iFpuupiuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFpddpippppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpddpippppp_t fn = (iFpddpippppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFppipiippii(x86emu_t *emu, uintptr_t fcn)
{
 iFppipiippii_t fn = (iFppipiippii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFppuuiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 iFppuuiiiiii_t fn = (iFppuuiiiiii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFppuuiiuupi(x86emu_t *emu, uintptr_t fcn)
{
 iFppuuiiuupi_t fn = (iFppuuiiuupi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFpppiiipipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiipipi_t fn = (iFpppiiipipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFpppLLipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppLLipppp_t fn = (iFpppLLipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFppppiiuuii(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiiuuii_t fn = (iFppppiiuuii_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFpppppppipi(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppipi_t fn = (iFpppppppipi_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void uFpppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFpppppppppp_t fn = (uFpppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void pFEiippppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEiippppppp_t fn = (pFEiippppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFEpiiiiiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpiiiiiipp_t fn = (pFEpiiiiiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFEpippppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEpippppppp_t fn = (pFEpippppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFEppCCuuwwC(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCCuuwwC_t fn = (pFEppCCuuwwC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(int16_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFEppCuwwWWu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuwwWWu_t fn = (pFEppCuwwWWu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFEppCuuuCup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuuCup_t fn = (pFEppCuuuCup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36));
}
void pFEppuuWWCuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuWWCuu_t fn = (pFEppuuWWCuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36));
}
void pFpupLLLLLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFpupLLLLLpp_t fn = (pFpupLLLLLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uintptr_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void pFplllllllll(x86emu_t *emu, uintptr_t fcn)
{
 pFplllllllll_t fn = (pFplllllllll_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(intptr_t *)(emu->regs[_SP].dword[0] + 8), *(intptr_t *)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(intptr_t *)(emu->regs[_SP].dword[0] + 36), *(intptr_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFppuiipuuii(x86emu_t *emu, uintptr_t fcn)
{
 pFppuiipuuii_t fn = (pFppuiipuuii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFppuuLLuppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppuuLLuppp_t fn = (pFppuuLLuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void pFpppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppppppp_t fn = (pFpppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFEpiiiupupup(x86emu_t *emu, uintptr_t fcn)
{
 vFEpiiiupupup_t fn = (vFEpiiiupupup_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void vFiiiiillliip(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiillliip_t fn = (vFiiiiillliip_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFiiiiilllilp(x86emu_t *emu, uintptr_t fcn)
{
 vFiiiiilllilp_t fn = (vFiiiiilllilp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(intptr_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFiippppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFiippppppppp_t fn = (vFiippppppppp_t)fcn;
 fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiiiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiiip_t fn = (vFuiiiiiiiiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiiiiiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiuip_t fn = (vFuiiiiiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiiiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiuup_t fn = (vFuiiiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiiiillliip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiillliip_t fn = (vFuiiiillliip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(intptr_t *)(emu->regs[_SP].dword[0] + 24), *(intptr_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiuiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiuiiiiiuup_t fn = (vFuiuiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuuiiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiuup_t fn = (vFuuiiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuuupupppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFuuupupppppp_t fn = (vFuuupupppppp_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuuffiiffiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuffiiffiip_t fn = (vFuuffiiffiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuufffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuufffffffff_t fn = (vFuufffffffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44));
}
void vFuuddiiddiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuddiiddiip_t fn = (vFuuddiiddiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void vFuffffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuffffffffff_t fn = (vFuffffffffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44));
}
void vFuLuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuLuuuuuuuuu_t fn = (vFuLuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFLufffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFLufffffffff_t fn = (vFLufffffffff_t)fcn;
 fn(*(uintptr_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44));
}
void vFpipipiipiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpipipiipiii_t fn = (vFpipipiipiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFpipppiiiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppiiiipi_t fn = (vFpipppiiiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFpupiiuPuPuP(x86emu_t *emu, uintptr_t fcn)
{
 vFpupiiuPuPuP_t fn = (vFpupiiuPuPuP_t)fcn;
 void *arg28 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 28));
 void *arg36 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 36));
 void *arg44 = VulkanFromx86(*(void **)(emu->regs[_SP].dword[0] + 44));
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), arg28, *(uint32_t *)(emu->regs[_SP].dword[0] + 32), arg36, *(uint32_t *)(emu->regs[_SP].dword[0] + 40), arg44);
 VulkanTox86(arg28);
 VulkanTox86(arg36);
 VulkanTox86(arg44);
}
void vFppiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiiiiii_t fn = (vFppiiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppiiiiipiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiipiii_t fn = (vFppiiiiipiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppiiiiddddi(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiddddi_t fn = (vFppiiiiddddi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 60));
}
void vFppiipppiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipppiiii_t fn = (vFppiipppiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppipppiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppiiiii_t fn = (vFppipppiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppipppuiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppuiiii_t fn = (vFppipppuiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void vFppipppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppppppp_t fn = (vFppipppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppppppp_t fn = (vFppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFEpuipuppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuipuppppp_t fn = (iFEpuipuppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFEpuuiiuippu(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuiiuippu_t fn = (iFEpuuiiuippu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFEpuuuuuiipp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpuuuuuiipp_t fn = (iFEpuuuuuiipp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFEpppipppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppipppppp_t fn = (iFEpppipppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void iFEppppiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 iFEppppiiiiuu_t fn = (iFEppppiiiiuu_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void iFiiiiiiiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiiiiiiiip_t fn = (iFiiiiiiiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFpiippiiipip(x86emu_t *emu, uintptr_t fcn)
{
 iFpiippiiipip_t fn = (iFpiippiiipip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFppippipppip(x86emu_t *emu, uintptr_t fcn)
{
 iFppippipppip_t fn = (iFppippipppip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFppuppLLpupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppuppLLpupp_t fn = (iFppuppLLpupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFppppiiuuiiu(x86emu_t *emu, uintptr_t fcn)
{
 iFppppiiuuiiu_t fn = (iFppppiiuuiiu_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44));
}
void uFEpiiupppiuV(x86emu_t *emu, uintptr_t fcn)
{
 uFEpiiupppiuV_t fn = (uFEpiiupppiuV_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), (void *)(emu->regs[_SP].dword[0] + 40));
}
void uFEpiippppiup(x86emu_t *emu, uintptr_t fcn)
{
 uFEpiippppiup_t fn = (uFEpiippppiup_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void uFEppppppippp(x86emu_t *emu, uintptr_t fcn)
{
 uFEppppppippp_t fn = (uFEppppppippp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void uFppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFppppppppppp_t fn = (uFppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void pFEpipppppppi(x86emu_t *emu, uintptr_t fcn)
{
 pFEpipppppppi_t fn = (pFEpipppppppi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFEppiiLpppip(x86emu_t *emu, uintptr_t fcn)
{
 pFEppiiLpppip_t fn = (pFEppiiLpppip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uintptr_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40));
}
void pFEppCuWCCuuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuWCCuuu_t fn = (pFEppCuWCCuuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFEppuiipuuii(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuiipuuii_t fn = (pFEppuiipuuii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFEppuuwwWWww(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuwwWWww_t fn = (pFEppuuwwWWww_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(int16_t *)(emu->regs[_SP].dword[0] + 36), *(int16_t *)(emu->regs[_SP].dword[0] + 40));
}
void pFpppppppiipp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppppiipp_t fn = (pFpppppppiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void pFppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppppppppppp_t fn = (pFppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void vFuiiiiiiiiuLC(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiiuLC_t fn = (vFuiiiiiiiiuLC_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uintptr_t *)(emu->regs[_SP].dword[0] + 44), *(uint8_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFuiiiiiiiuuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiuuip_t fn = (vFuiiiiiiiuuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFuuiiiiiiiiui(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiiiui_t fn = (vFuuiiiiiiiiui_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFuuiiiiiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiiiuu_t fn = (vFuuiiiiiiiiuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFuuiiiiiiiuip(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiiuip_t fn = (vFuuiiiiiiiuip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFuuiiiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiiiiuup_t fn = (vFuuiiiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuuuuuu_t fn = (vFuuuuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFffffffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFffffffffffff_t fn = (vFffffffffffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44), *(float *)(emu->regs[_SP].dword[0] + 48));
}
void vFpipppiiiipii(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppiiiipii_t fn = (vFpipppiiiipii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFpippppiiiipi(x86emu_t *emu, uintptr_t fcn)
{
 vFpippppiiiipi_t fn = (vFpippppiiiipi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFppiiiiddddii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiddddii_t fn = (vFppiiiiddddii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64));
}
void vFppiiuuuiupup(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiuuuiupup_t fn = (vFppiiuuuiupup_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFppiipppiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipppiiiii_t fn = (vFppiipppiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFpppiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpppiiiiiiiii_t fn = (vFpppiiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48));
}
void vFpppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppppppppp_t fn = (vFpppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFEpppippppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpppippppppp_t fn = (iFEpppippppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void iFEppppiiiiuui(x86emu_t *emu, uintptr_t fcn)
{
 iFEppppiiiiuui_t fn = (iFEppppiiiiuui_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void iFpipllipppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipllipppppp_t fn = (iFpipllipppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFpipppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipppppppppp_t fn = (iFpipppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFpppiiipppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppiiipppppp_t fn = (iFpppiiipppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFpppllipppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppllipppppp_t fn = (iFpppllipppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(intptr_t *)(emu->regs[_SP].dword[0] + 16), *(intptr_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void iFpppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppp_t fn = (iFpppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void lFpLpppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 lFpLpppppppppp_t fn = (lFpLpppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (intptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void pFEppiiuuuipii(x86emu_t *emu, uintptr_t fcn)
{
 pFEppiiuuuipii_t fn = (pFEppiiuuuipii_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFEppCuWCCuuCW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuWCCuuCW_t fn = (pFEppCuWCCuuCW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint8_t *)(emu->regs[_SP].dword[0] + 40), *(uint16_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFEppuwwWWuCuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuwwWWuCuu_t fn = (pFEppuwwWWuCuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int16_t *)(emu->regs[_SP].dword[0] + 16), *(int16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFEppuuuwwwwWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuwwwwWW_t fn = (pFEppuuuwwwwWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(int16_t *)(emu->regs[_SP].dword[0] + 32), *(int16_t *)(emu->regs[_SP].dword[0] + 36), *(uint16_t *)(emu->regs[_SP].dword[0] + 40), *(uint16_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFEppuuuWWWCCi(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuWWWCCi_t fn = (pFEppuuuWWWCCi_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint8_t *)(emu->regs[_SP].dword[0] + 36), *(uint8_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44));
}
void pFEppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFEppppppppppp_t fn = (pFEppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44));
}
void pFWWiCCCCiipup(x86emu_t *emu, uintptr_t fcn)
{
 pFWWiCCCCiipup_t fn = (pFWWiCCCCiipup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(uint16_t *)(emu->regs[_SP].dword[0] + 4), *(uint16_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(uint8_t *)(emu->regs[_SP].dword[0] + 16), *(uint8_t *)(emu->regs[_SP].dword[0] + 20), *(uint8_t *)(emu->regs[_SP].dword[0] + 24), *(uint8_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void pFppiiuuuiupup(x86emu_t *emu, uintptr_t fcn)
{
 pFppiiuuuiupup_t fn = (pFppiiuuuiupup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void pFppippLLLiLpp(x86emu_t *emu, uintptr_t fcn)
{
 pFppippLLLiLpp_t fn = (pFppippLLLiLpp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uintptr_t *)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uintptr_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void pFppuuppppuppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppuuppppuppp_t fn = (pFppuuppppuppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void pFpppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpppppppppppp_t fn = (pFpppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFEpppppppiippp(x86emu_t *emu, uintptr_t fcn)
{
 vFEpppppppiippp_t fn = (vFEpppppppiippp_t)fcn;
 fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48));
}
void vFuiiiiiiiiiuup(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiiiiiuup_t fn = (vFuiiiiiiiiiuup_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void vFuuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuuuuuuuuuu_t fn = (vFuuuuuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52));
}
void vFuffffffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFuffffffffffff_t fn = (vFuffffffffffff_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44), *(float *)(emu->regs[_SP].dword[0] + 48), *(float *)(emu->regs[_SP].dword[0] + 52));
}
void vFuLuuuuuuuuuuu(x86emu_t *emu, uintptr_t fcn)
{
 vFuLuuuuuuuuuuu_t fn = (vFuLuuuuuuuuuuu_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uintptr_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52));
}
void vFpipppiiiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFpipppiiiiiiuu_t fn = (vFpipppiiiiiiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52));
}
void vFpippppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpippppppppppp_t fn = (vFpippppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void vFpuppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpuppppppppppp_t fn = (vFpuppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void vFppiiiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiiiiiiii_t fn = (vFppiiiiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52));
}
void vFppiipppiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipppiiiiii_t fn = (vFppiipppiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52));
}
void vFppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppppppppp_t fn = (vFppppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFddddpppddpppp(x86emu_t *emu, uintptr_t fcn)
{
 iFddddpppddpppp_t fn = (iFddddpppddpppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(double *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 12), *(double *)(emu->regs[_SP].dword[0] + 20), *(double *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 48), *(double *)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76));
}
void iFpippuuuiipppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpippuuuiipppp_t fn = (iFpippuuuiipppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFpippppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpippppppppppp_t fn = (iFpippppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFpupiiiipppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpupiiiipppppp_t fn = (iFpupiiiipppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFpuppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpuppppppppppp_t fn = (iFpuppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFppppppLLLLupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppLLLLupp_t fn = (iFppppppLLLLupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32), *(uintptr_t *)(emu->regs[_SP].dword[0] + 36), *(uintptr_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void iFppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppppppppppppp_t fn = (iFppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void uFippuuuulllipp(x86emu_t *emu, uintptr_t fcn)
{
 uFippuuuulllipp_t fn = (uFippuuuulllipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(intptr_t *)(emu->regs[_SP].dword[0] + 32), *(intptr_t *)(emu->regs[_SP].dword[0] + 36), *(intptr_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void uFpppppuupppppp(x86emu_t *emu, uintptr_t fcn)
{
 uFpppppuupppppp_t fn = (uFpppppuupppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void pFppLppppiiLpip(x86emu_t *emu, uintptr_t fcn)
{
 pFppLppppiiLpip_t fn = (pFppLppppiiLpip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uintptr_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(uintptr_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void pFppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppppppppppppp_t fn = (pFppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void vFuffiiffiiffiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuffiiffiiffiip_t fn = (vFuffiiffiiffiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void vFuddiiddiiddiip(x86emu_t *emu, uintptr_t fcn)
{
 vFuddiiddiiddiip_t fn = (vFuddiiddiiddiip_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(double *)(emu->regs[_SP].dword[0] + 8), *(double *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 32), *(double *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(double *)(emu->regs[_SP].dword[0] + 56), *(double *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 72), *(int32_t *)(emu->regs[_SP].dword[0] + 76), *(void **)(emu->regs[_SP].dword[0] + 80));
}
void vFppiipppiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppiipppiiiiiii_t fn = (vFppiipppiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56));
}
void vFpppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppppppppppp_t fn = (vFpppppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void iFpipppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpipppppppppppp_t fn = (iFpipppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void iFpupppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpupppppppppppp_t fn = (iFpupppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void iFppupppLLLLpupp(x86emu_t *emu, uintptr_t fcn)
{
 iFppupppLLLLpupp_t fn = (iFppupppLLLLpupp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(uintptr_t *)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32), *(uintptr_t *)(emu->regs[_SP].dword[0] + 36), *(uintptr_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void iFpppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppppp_t fn = (iFpppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void pFEppCuuWWwwCCup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuWWwwCCup_t fn = (pFEppCuuWWwwCCup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(int16_t *)(emu->regs[_SP].dword[0] + 32), *(int16_t *)(emu->regs[_SP].dword[0] + 36), *(uint8_t *)(emu->regs[_SP].dword[0] + 40), *(uint8_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52));
}
void pFEppuuuWWWWWWWW(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuWWWWWWWW_t fn = (pFEppuuuWWWWWWWW_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint16_t *)(emu->regs[_SP].dword[0] + 36), *(uint16_t *)(emu->regs[_SP].dword[0] + 40), *(uint16_t *)(emu->regs[_SP].dword[0] + 44), *(uint16_t *)(emu->regs[_SP].dword[0] + 48), *(uint16_t *)(emu->regs[_SP].dword[0] + 52));
}
void pFpuupuupwwwwWWC(x86emu_t *emu, uintptr_t fcn)
{
 pFpuupuupwwwwWWC_t fn = (pFpuupuupwwwwWWC_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int16_t *)(emu->regs[_SP].dword[0] + 32), *(int16_t *)(emu->regs[_SP].dword[0] + 36), *(int16_t *)(emu->regs[_SP].dword[0] + 40), *(int16_t *)(emu->regs[_SP].dword[0] + 44), *(uint16_t *)(emu->regs[_SP].dword[0] + 48), *(uint16_t *)(emu->regs[_SP].dword[0] + 52), *(uint8_t *)(emu->regs[_SP].dword[0] + 56));
}
void vFuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fcn)
{
 vFuiiiiiuiiiiilll_t fn = (vFuiiiiiuiiiiilll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(intptr_t *)(emu->regs[_SP].dword[0] + 52), *(intptr_t *)(emu->regs[_SP].dword[0] + 56), *(intptr_t *)(emu->regs[_SP].dword[0] + 60));
}
void vFuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuiiiiuuiiiiiii_t fn = (vFuuiiiiuuiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(uint32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60));
}
void vFfffffffffffffff(x86emu_t *emu, uintptr_t fcn)
{
 vFfffffffffffffff_t fn = (vFfffffffffffffff_t)fcn;
 fn(*(float *)(emu->regs[_SP].dword[0] + 4), *(float *)(emu->regs[_SP].dword[0] + 8), *(float *)(emu->regs[_SP].dword[0] + 12), *(float *)(emu->regs[_SP].dword[0] + 16), *(float *)(emu->regs[_SP].dword[0] + 20), *(float *)(emu->regs[_SP].dword[0] + 24), *(float *)(emu->regs[_SP].dword[0] + 28), *(float *)(emu->regs[_SP].dword[0] + 32), *(float *)(emu->regs[_SP].dword[0] + 36), *(float *)(emu->regs[_SP].dword[0] + 40), *(float *)(emu->regs[_SP].dword[0] + 44), *(float *)(emu->regs[_SP].dword[0] + 48), *(float *)(emu->regs[_SP].dword[0] + 52), *(float *)(emu->regs[_SP].dword[0] + 56), *(float *)(emu->regs[_SP].dword[0] + 60));
}
void vFppipppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppipppppppppppp_t fn = (vFppipppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void vFpppippppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppippppppppppp_t fn = (vFpppippppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void vFppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFppppppppppppppp_t fn = (vFppppppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void pFEppCuuwwWWWWuup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppCuuwwWWWWuup_t fn = (pFEppCuuwwWWWWuup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint8_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(int16_t *)(emu->regs[_SP].dword[0] + 24), *(int16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint16_t *)(emu->regs[_SP].dword[0] + 36), *(uint16_t *)(emu->regs[_SP].dword[0] + 40), *(uint16_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56));
}
void pFpuiippppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpuiippppppppppp_t fn = (pFpuiippppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void pFppipppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppipppppppppppp_t fn = (pFppipppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void pFppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFppppppppppppppp_t fn = (pFppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60));
}
void vFpppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppppppppppppppp_t fn = (vFpppppppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64));
}
void iFpppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppppppp_t fn = (iFpppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64));
}
void pFppipipipipipipip(x86emu_t *emu, uintptr_t fcn)
{
 pFppipipipipipipip_t fn = (pFppipipipipipipip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64));
}
void vFuuuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuiiiiiuiiiiilll_t fn = (vFuuuiiiiiuiiiiilll_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(intptr_t *)(emu->regs[_SP].dword[0] + 60), *(intptr_t *)(emu->regs[_SP].dword[0] + 64), *(intptr_t *)(emu->regs[_SP].dword[0] + 68));
}
void vFuuuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFuuuuiiiiuuiiiiiii_t fn = (vFuuuuiiiiuuiiiiiii_t)fcn;
 fn(*(uint32_t *)(emu->regs[_SP].dword[0] + 4), *(uint32_t *)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(uint32_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 68));
}
void vFppiiiiddddiiiiiuu(x86emu_t *emu, uintptr_t fcn)
{
 vFppiiiiddddiiiiiuu_t fn = (vFppiiiiddddiiiiiuu_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(double *)(emu->regs[_SP].dword[0] + 28), *(double *)(emu->regs[_SP].dword[0] + 36), *(double *)(emu->regs[_SP].dword[0] + 44), *(double *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 68), *(int32_t *)(emu->regs[_SP].dword[0] + 72), *(int32_t *)(emu->regs[_SP].dword[0] + 76), *(uint32_t *)(emu->regs[_SP].dword[0] + 80), *(uint32_t *)(emu->regs[_SP].dword[0] + 84));
}
void vFpppuppiipppuUUUpi(x86emu_t *emu, uintptr_t fcn)
{
 vFpppuppiipppuUUUpi_t fn = (vFpppuppiipppuUUUpi_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint64_t *)(emu->regs[_SP].dword[0] + 52), *(uint64_t *)(emu->regs[_SP].dword[0] + 60), *(uint64_t *)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 76), *(int32_t *)(emu->regs[_SP].dword[0] + 80));
}
void iFppipipppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFppipipppppppppppp_t fn = (iFppipipppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68));
}
void iFpppippppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppippppppppppppp_t fn = (iFpppippppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68));
}
void pFppippipipipipipip(x86emu_t *emu, uintptr_t fcn)
{
 pFppippipipipipipip_t fn = (pFppippipipipipipip_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68));
}
void vFppuiiiiipuiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFppuiiiiipuiiiiiiii_t fn = (vFppuiiiiipuiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 68), *(int32_t *)(emu->regs[_SP].dword[0] + 72));
}
void vFpppipppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 vFpppipppppppppppppp_t fn = (vFpppipppppppppppppp_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72));
}
void iFpppppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppppppppp_t fn = (iFpppppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72));
}
void LFpppppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 LFpppppppppppppppppp_t fn = (LFpppppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72));
}
void pFEppuuWWWWWWwwCCCuu(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuWWWWWWwwCCCuu_t fn = (pFEppuuWWWWWWwwCCCuu_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint16_t *)(emu->regs[_SP].dword[0] + 20), *(uint16_t *)(emu->regs[_SP].dword[0] + 24), *(uint16_t *)(emu->regs[_SP].dword[0] + 28), *(uint16_t *)(emu->regs[_SP].dword[0] + 32), *(uint16_t *)(emu->regs[_SP].dword[0] + 36), *(uint16_t *)(emu->regs[_SP].dword[0] + 40), *(int16_t *)(emu->regs[_SP].dword[0] + 44), *(int16_t *)(emu->regs[_SP].dword[0] + 48), *(uint8_t *)(emu->regs[_SP].dword[0] + 52), *(uint8_t *)(emu->regs[_SP].dword[0] + 56), *(uint8_t *)(emu->regs[_SP].dword[0] + 60), *(uint32_t *)(emu->regs[_SP].dword[0] + 64), *(uint32_t *)(emu->regs[_SP].dword[0] + 68));
}
void pFippppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFippppppppppppppppp_t fn = (pFippppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72));
}
void vFpiiiiiiiiiiiiiiiiii(x86emu_t *emu, uintptr_t fcn)
{
 vFpiiiiiiiiiiiiiiiiii_t fn = (vFpiiiiiiiiiiiiiiiiii_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(int32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(int32_t *)(emu->regs[_SP].dword[0] + 48), *(int32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 68), *(int32_t *)(emu->regs[_SP].dword[0] + 72), *(int32_t *)(emu->regs[_SP].dword[0] + 76));
}
void iFpppippppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppippppppppppppppp_t fn = (iFpppippppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76));
}
void pFEppuuuuuwwuuuuUUUup(x86emu_t *emu, uintptr_t fcn)
{
 pFEppuuuuuwwuuuuUUUup_t fn = (pFEppuuuuuwwuuuuUUUup_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(uint32_t *)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int16_t *)(emu->regs[_SP].dword[0] + 32), *(int16_t *)(emu->regs[_SP].dword[0] + 36), *(uint32_t *)(emu->regs[_SP].dword[0] + 40), *(uint32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52), *(uint64_t *)(emu->regs[_SP].dword[0] + 56), *(uint64_t *)(emu->regs[_SP].dword[0] + 64), *(uint64_t *)(emu->regs[_SP].dword[0] + 72), *(uint32_t *)(emu->regs[_SP].dword[0] + 80), *(void **)(emu->regs[_SP].dword[0] + 84));
}
void pFiiiippppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFiiiippppppppppppppp_t fn = (pFiiiippppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76));
}
void pFpippppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 pFpippppppppppppppppp_t fn = (pFpippppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76));
}
void iFpppppppppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppppppppppppp_t fn = (iFpppppppppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76), *(void **)(emu->regs[_SP].dword[0] + 80), *(void **)(emu->regs[_SP].dword[0] + 84), *(void **)(emu->regs[_SP].dword[0] + 88));
}
void uFippuuuuiiiiuuiiiiiiiipp(x86emu_t *emu, uintptr_t fcn)
{
 uFippuuuuiiiiuuiiiiiiiipp_t fn = (uFippuuuuiiiiuuiiiiiiiipp_t)fcn;
 emu->regs[_AX].dword[0] = (uint32_t)fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(uint32_t *)(emu->regs[_SP].dword[0] + 16), *(uint32_t *)(emu->regs[_SP].dword[0] + 20), *(uint32_t *)(emu->regs[_SP].dword[0] + 24), *(uint32_t *)(emu->regs[_SP].dword[0] + 28), *(int32_t *)(emu->regs[_SP].dword[0] + 32), *(int32_t *)(emu->regs[_SP].dword[0] + 36), *(int32_t *)(emu->regs[_SP].dword[0] + 40), *(int32_t *)(emu->regs[_SP].dword[0] + 44), *(uint32_t *)(emu->regs[_SP].dword[0] + 48), *(uint32_t *)(emu->regs[_SP].dword[0] + 52), *(int32_t *)(emu->regs[_SP].dword[0] + 56), *(int32_t *)(emu->regs[_SP].dword[0] + 60), *(int32_t *)(emu->regs[_SP].dword[0] + 64), *(int32_t *)(emu->regs[_SP].dword[0] + 68), *(int32_t *)(emu->regs[_SP].dword[0] + 72), *(int32_t *)(emu->regs[_SP].dword[0] + 76), *(int32_t *)(emu->regs[_SP].dword[0] + 80), *(int32_t *)(emu->regs[_SP].dword[0] + 84), *(void **)(emu->regs[_SP].dword[0] + 88), *(void **)(emu->regs[_SP].dword[0] + 92));
}
void iFpppppppppppppppppppppppppppppppppp(x86emu_t *emu, uintptr_t fcn)
{
 iFpppppppppppppppppppppppppppppppppp_t fn = (iFpppppppppppppppppppppppppppppppppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(void **)(emu->regs[_SP].dword[0] + 32), *(void **)(emu->regs[_SP].dword[0] + 36), *(void **)(emu->regs[_SP].dword[0] + 40), *(void **)(emu->regs[_SP].dword[0] + 44), *(void **)(emu->regs[_SP].dword[0] + 48), *(void **)(emu->regs[_SP].dword[0] + 52), *(void **)(emu->regs[_SP].dword[0] + 56), *(void **)(emu->regs[_SP].dword[0] + 60), *(void **)(emu->regs[_SP].dword[0] + 64), *(void **)(emu->regs[_SP].dword[0] + 68), *(void **)(emu->regs[_SP].dword[0] + 72), *(void **)(emu->regs[_SP].dword[0] + 76), *(void **)(emu->regs[_SP].dword[0] + 80), *(void **)(emu->regs[_SP].dword[0] + 84), *(void **)(emu->regs[_SP].dword[0] + 88), *(void **)(emu->regs[_SP].dword[0] + 92), *(void **)(emu->regs[_SP].dword[0] + 96), *(void **)(emu->regs[_SP].dword[0] + 100), *(void **)(emu->regs[_SP].dword[0] + 104), *(void **)(emu->regs[_SP].dword[0] + 108), *(void **)(emu->regs[_SP].dword[0] + 112), *(void **)(emu->regs[_SP].dword[0] + 116), *(void **)(emu->regs[_SP].dword[0] + 120), *(void **)(emu->regs[_SP].dword[0] + 124), *(void **)(emu->regs[_SP].dword[0] + 128), *(void **)(emu->regs[_SP].dword[0] + 132), *(void **)(emu->regs[_SP].dword[0] + 136));
}


void IFpi(x86emu_t *emu, uintptr_t fcn)
{
 IFpi_t fn = (IFpi_t)fcn;
 ui64_t r;
 r.i = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void iFipV(x86emu_t *emu, uintptr_t fcn)
{
 iFipV_t fn = (iFipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void iFiipV(x86emu_t *emu, uintptr_t fcn)
{
 iFiipV_t fn = (iFiipV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void iFppiiiip(x86emu_t *emu, uintptr_t fcn)
{
 iFppiiiip_t fn = (iFppiiiip_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(int32_t *)(emu->regs[_SP].dword[0] + 20), *(int32_t *)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28));
}
# 15062 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
void iFiiiN(x86emu_t *emu, uintptr_t fcn)
{
 iFiiiN_t fn = (iFiiiN_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(int32_t *)(emu->regs[_SP].dword[0] + 4), *(int32_t *)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}



void DFD(x86emu_t *emu, uintptr_t fcn)
{
 DFD_t fn = (DFD_t)fcn;
 long double ld = fn(LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void iFED(x86emu_t *emu, uintptr_t fcn)
{
 iFED_t fn = (iFED_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)));
}
void IFED(x86emu_t *emu, uintptr_t fcn)
{
 IFED_t fn = (IFED_t)fcn;
 ui64_t r;
 r.i = fn(emu, LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void DFED(x86emu_t *emu, uintptr_t fcn)
{
 DFED_t fn = (DFED_t)fcn;
 long double ld = fn(emu, LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void DFDD(x86emu_t *emu, uintptr_t fcn)
{
 DFDD_t fn = (DFDD_t)fcn;
 long double ld = fn(LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)), LD2localLD((void *)(emu->regs[_SP].dword[0] + 16)));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void DFDp(x86emu_t *emu, uintptr_t fcn)
{
 DFDp_t fn = (DFDp_t)fcn;
 long double ld = fn(LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)), *(void **)(emu->regs[_SP].dword[0] + 16));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void DFppi(x86emu_t *emu, uintptr_t fcn)
{
 DFppi_t fn = (DFppi_t)fcn;
 long double ld = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void DFppp(x86emu_t *emu, uintptr_t fcn)
{
 DFppp_t fn = (DFppp_t)fcn;
 long double ld = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
 fpu_do_push(emu);
 emu->x87[emu->top].d = ld;
}
void iFDipppL(x86emu_t *emu, uintptr_t fcn)
{
 iFDipppL_t fn = (iFDipppL_t)fcn;
 emu->regs[_AX].dword[0] = fn(LD2localLD((void *)(emu->regs[_SP].dword[0] + 4)), *(int32_t *)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), *(void **)(emu->regs[_SP].dword[0] + 24), *(void **)(emu->regs[_SP].dword[0] + 28), *(uintptr_t *)(emu->regs[_SP].dword[0] + 32));
}
void vFppippDDC(x86emu_t *emu, uintptr_t fcn)
{
 vFppippDDC_t fn = (vFppippDDC_t)fcn;
 fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 8), *(int32_t *)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16), *(void **)(emu->regs[_SP].dword[0] + 20), LD2localLD((void *)(emu->regs[_SP].dword[0] + 24)), LD2localLD((void *)(emu->regs[_SP].dword[0] + 36)), *(uint8_t *)(emu->regs[_SP].dword[0] + 48));
}
# 15205 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
void iFEvpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEpp_t fn = (iFEpp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 8), *(void **)(emu->regs[_SP].dword[0] + 12));
}
void iFEvpV(x86emu_t *emu, uintptr_t fcn)
{
 iFEpV_t fn = (iFEpV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 12));
}
void UFsvvs(x86emu_t *emu, uintptr_t fcn)
{
 UFss_t fn = (UFss_t)fcn;
 ui64_t r;
 r.u = (uint64_t)fn((void *)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 12));
 emu->regs[_AX].dword[0] = r.d[0];
 emu->regs[_DX].dword[0] = r.d[1];
}
void iFEpvpp(x86emu_t *emu, uintptr_t fcn)
{
 iFEppp_t fn = (iFEppp_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), *(void **)(emu->regs[_SP].dword[0] + 16));
}
void iFEpvpV(x86emu_t *emu, uintptr_t fcn)
{
 iFEppV_t fn = (iFEppV_t)fcn;
 emu->regs[_AX].dword[0] = fn(emu, *(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
void pFpsvvvvs(x86emu_t *emu, uintptr_t fcn)
{
 pFpss_t fn = (pFpss_t)fcn;
 emu->regs[_AX].dword[0] = (uintptr_t)fn(*(void **)(emu->regs[_SP].dword[0] + 4), (void *)(emu->regs[_SP].dword[0] + 8), (void *)(emu->regs[_SP].dword[0] + 24));
}


void iFpvpV(x86emu_t *emu, uintptr_t fcn)
{
 iFppV_t fn = (iFppV_t)fcn;
 emu->regs[_AX].dword[0] = fn(*(void **)(emu->regs[_SP].dword[0] + 4), *(void **)(emu->regs[_SP].dword[0] + 12), (void *)(emu->regs[_SP].dword[0] + 16));
}
# 15255 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
int isRetX87Wrapper(wrapper_t fun)
{
 if (fun == &fFi)
  return 1;
 if (fun == &fFf)
  return 1;
 if (fun == &fFp)
  return 1;
 if (fun == &fFG)
  return 1;
 if (fun == &dFv)
  return 1;
 if (fun == &dFi)
  return 1;
 if (fun == &dFu)
  return 1;
 if (fun == &dFd)
  return 1;
 if (fun == &dFp)
  return 1;
 if (fun == &dFG)
  return 1;
 if (fun == &fFEf)
  return 1;
 if (fun == &fFEp)
  return 1;
 if (fun == &fFif)
  return 1;
 if (fun == &fFfi)
  return 1;
 if (fun == &fFff)
  return 1;
 if (fun == &fFfD)
  return 1;
 if (fun == &fFfp)
  return 1;
 if (fun == &fFpp)
  return 1;
 if (fun == &dFEd)
  return 1;
 if (fun == &dFid)
  return 1;
 if (fun == &dFuu)
  return 1;
 if (fun == &dFdi)
  return 1;
 if (fun == &dFdd)
  return 1;
 if (fun == &dFdD)
  return 1;
 if (fun == &dFdp)
  return 1;
 if (fun == &dFpi)
  return 1;
 if (fun == &dFpd)
  return 1;
 if (fun == &dFpp)
  return 1;
 if (fun == &DFpp)
  return 1;
 if (fun == &fFuii)
  return 1;
 if (fun == &fFfff)
  return 1;
 if (fun == &fFffp)
  return 1;
 if (fun == &fFppu)
  return 1;
 if (fun == &fFppp)
  return 1;
 if (fun == &dFddd)
  return 1;
 if (fun == &dFddp)
  return 1;
 if (fun == &dFpdd)
  return 1;
 if (fun == &dFppi)
  return 1;
 if (fun == &dFppu)
  return 1;
 if (fun == &dFppp)
  return 1;
 if (fun == &dFpppp)
  return 1;







 if (fun == &DFD)
  return 1;
 if (fun == &DFED)
  return 1;
 if (fun == &DFDD)
  return 1;
 if (fun == &DFDp)
  return 1;
 if (fun == &DFppi)
  return 1;
 if (fun == &DFppp)
  return 1;
# 15373 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.c"
 return 0;
}
