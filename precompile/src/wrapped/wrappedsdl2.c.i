# 0 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"

# 1 "/usr/include/ctype.h" 1 3 4
# 25 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 559 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 560 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 561 "/usr/include/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4






# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/ctype.h" 2 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 29 "/usr/include/bits/types.h" 2 3 4



# 31 "/usr/include/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;



typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;






__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;







__extension__ typedef long long int __intmax_t;
__extension__ typedef unsigned long long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __uint64_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __uint64_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __int64_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __uint64_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;
__extension__ typedef __int64_t __suseconds64_t;

__extension__ typedef int __daddr_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __int64_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __uint64_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __uint64_t __fsfilcnt64_t;


__extension__ typedef int __fsword_t;

__extension__ typedef int __ssize_t;


__extension__ typedef long int __syscall_slong_t;

__extension__ typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;







__extension__ typedef __int64_t __time64_t;
# 27 "/usr/include/ctype.h" 2 3 4


# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));




extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));




extern int isctype (int __c, int __mask) __attribute__ ((__nothrow__ , __leaf__));






extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 327 "/usr/include/ctype.h" 3 4

# 3 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 170 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) __attribute__ ((__nothrow__ , __leaf__));






extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 200 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;



extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 249 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 283 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 615 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 691 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 779 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));





extern char *cuserid (char *__s)
  __attribute__ ((__access__ (__write_only__, 1)));




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 4 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 233 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 275 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 317 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4

# 102 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/sys/select.h" 3 4

# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;





  int __kind;






  unsigned int __nusers;
  __extension__ union
  {
    struct
    {
      short __espins;
      short __eelision;


    } __elision_data;
    __pthread_slist_t __list;
  };


};
# 77 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;
# 49 "/usr/include/bits/struct_rwlock.h" 3 4
  unsigned char __flags;
  unsigned char __shared;
  signed char __rwelision;
  unsigned char __pad2;
  int __cur_writer;

};
# 90 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[36];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 727 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 769 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
     __attribute__ ((__malloc__ (__builtin_free, 1))) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 5 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 120 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 133 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));





extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 286 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 380 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))
    __attribute__ ((__access__ (__read_only__, 1, 2)))
    __attribute__ ((__access__ (__read_only__, 3, 4)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));




extern const char *strerrordesc_np (int __err) __attribute__ ((__nothrow__ , __leaf__));

extern const char *strerrorname_np (int __err) __attribute__ ((__nothrow__ , __leaf__));





extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern const char *sigabbrev_np (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern const char *sigdescr_np (int __sig) __attribute__ ((__nothrow__ , __leaf__));



extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__read_write__, 1, 2)));
# 527 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 539 "/usr/include/string.h" 3 4

# 6 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/bits/dlfcn.h" 3 4



extern void _dl_mcount_wrapper_check (void *__selfpc) __attribute__ ((__nothrow__ , __leaf__));


# 28 "/usr/include/dlfcn.h" 2 3 4



# 1 "/usr/include/bits/dl_find_object.h" 1 3 4
# 32 "/usr/include/dlfcn.h" 2 3 4
# 46 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;











extern void *dlopen (const char *__file, int __mode) __attribute__ ((__nothrow__));



extern int dlclose (void *__handle) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) __attribute__ ((__nothrow__));



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) __attribute__ ((__nothrow__ , __leaf__));





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;

struct dl_find_object
{
  __extension__ unsigned long long int dlfo_flags;
  void *dlfo_map_start;
  void *dlfo_map_end;
  struct link_map *dlfo_link_map;
  void *dlfo_eh_frame;

  void *dlfo_eh_dbase;

  unsigned int __dlfo_eh_dbase_pad;






  __extension__ unsigned long long int __dflo_reserved[7];
};



int _dl_find_object (void *__address, struct dl_find_object *__result) __attribute__ ((__nothrow__ , __leaf__));





# 7 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 8 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

# 1 "/home/ssd/pico/code/box86/src/include/wrappedlibs.h" 1


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 93 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h" 2 3 4
# 4 "/home/ssd/pico/code/box86/src/include/wrappedlibs.h" 2


# 5 "/home/ssd/pico/code/box86/src/include/wrappedlibs.h"
typedef struct library_s library_t;
typedef struct box86context_s box86context_t;

typedef int (*wrappedlib_init_t)(library_t * lib, box86context_t* box86);
typedef void (*wrappedlib_fini_t)(library_t * lib);
typedef int (*wrappedlib_get_t)(library_t* lib, const char* name, uintptr_t *offs, uintptr_t *sz, size_t size, int* weak, int version, const char* vername, int local, const char* defver);

void setNeededLibs(library_t* lib, int n, ...);



typedef struct wrappedlib_s {
    const char* name;
    wrappedlib_init_t init;
    wrappedlib_fini_t fini;
} wrappedlib_t;
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

# 1 "/home/ssd/pico/code/box86/src/include/debug.h" 1




typedef struct box86context_s box86context_t;
extern int box86_log;
extern int box86_dump;
extern int box86_dynarec_log;
extern int box86_dynarec;
extern uintptr_t box86_pagesize;
extern uintptr_t box86_load_addr;
extern int box86_showbt;
extern int box86_maxcpu;
extern int box86_maxcpu_immutable;
# 45 "/home/ssd/pico/code/box86/src/include/debug.h"
extern int box86_libcef;
extern int box86_sdl2_jguid;
extern int dlsym_error;
extern int cycle_log;
extern int trace_xmm;
extern int trace_emm;
extern int box86_nosandbox;
extern int box86_malloc_hack;
extern int box86_sse_flushto0;
extern int box86_x87_no80bits;
extern int allow_missing_libs;
extern int box86_prefer_wrapped;
extern int box86_prefer_emulated;
extern int box86_steam;
extern int box86_wine;
extern int box86_musl;
extern int box86_nopulse;
extern int box86_nogtk;
extern int box86_novulkan;
extern int box86_nocrashhandler;
extern int box86_futex_waitv;
extern int box86_mapclean;
extern int box86_showsegv;
extern int box86_mutex_aligned;
extern int allow_missing_symbols;
extern uintptr_t trace_start, trace_end;
extern char* trace_func;
extern char* trace_init;
extern char* box86_trace;
extern uint64_t start_cnt;
extern uintptr_t fmod_smc_start, fmod_smc_end;
extern uint32_t default_fs;
extern int jit_gdb;
extern int box86_tcmalloc_minimal;
extern int box86_isglibc234;
extern int box86_x11threads;
extern int box86_x11glx;
extern char* box86_libGL;






extern FILE* ftrace;
# 106 "/home/ssd/pico/code/box86/src/include/debug.h"
void init_malloc_hook();
# 116 "/home/ssd/pico/code/box86/src/include/debug.h"
extern size_t(*box_malloc_usable_size)(const void*);
extern void* __libc_malloc(size_t);
extern void* __libc_realloc(void*, size_t);
extern void* __libc_calloc(size_t, size_t);
extern void __libc_free(void*);
extern void* __libc_memalign(size_t, size_t);





extern char* box_strdup(const char* s);
extern char* box_realpath(const char* path, char* ret);
# 12 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h" 1
# 9 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
typedef struct x86emu_s x86emu_t;


typedef void (*wrapper_t)(x86emu_t* emu, uintptr_t fnc);
# 33 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void vFv(x86emu_t *emu, uintptr_t fnc);
void vFc(x86emu_t *emu, uintptr_t fnc);
void vFw(x86emu_t *emu, uintptr_t fnc);
void vFi(x86emu_t *emu, uintptr_t fnc);
void vFC(x86emu_t *emu, uintptr_t fnc);
void vFW(x86emu_t *emu, uintptr_t fnc);
void vFu(x86emu_t *emu, uintptr_t fnc);
void vFU(x86emu_t *emu, uintptr_t fnc);
void vFf(x86emu_t *emu, uintptr_t fnc);
void vFd(x86emu_t *emu, uintptr_t fnc);
void vFl(x86emu_t *emu, uintptr_t fnc);
void vFL(x86emu_t *emu, uintptr_t fnc);
void vFp(x86emu_t *emu, uintptr_t fnc);
void vFS(x86emu_t *emu, uintptr_t fnc);
void vFG(x86emu_t *emu, uintptr_t fnc);
void cFv(x86emu_t *emu, uintptr_t fnc);
void cFi(x86emu_t *emu, uintptr_t fnc);
void cFu(x86emu_t *emu, uintptr_t fnc);
void cFf(x86emu_t *emu, uintptr_t fnc);
void cFp(x86emu_t *emu, uintptr_t fnc);
void cFG(x86emu_t *emu, uintptr_t fnc);
void wFp(x86emu_t *emu, uintptr_t fnc);
void iFv(x86emu_t *emu, uintptr_t fnc);
void iFw(x86emu_t *emu, uintptr_t fnc);
void iFi(x86emu_t *emu, uintptr_t fnc);
void iFI(x86emu_t *emu, uintptr_t fnc);
void iFC(x86emu_t *emu, uintptr_t fnc);
void iFW(x86emu_t *emu, uintptr_t fnc);
void iFu(x86emu_t *emu, uintptr_t fnc);
void iFU(x86emu_t *emu, uintptr_t fnc);
void iFf(x86emu_t *emu, uintptr_t fnc);
void iFd(x86emu_t *emu, uintptr_t fnc);
void iFL(x86emu_t *emu, uintptr_t fnc);
void iFp(x86emu_t *emu, uintptr_t fnc);
void iFS(x86emu_t *emu, uintptr_t fnc);
void iFG(x86emu_t *emu, uintptr_t fnc);
void IFv(x86emu_t *emu, uintptr_t fnc);
void IFi(x86emu_t *emu, uintptr_t fnc);
void IFf(x86emu_t *emu, uintptr_t fnc);
void IFd(x86emu_t *emu, uintptr_t fnc);
void IFp(x86emu_t *emu, uintptr_t fnc);
void IFG(x86emu_t *emu, uintptr_t fnc);
void CFv(x86emu_t *emu, uintptr_t fnc);
void CFC(x86emu_t *emu, uintptr_t fnc);
void CFu(x86emu_t *emu, uintptr_t fnc);
void CFl(x86emu_t *emu, uintptr_t fnc);
void CFL(x86emu_t *emu, uintptr_t fnc);
void CFp(x86emu_t *emu, uintptr_t fnc);
void CFG(x86emu_t *emu, uintptr_t fnc);
void WFi(x86emu_t *emu, uintptr_t fnc);
void WFu(x86emu_t *emu, uintptr_t fnc);
void WFp(x86emu_t *emu, uintptr_t fnc);
void uFv(x86emu_t *emu, uintptr_t fnc);
void uFi(x86emu_t *emu, uintptr_t fnc);
void uFu(x86emu_t *emu, uintptr_t fnc);
void uFU(x86emu_t *emu, uintptr_t fnc);
void uFd(x86emu_t *emu, uintptr_t fnc);
void uFl(x86emu_t *emu, uintptr_t fnc);
void uFp(x86emu_t *emu, uintptr_t fnc);
void uFG(x86emu_t *emu, uintptr_t fnc);
void UFv(x86emu_t *emu, uintptr_t fnc);
void UFu(x86emu_t *emu, uintptr_t fnc);
void UFU(x86emu_t *emu, uintptr_t fnc);
void UFp(x86emu_t *emu, uintptr_t fnc);
void UFG(x86emu_t *emu, uintptr_t fnc);
void UFs(x86emu_t *emu, uintptr_t fnc);
void fFi(x86emu_t *emu, uintptr_t fnc);
void fFf(x86emu_t *emu, uintptr_t fnc);
void fFp(x86emu_t *emu, uintptr_t fnc);
void fFG(x86emu_t *emu, uintptr_t fnc);
void dFv(x86emu_t *emu, uintptr_t fnc);
void dFi(x86emu_t *emu, uintptr_t fnc);
void dFu(x86emu_t *emu, uintptr_t fnc);
void dFd(x86emu_t *emu, uintptr_t fnc);
void dFp(x86emu_t *emu, uintptr_t fnc);
void dFG(x86emu_t *emu, uintptr_t fnc);
void lFv(x86emu_t *emu, uintptr_t fnc);
void lFu(x86emu_t *emu, uintptr_t fnc);
void lFl(x86emu_t *emu, uintptr_t fnc);
void lFp(x86emu_t *emu, uintptr_t fnc);
void lFG(x86emu_t *emu, uintptr_t fnc);
void LFv(x86emu_t *emu, uintptr_t fnc);
void LFi(x86emu_t *emu, uintptr_t fnc);
void LFu(x86emu_t *emu, uintptr_t fnc);
void LFL(x86emu_t *emu, uintptr_t fnc);
void LFp(x86emu_t *emu, uintptr_t fnc);
void LFG(x86emu_t *emu, uintptr_t fnc);
void pFv(x86emu_t *emu, uintptr_t fnc);
void pFw(x86emu_t *emu, uintptr_t fnc);
void pFi(x86emu_t *emu, uintptr_t fnc);
void pFI(x86emu_t *emu, uintptr_t fnc);
void pFC(x86emu_t *emu, uintptr_t fnc);
void pFW(x86emu_t *emu, uintptr_t fnc);
void pFu(x86emu_t *emu, uintptr_t fnc);
void pFU(x86emu_t *emu, uintptr_t fnc);
void pFd(x86emu_t *emu, uintptr_t fnc);
void pFl(x86emu_t *emu, uintptr_t fnc);
void pFL(x86emu_t *emu, uintptr_t fnc);
void pFp(x86emu_t *emu, uintptr_t fnc);
void pFV(x86emu_t *emu, uintptr_t fnc);
void pFG(x86emu_t *emu, uintptr_t fnc);
void vFEv(x86emu_t *emu, uintptr_t fnc);
void vFEi(x86emu_t *emu, uintptr_t fnc);
void vFEp(x86emu_t *emu, uintptr_t fnc);
void vFcc(x86emu_t *emu, uintptr_t fnc);
void vFww(x86emu_t *emu, uintptr_t fnc);
void vFii(x86emu_t *emu, uintptr_t fnc);
void vFiI(x86emu_t *emu, uintptr_t fnc);
void vFiW(x86emu_t *emu, uintptr_t fnc);
void vFiu(x86emu_t *emu, uintptr_t fnc);
void vFiU(x86emu_t *emu, uintptr_t fnc);
void vFif(x86emu_t *emu, uintptr_t fnc);
void vFid(x86emu_t *emu, uintptr_t fnc);
void vFil(x86emu_t *emu, uintptr_t fnc);
void vFiL(x86emu_t *emu, uintptr_t fnc);
void vFip(x86emu_t *emu, uintptr_t fnc);
void vFWW(x86emu_t *emu, uintptr_t fnc);
void vFWp(x86emu_t *emu, uintptr_t fnc);
void vFuc(x86emu_t *emu, uintptr_t fnc);
void vFuw(x86emu_t *emu, uintptr_t fnc);
void vFui(x86emu_t *emu, uintptr_t fnc);
void vFuC(x86emu_t *emu, uintptr_t fnc);
void vFuW(x86emu_t *emu, uintptr_t fnc);
void vFuu(x86emu_t *emu, uintptr_t fnc);
void vFuU(x86emu_t *emu, uintptr_t fnc);
void vFuf(x86emu_t *emu, uintptr_t fnc);
void vFud(x86emu_t *emu, uintptr_t fnc);
void vFul(x86emu_t *emu, uintptr_t fnc);
void vFuL(x86emu_t *emu, uintptr_t fnc);
void vFup(x86emu_t *emu, uintptr_t fnc);
void vFUi(x86emu_t *emu, uintptr_t fnc);
void vFfi(x86emu_t *emu, uintptr_t fnc);
void vFfC(x86emu_t *emu, uintptr_t fnc);
void vFff(x86emu_t *emu, uintptr_t fnc);
void vFfp(x86emu_t *emu, uintptr_t fnc);
void vFdd(x86emu_t *emu, uintptr_t fnc);
void vFlu(x86emu_t *emu, uintptr_t fnc);
void vFlp(x86emu_t *emu, uintptr_t fnc);
void vFLu(x86emu_t *emu, uintptr_t fnc);
void vFLp(x86emu_t *emu, uintptr_t fnc);
void vFpi(x86emu_t *emu, uintptr_t fnc);
void vFpI(x86emu_t *emu, uintptr_t fnc);
void vFpC(x86emu_t *emu, uintptr_t fnc);
void vFpW(x86emu_t *emu, uintptr_t fnc);
void vFpu(x86emu_t *emu, uintptr_t fnc);
void vFpU(x86emu_t *emu, uintptr_t fnc);
void vFpf(x86emu_t *emu, uintptr_t fnc);
void vFpd(x86emu_t *emu, uintptr_t fnc);
void vFpl(x86emu_t *emu, uintptr_t fnc);
void vFpL(x86emu_t *emu, uintptr_t fnc);
void vFpp(x86emu_t *emu, uintptr_t fnc);
void vFpV(x86emu_t *emu, uintptr_t fnc);
void vFpS(x86emu_t *emu, uintptr_t fnc);
void vFpP(x86emu_t *emu, uintptr_t fnc);
void vFpG(x86emu_t *emu, uintptr_t fnc);
void vFSi(x86emu_t *emu, uintptr_t fnc);
void vFGc(x86emu_t *emu, uintptr_t fnc);
void vFGi(x86emu_t *emu, uintptr_t fnc);
void vFGI(x86emu_t *emu, uintptr_t fnc);
void vFGC(x86emu_t *emu, uintptr_t fnc);
void vFGu(x86emu_t *emu, uintptr_t fnc);
void vFGU(x86emu_t *emu, uintptr_t fnc);
void vFGf(x86emu_t *emu, uintptr_t fnc);
void vFGd(x86emu_t *emu, uintptr_t fnc);
void vFGl(x86emu_t *emu, uintptr_t fnc);
void vFGL(x86emu_t *emu, uintptr_t fnc);
void vFGp(x86emu_t *emu, uintptr_t fnc);
void vFGG(x86emu_t *emu, uintptr_t fnc);
void cFpp(x86emu_t *emu, uintptr_t fnc);
void iFEv(x86emu_t *emu, uintptr_t fnc);
void iFEi(x86emu_t *emu, uintptr_t fnc);
void iFEu(x86emu_t *emu, uintptr_t fnc);
void iFEf(x86emu_t *emu, uintptr_t fnc);
void iFEd(x86emu_t *emu, uintptr_t fnc);
void iFEL(x86emu_t *emu, uintptr_t fnc);
void iFEp(x86emu_t *emu, uintptr_t fnc);
void iFwp(x86emu_t *emu, uintptr_t fnc);
void iFii(x86emu_t *emu, uintptr_t fnc);
void iFiI(x86emu_t *emu, uintptr_t fnc);
void iFiu(x86emu_t *emu, uintptr_t fnc);
void iFiU(x86emu_t *emu, uintptr_t fnc);
void iFil(x86emu_t *emu, uintptr_t fnc);
void iFip(x86emu_t *emu, uintptr_t fnc);
void iFiV(x86emu_t *emu, uintptr_t fnc);
void iFIi(x86emu_t *emu, uintptr_t fnc);
void iFui(x86emu_t *emu, uintptr_t fnc);
void iFuu(x86emu_t *emu, uintptr_t fnc);
void iFup(x86emu_t *emu, uintptr_t fnc);
void iFli(x86emu_t *emu, uintptr_t fnc);
void iFLL(x86emu_t *emu, uintptr_t fnc);
void iFLp(x86emu_t *emu, uintptr_t fnc);
void iFpw(x86emu_t *emu, uintptr_t fnc);
void iFpi(x86emu_t *emu, uintptr_t fnc);
void iFpI(x86emu_t *emu, uintptr_t fnc);
void iFpC(x86emu_t *emu, uintptr_t fnc);
void iFpW(x86emu_t *emu, uintptr_t fnc);
void iFpu(x86emu_t *emu, uintptr_t fnc);
void iFpU(x86emu_t *emu, uintptr_t fnc);
void iFpf(x86emu_t *emu, uintptr_t fnc);
void iFpd(x86emu_t *emu, uintptr_t fnc);
void iFpl(x86emu_t *emu, uintptr_t fnc);
void iFpL(x86emu_t *emu, uintptr_t fnc);
void iFpp(x86emu_t *emu, uintptr_t fnc);
void iFpV(x86emu_t *emu, uintptr_t fnc);
void iFpO(x86emu_t *emu, uintptr_t fnc);
void iFpP(x86emu_t *emu, uintptr_t fnc);
void iFpG(x86emu_t *emu, uintptr_t fnc);
void iFSi(x86emu_t *emu, uintptr_t fnc);
void iFGG(x86emu_t *emu, uintptr_t fnc);
void IFEf(x86emu_t *emu, uintptr_t fnc);
void IFEd(x86emu_t *emu, uintptr_t fnc);
void IFEp(x86emu_t *emu, uintptr_t fnc);
void IFII(x86emu_t *emu, uintptr_t fnc);
void IFpu(x86emu_t *emu, uintptr_t fnc);
void IFpd(x86emu_t *emu, uintptr_t fnc);
void CFip(x86emu_t *emu, uintptr_t fnc);
void CFui(x86emu_t *emu, uintptr_t fnc);
void CFuu(x86emu_t *emu, uintptr_t fnc);
void CFuL(x86emu_t *emu, uintptr_t fnc);
void CFpi(x86emu_t *emu, uintptr_t fnc);
void CFpu(x86emu_t *emu, uintptr_t fnc);
void CFpp(x86emu_t *emu, uintptr_t fnc);
void WFpp(x86emu_t *emu, uintptr_t fnc);
void uFEu(x86emu_t *emu, uintptr_t fnc);
void uFEp(x86emu_t *emu, uintptr_t fnc);
void uFii(x86emu_t *emu, uintptr_t fnc);
void uFiu(x86emu_t *emu, uintptr_t fnc);
void uFui(x86emu_t *emu, uintptr_t fnc);
void uFuu(x86emu_t *emu, uintptr_t fnc);
void uFup(x86emu_t *emu, uintptr_t fnc);
void uFpw(x86emu_t *emu, uintptr_t fnc);
void uFpi(x86emu_t *emu, uintptr_t fnc);
void uFpu(x86emu_t *emu, uintptr_t fnc);
void uFpf(x86emu_t *emu, uintptr_t fnc);
void uFpL(x86emu_t *emu, uintptr_t fnc);
void uFpp(x86emu_t *emu, uintptr_t fnc);
void uFp2(x86emu_t *emu, uintptr_t fnc);
void UFEp(x86emu_t *emu, uintptr_t fnc);
void UFii(x86emu_t *emu, uintptr_t fnc);
void UFuu(x86emu_t *emu, uintptr_t fnc);
void UFUU(x86emu_t *emu, uintptr_t fnc);
void UFUp(x86emu_t *emu, uintptr_t fnc);
void UFpp(x86emu_t *emu, uintptr_t fnc);
void UFss(x86emu_t *emu, uintptr_t fnc);
void fFEf(x86emu_t *emu, uintptr_t fnc);
void fFEp(x86emu_t *emu, uintptr_t fnc);
void fFif(x86emu_t *emu, uintptr_t fnc);
void fFfi(x86emu_t *emu, uintptr_t fnc);
void fFff(x86emu_t *emu, uintptr_t fnc);
void fFfD(x86emu_t *emu, uintptr_t fnc);
void fFfp(x86emu_t *emu, uintptr_t fnc);
void fFpp(x86emu_t *emu, uintptr_t fnc);
void dFEd(x86emu_t *emu, uintptr_t fnc);
void dFid(x86emu_t *emu, uintptr_t fnc);
void dFuu(x86emu_t *emu, uintptr_t fnc);
void dFdi(x86emu_t *emu, uintptr_t fnc);
void dFdd(x86emu_t *emu, uintptr_t fnc);
void dFdD(x86emu_t *emu, uintptr_t fnc);
void dFdp(x86emu_t *emu, uintptr_t fnc);
void dFpi(x86emu_t *emu, uintptr_t fnc);
void dFpd(x86emu_t *emu, uintptr_t fnc);
void dFpp(x86emu_t *emu, uintptr_t fnc);
void DFpp(x86emu_t *emu, uintptr_t fnc);
void lFEv(x86emu_t *emu, uintptr_t fnc);
void lFEi(x86emu_t *emu, uintptr_t fnc);
void lFui(x86emu_t *emu, uintptr_t fnc);
void lFll(x86emu_t *emu, uintptr_t fnc);
void lFpi(x86emu_t *emu, uintptr_t fnc);
void lFpp(x86emu_t *emu, uintptr_t fnc);
void LFii(x86emu_t *emu, uintptr_t fnc);
void LFuu(x86emu_t *emu, uintptr_t fnc);
void LFUp(x86emu_t *emu, uintptr_t fnc);
void LFLi(x86emu_t *emu, uintptr_t fnc);
void LFpi(x86emu_t *emu, uintptr_t fnc);
void LFpL(x86emu_t *emu, uintptr_t fnc);
void LFpp(x86emu_t *emu, uintptr_t fnc);
void pFEv(x86emu_t *emu, uintptr_t fnc);
void pFEi(x86emu_t *emu, uintptr_t fnc);
void pFEu(x86emu_t *emu, uintptr_t fnc);
void pFEp(x86emu_t *emu, uintptr_t fnc);
void pFii(x86emu_t *emu, uintptr_t fnc);
void pFiI(x86emu_t *emu, uintptr_t fnc);
void pFiu(x86emu_t *emu, uintptr_t fnc);
void pFip(x86emu_t *emu, uintptr_t fnc);
void pFiV(x86emu_t *emu, uintptr_t fnc);
void pFII(x86emu_t *emu, uintptr_t fnc);
void pFui(x86emu_t *emu, uintptr_t fnc);
void pFuC(x86emu_t *emu, uintptr_t fnc);
void pFuu(x86emu_t *emu, uintptr_t fnc);
void pFup(x86emu_t *emu, uintptr_t fnc);
void pFuV(x86emu_t *emu, uintptr_t fnc);
void pFUi(x86emu_t *emu, uintptr_t fnc);
void pFUU(x86emu_t *emu, uintptr_t fnc);
void pFdi(x86emu_t *emu, uintptr_t fnc);
void pFdd(x86emu_t *emu, uintptr_t fnc);
void pFlp(x86emu_t *emu, uintptr_t fnc);
void pFLL(x86emu_t *emu, uintptr_t fnc);
void pFLp(x86emu_t *emu, uintptr_t fnc);
void pFpi(x86emu_t *emu, uintptr_t fnc);
void pFpC(x86emu_t *emu, uintptr_t fnc);
void pFpu(x86emu_t *emu, uintptr_t fnc);
void pFpU(x86emu_t *emu, uintptr_t fnc);
void pFpd(x86emu_t *emu, uintptr_t fnc);
void pFpl(x86emu_t *emu, uintptr_t fnc);
void pFpL(x86emu_t *emu, uintptr_t fnc);
void pFpp(x86emu_t *emu, uintptr_t fnc);
void pFpV(x86emu_t *emu, uintptr_t fnc);
void pFpG(x86emu_t *emu, uintptr_t fnc);
void pFps(x86emu_t *emu, uintptr_t fnc);
void pFSi(x86emu_t *emu, uintptr_t fnc);
void vFEip(x86emu_t *emu, uintptr_t fnc);
void vFEpi(x86emu_t *emu, uintptr_t fnc);
void vFEpu(x86emu_t *emu, uintptr_t fnc);
void vFEpp(x86emu_t *emu, uintptr_t fnc);
void vFEpV(x86emu_t *emu, uintptr_t fnc);
void vFccc(x86emu_t *emu, uintptr_t fnc);
void vFwww(x86emu_t *emu, uintptr_t fnc);
void vFiii(x86emu_t *emu, uintptr_t fnc);
void vFiif(x86emu_t *emu, uintptr_t fnc);
void vFiip(x86emu_t *emu, uintptr_t fnc);
void vFiui(x86emu_t *emu, uintptr_t fnc);
void vFiuu(x86emu_t *emu, uintptr_t fnc);
void vFiuU(x86emu_t *emu, uintptr_t fnc);
void vFiup(x86emu_t *emu, uintptr_t fnc);
void vFiff(x86emu_t *emu, uintptr_t fnc);
void vFidd(x86emu_t *emu, uintptr_t fnc);
void vFill(x86emu_t *emu, uintptr_t fnc);
void vFilp(x86emu_t *emu, uintptr_t fnc);
void vFiLL(x86emu_t *emu, uintptr_t fnc);
void vFipi(x86emu_t *emu, uintptr_t fnc);
void vFipu(x86emu_t *emu, uintptr_t fnc);
void vFipp(x86emu_t *emu, uintptr_t fnc);
void vFipV(x86emu_t *emu, uintptr_t fnc);
void vFCCC(x86emu_t *emu, uintptr_t fnc);
void vFWWW(x86emu_t *emu, uintptr_t fnc);
void vFucc(x86emu_t *emu, uintptr_t fnc);
void vFuww(x86emu_t *emu, uintptr_t fnc);
void vFuii(x86emu_t *emu, uintptr_t fnc);
void vFuiI(x86emu_t *emu, uintptr_t fnc);
void vFuiu(x86emu_t *emu, uintptr_t fnc);
void vFuiU(x86emu_t *emu, uintptr_t fnc);
void vFuif(x86emu_t *emu, uintptr_t fnc);
void vFuid(x86emu_t *emu, uintptr_t fnc);
void vFuil(x86emu_t *emu, uintptr_t fnc);
void vFuiL(x86emu_t *emu, uintptr_t fnc);
void vFuip(x86emu_t *emu, uintptr_t fnc);
void vFuWW(x86emu_t *emu, uintptr_t fnc);
void vFuui(x86emu_t *emu, uintptr_t fnc);
void vFuuC(x86emu_t *emu, uintptr_t fnc);
void vFuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuU(x86emu_t *emu, uintptr_t fnc);
void vFuuf(x86emu_t *emu, uintptr_t fnc);
void vFuud(x86emu_t *emu, uintptr_t fnc);
void vFuuL(x86emu_t *emu, uintptr_t fnc);
void vFuup(x86emu_t *emu, uintptr_t fnc);
void vFuff(x86emu_t *emu, uintptr_t fnc);
void vFufp(x86emu_t *emu, uintptr_t fnc);
void vFudd(x86emu_t *emu, uintptr_t fnc);
void vFull(x86emu_t *emu, uintptr_t fnc);
void vFulp(x86emu_t *emu, uintptr_t fnc);
void vFuLL(x86emu_t *emu, uintptr_t fnc);
void vFupu(x86emu_t *emu, uintptr_t fnc);
void vFupp(x86emu_t *emu, uintptr_t fnc);
void vFfff(x86emu_t *emu, uintptr_t fnc);
void vFfpp(x86emu_t *emu, uintptr_t fnc);
void vFddd(x86emu_t *emu, uintptr_t fnc);
void vFdpp(x86emu_t *emu, uintptr_t fnc);
void vFlii(x86emu_t *emu, uintptr_t fnc);
void vFlip(x86emu_t *emu, uintptr_t fnc);
void vFllp(x86emu_t *emu, uintptr_t fnc);
void vFlpp(x86emu_t *emu, uintptr_t fnc);
void vFLpL(x86emu_t *emu, uintptr_t fnc);
void vFpii(x86emu_t *emu, uintptr_t fnc);
void vFpiI(x86emu_t *emu, uintptr_t fnc);
void vFpiC(x86emu_t *emu, uintptr_t fnc);
void vFpiu(x86emu_t *emu, uintptr_t fnc);
void vFpif(x86emu_t *emu, uintptr_t fnc);
void vFpid(x86emu_t *emu, uintptr_t fnc);
void vFpip(x86emu_t *emu, uintptr_t fnc);
void vFpui(x86emu_t *emu, uintptr_t fnc);
void vFpuI(x86emu_t *emu, uintptr_t fnc);
void vFpuu(x86emu_t *emu, uintptr_t fnc);
void vFpuU(x86emu_t *emu, uintptr_t fnc);
void vFpuL(x86emu_t *emu, uintptr_t fnc);
void vFpup(x86emu_t *emu, uintptr_t fnc);
void vFpUi(x86emu_t *emu, uintptr_t fnc);
void vFpUu(x86emu_t *emu, uintptr_t fnc);
void vFpUU(x86emu_t *emu, uintptr_t fnc);
void vFpUp(x86emu_t *emu, uintptr_t fnc);
void vFpUP(x86emu_t *emu, uintptr_t fnc);
void vFpff(x86emu_t *emu, uintptr_t fnc);
void vFpdd(x86emu_t *emu, uintptr_t fnc);
void vFpll(x86emu_t *emu, uintptr_t fnc);
void vFplp(x86emu_t *emu, uintptr_t fnc);
void vFpLi(x86emu_t *emu, uintptr_t fnc);
void vFpLL(x86emu_t *emu, uintptr_t fnc);
void vFpLp(x86emu_t *emu, uintptr_t fnc);
void vFppi(x86emu_t *emu, uintptr_t fnc);
void vFppu(x86emu_t *emu, uintptr_t fnc);
void vFppU(x86emu_t *emu, uintptr_t fnc);
void vFppd(x86emu_t *emu, uintptr_t fnc);
void vFppL(x86emu_t *emu, uintptr_t fnc);
void vFppp(x86emu_t *emu, uintptr_t fnc);
void vFppV(x86emu_t *emu, uintptr_t fnc);
void vFppG(x86emu_t *emu, uintptr_t fnc);
void vFpPp(x86emu_t *emu, uintptr_t fnc);
void vFpPP(x86emu_t *emu, uintptr_t fnc);
void iFEiw(x86emu_t *emu, uintptr_t fnc);
void iFEip(x86emu_t *emu, uintptr_t fnc);
void iFEWW(x86emu_t *emu, uintptr_t fnc);
void iFEup(x86emu_t *emu, uintptr_t fnc);
void iFELp(x86emu_t *emu, uintptr_t fnc);
void iFEpi(x86emu_t *emu, uintptr_t fnc);
void iFEpL(x86emu_t *emu, uintptr_t fnc);
void iFEpp(x86emu_t *emu, uintptr_t fnc);
void iFEpV(x86emu_t *emu, uintptr_t fnc);
void iFESp(x86emu_t *emu, uintptr_t fnc);
void iFwww(x86emu_t *emu, uintptr_t fnc);
void iFwpp(x86emu_t *emu, uintptr_t fnc);
void iFiwC(x86emu_t *emu, uintptr_t fnc);
void iFiii(x86emu_t *emu, uintptr_t fnc);
void iFiiI(x86emu_t *emu, uintptr_t fnc);
void iFiiu(x86emu_t *emu, uintptr_t fnc);
void iFiip(x86emu_t *emu, uintptr_t fnc);
void iFiiO(x86emu_t *emu, uintptr_t fnc);
void iFiII(x86emu_t *emu, uintptr_t fnc);
void iFiui(x86emu_t *emu, uintptr_t fnc);
void iFiuu(x86emu_t *emu, uintptr_t fnc);
void iFiup(x86emu_t *emu, uintptr_t fnc);
void iFiLN(x86emu_t *emu, uintptr_t fnc);
void iFipi(x86emu_t *emu, uintptr_t fnc);
void iFipu(x86emu_t *emu, uintptr_t fnc);
void iFipL(x86emu_t *emu, uintptr_t fnc);
void iFipp(x86emu_t *emu, uintptr_t fnc);
void iFCiW(x86emu_t *emu, uintptr_t fnc);
void iFuwp(x86emu_t *emu, uintptr_t fnc);
void iFuii(x86emu_t *emu, uintptr_t fnc);
void iFuip(x86emu_t *emu, uintptr_t fnc);
void iFuui(x86emu_t *emu, uintptr_t fnc);
void iFuuu(x86emu_t *emu, uintptr_t fnc);
void iFuup(x86emu_t *emu, uintptr_t fnc);
void iFuLp(x86emu_t *emu, uintptr_t fnc);
void iFupi(x86emu_t *emu, uintptr_t fnc);
void iFupp(x86emu_t *emu, uintptr_t fnc);
void iFfff(x86emu_t *emu, uintptr_t fnc);
void iFpwp(x86emu_t *emu, uintptr_t fnc);
void iFpii(x86emu_t *emu, uintptr_t fnc);
void iFpiI(x86emu_t *emu, uintptr_t fnc);
void iFpiu(x86emu_t *emu, uintptr_t fnc);
void iFpiU(x86emu_t *emu, uintptr_t fnc);
void iFpil(x86emu_t *emu, uintptr_t fnc);
void iFpiL(x86emu_t *emu, uintptr_t fnc);
void iFpip(x86emu_t *emu, uintptr_t fnc);
void iFpiV(x86emu_t *emu, uintptr_t fnc);
void iFpIi(x86emu_t *emu, uintptr_t fnc);
void iFpII(x86emu_t *emu, uintptr_t fnc);
void iFpCp(x86emu_t *emu, uintptr_t fnc);
void iFpui(x86emu_t *emu, uintptr_t fnc);
void iFpuu(x86emu_t *emu, uintptr_t fnc);
void iFpuU(x86emu_t *emu, uintptr_t fnc);
void iFpuL(x86emu_t *emu, uintptr_t fnc);
void iFpup(x86emu_t *emu, uintptr_t fnc);
void iFpuV(x86emu_t *emu, uintptr_t fnc);
void iFpu2(x86emu_t *emu, uintptr_t fnc);
void iFpuP(x86emu_t *emu, uintptr_t fnc);
void iFpUi(x86emu_t *emu, uintptr_t fnc);
void iFpUU(x86emu_t *emu, uintptr_t fnc);
void iFpUp(x86emu_t *emu, uintptr_t fnc);
void iFpUP(x86emu_t *emu, uintptr_t fnc);
void iFpfu(x86emu_t *emu, uintptr_t fnc);
void iFpff(x86emu_t *emu, uintptr_t fnc);
void iFpdd(x86emu_t *emu, uintptr_t fnc);
void iFpli(x86emu_t *emu, uintptr_t fnc);
void iFpll(x86emu_t *emu, uintptr_t fnc);
void iFplp(x86emu_t *emu, uintptr_t fnc);
void iFpLi(x86emu_t *emu, uintptr_t fnc);
void iFpLL(x86emu_t *emu, uintptr_t fnc);
void iFpLp(x86emu_t *emu, uintptr_t fnc);
void iFppi(x86emu_t *emu, uintptr_t fnc);
void iFppI(x86emu_t *emu, uintptr_t fnc);
void iFppC(x86emu_t *emu, uintptr_t fnc);
void iFppW(x86emu_t *emu, uintptr_t fnc);
void iFppu(x86emu_t *emu, uintptr_t fnc);
void iFppU(x86emu_t *emu, uintptr_t fnc);
void iFppd(x86emu_t *emu, uintptr_t fnc);
void iFppl(x86emu_t *emu, uintptr_t fnc);
void iFppL(x86emu_t *emu, uintptr_t fnc);
void iFppp(x86emu_t *emu, uintptr_t fnc);
void iFppV(x86emu_t *emu, uintptr_t fnc);
void iFppP(x86emu_t *emu, uintptr_t fnc);
void iFppG(x86emu_t *emu, uintptr_t fnc);
void iFpOu(x86emu_t *emu, uintptr_t fnc);
void iFpPU(x86emu_t *emu, uintptr_t fnc);
void iFpPp(x86emu_t *emu, uintptr_t fnc);
void iFpPP(x86emu_t *emu, uintptr_t fnc);
void iFpGG(x86emu_t *emu, uintptr_t fnc);
void iFSpi(x86emu_t *emu, uintptr_t fnc);
void iFSpL(x86emu_t *emu, uintptr_t fnc);
void IFiIi(x86emu_t *emu, uintptr_t fnc);
void IFpIi(x86emu_t *emu, uintptr_t fnc);
void IFppi(x86emu_t *emu, uintptr_t fnc);
void IFppI(x86emu_t *emu, uintptr_t fnc);
void IFppu(x86emu_t *emu, uintptr_t fnc);
void IFSIi(x86emu_t *emu, uintptr_t fnc);
void CFipp(x86emu_t *emu, uintptr_t fnc);
void CFuff(x86emu_t *emu, uintptr_t fnc);
void CFuLu(x86emu_t *emu, uintptr_t fnc);
void uFEpW(x86emu_t *emu, uintptr_t fnc);
void uFEpu(x86emu_t *emu, uintptr_t fnc);
void uFEpU(x86emu_t *emu, uintptr_t fnc);
void uFEpp(x86emu_t *emu, uintptr_t fnc);
void uFipu(x86emu_t *emu, uintptr_t fnc);
void uFuip(x86emu_t *emu, uintptr_t fnc);
void uFuuu(x86emu_t *emu, uintptr_t fnc);
void uFuup(x86emu_t *emu, uintptr_t fnc);
void uFufp(x86emu_t *emu, uintptr_t fnc);
void uFupi(x86emu_t *emu, uintptr_t fnc);
void uFupu(x86emu_t *emu, uintptr_t fnc);
void uFupp(x86emu_t *emu, uintptr_t fnc);
void uFpii(x86emu_t *emu, uintptr_t fnc);
void uFpip(x86emu_t *emu, uintptr_t fnc);
void uFpCi(x86emu_t *emu, uintptr_t fnc);
void uFpWi(x86emu_t *emu, uintptr_t fnc);
void uFpWu(x86emu_t *emu, uintptr_t fnc);
void uFpWf(x86emu_t *emu, uintptr_t fnc);
void uFpWp(x86emu_t *emu, uintptr_t fnc);
void uFpui(x86emu_t *emu, uintptr_t fnc);
void uFpuC(x86emu_t *emu, uintptr_t fnc);
void uFpuu(x86emu_t *emu, uintptr_t fnc);
void uFpuL(x86emu_t *emu, uintptr_t fnc);
void uFpup(x86emu_t *emu, uintptr_t fnc);
void uFpfu(x86emu_t *emu, uintptr_t fnc);
void uFpLp(x86emu_t *emu, uintptr_t fnc);
void uFppi(x86emu_t *emu, uintptr_t fnc);
void uFppu(x86emu_t *emu, uintptr_t fnc);
void uFppp(x86emu_t *emu, uintptr_t fnc);
void UFUUU(x86emu_t *emu, uintptr_t fnc);
void UFpiU(x86emu_t *emu, uintptr_t fnc);
void UFppi(x86emu_t *emu, uintptr_t fnc);
void UFppu(x86emu_t *emu, uintptr_t fnc);
void fFuii(x86emu_t *emu, uintptr_t fnc);
void fFfff(x86emu_t *emu, uintptr_t fnc);
void fFffp(x86emu_t *emu, uintptr_t fnc);
void fFppu(x86emu_t *emu, uintptr_t fnc);
void fFppp(x86emu_t *emu, uintptr_t fnc);
void dFddd(x86emu_t *emu, uintptr_t fnc);
void dFddp(x86emu_t *emu, uintptr_t fnc);
void dFpdd(x86emu_t *emu, uintptr_t fnc);
void dFppi(x86emu_t *emu, uintptr_t fnc);
void dFppu(x86emu_t *emu, uintptr_t fnc);
void dFppp(x86emu_t *emu, uintptr_t fnc);
void lFipi(x86emu_t *emu, uintptr_t fnc);
void lFipL(x86emu_t *emu, uintptr_t fnc);
void lFlll(x86emu_t *emu, uintptr_t fnc);
void lFlpi(x86emu_t *emu, uintptr_t fnc);
void lFpli(x86emu_t *emu, uintptr_t fnc);
void lFpLp(x86emu_t *emu, uintptr_t fnc);
void lFppi(x86emu_t *emu, uintptr_t fnc);
void lFppL(x86emu_t *emu, uintptr_t fnc);
void lFSpl(x86emu_t *emu, uintptr_t fnc);
void LFiii(x86emu_t *emu, uintptr_t fnc);
void LFLLl(x86emu_t *emu, uintptr_t fnc);
void LFLpu(x86emu_t *emu, uintptr_t fnc);
void LFLpL(x86emu_t *emu, uintptr_t fnc);
void LFpii(x86emu_t *emu, uintptr_t fnc);
void LFpip(x86emu_t *emu, uintptr_t fnc);
void LFpLi(x86emu_t *emu, uintptr_t fnc);
void LFpLp(x86emu_t *emu, uintptr_t fnc);
void LFppi(x86emu_t *emu, uintptr_t fnc);
void LFppL(x86emu_t *emu, uintptr_t fnc);
void LFppp(x86emu_t *emu, uintptr_t fnc);
void LFSpL(x86emu_t *emu, uintptr_t fnc);
void pFEip(x86emu_t *emu, uintptr_t fnc);
void pFEiV(x86emu_t *emu, uintptr_t fnc);
void pFEup(x86emu_t *emu, uintptr_t fnc);
void pFEpi(x86emu_t *emu, uintptr_t fnc);
void pFEpu(x86emu_t *emu, uintptr_t fnc);
void pFEpp(x86emu_t *emu, uintptr_t fnc);
void pFEpV(x86emu_t *emu, uintptr_t fnc);
void pFiii(x86emu_t *emu, uintptr_t fnc);
void pFiiu(x86emu_t *emu, uintptr_t fnc);
void pFiip(x86emu_t *emu, uintptr_t fnc);
void pFiIi(x86emu_t *emu, uintptr_t fnc);
void pFiIp(x86emu_t *emu, uintptr_t fnc);
void pFiup(x86emu_t *emu, uintptr_t fnc);
void pFipi(x86emu_t *emu, uintptr_t fnc);
void pFipu(x86emu_t *emu, uintptr_t fnc);
void pFipp(x86emu_t *emu, uintptr_t fnc);
void pFIpi(x86emu_t *emu, uintptr_t fnc);
void pFCiW(x86emu_t *emu, uintptr_t fnc);
void pFWWW(x86emu_t *emu, uintptr_t fnc);
void pFuui(x86emu_t *emu, uintptr_t fnc);
void pFuuu(x86emu_t *emu, uintptr_t fnc);
void pFulu(x86emu_t *emu, uintptr_t fnc);
void pFupi(x86emu_t *emu, uintptr_t fnc);
void pFupL(x86emu_t *emu, uintptr_t fnc);
void pFUpi(x86emu_t *emu, uintptr_t fnc);
void pFdUU(x86emu_t *emu, uintptr_t fnc);
void pFddd(x86emu_t *emu, uintptr_t fnc);
void pFLLp(x86emu_t *emu, uintptr_t fnc);
void pFLpp(x86emu_t *emu, uintptr_t fnc);
void pFpii(x86emu_t *emu, uintptr_t fnc);
void pFpiu(x86emu_t *emu, uintptr_t fnc);
void pFpiU(x86emu_t *emu, uintptr_t fnc);
void pFpid(x86emu_t *emu, uintptr_t fnc);
void pFpil(x86emu_t *emu, uintptr_t fnc);
void pFpiL(x86emu_t *emu, uintptr_t fnc);
void pFpip(x86emu_t *emu, uintptr_t fnc);
void pFpIi(x86emu_t *emu, uintptr_t fnc);
void pFpCu(x86emu_t *emu, uintptr_t fnc);
void pFpWW(x86emu_t *emu, uintptr_t fnc);
void pFpui(x86emu_t *emu, uintptr_t fnc);
void pFpuu(x86emu_t *emu, uintptr_t fnc);
void pFpuL(x86emu_t *emu, uintptr_t fnc);
void pFpup(x86emu_t *emu, uintptr_t fnc);
void pFpuG(x86emu_t *emu, uintptr_t fnc);
void pFpUi(x86emu_t *emu, uintptr_t fnc);
void pFpUp(x86emu_t *emu, uintptr_t fnc);
void pFpdu(x86emu_t *emu, uintptr_t fnc);
void pFpdd(x86emu_t *emu, uintptr_t fnc);
void pFplC(x86emu_t *emu, uintptr_t fnc);
void pFplu(x86emu_t *emu, uintptr_t fnc);
void pFpll(x86emu_t *emu, uintptr_t fnc);
void pFplp(x86emu_t *emu, uintptr_t fnc);
void pFpLu(x86emu_t *emu, uintptr_t fnc);
void pFpLL(x86emu_t *emu, uintptr_t fnc);
void pFpLp(x86emu_t *emu, uintptr_t fnc);
void pFppi(x86emu_t *emu, uintptr_t fnc);
void pFppI(x86emu_t *emu, uintptr_t fnc);
void pFppC(x86emu_t *emu, uintptr_t fnc);
void pFppu(x86emu_t *emu, uintptr_t fnc);
void pFppU(x86emu_t *emu, uintptr_t fnc);
void pFppf(x86emu_t *emu, uintptr_t fnc);
void pFppl(x86emu_t *emu, uintptr_t fnc);
void pFppL(x86emu_t *emu, uintptr_t fnc);
void pFppp(x86emu_t *emu, uintptr_t fnc);
void pFppV(x86emu_t *emu, uintptr_t fnc);
void pFpOM(x86emu_t *emu, uintptr_t fnc);
void pFpss(x86emu_t *emu, uintptr_t fnc);
void pFSpl(x86emu_t *emu, uintptr_t fnc);
void pFSpp(x86emu_t *emu, uintptr_t fnc);
void vFEiip(x86emu_t *emu, uintptr_t fnc);
void vFEipp(x86emu_t *emu, uintptr_t fnc);
void vFEipV(x86emu_t *emu, uintptr_t fnc);
void vFEpii(x86emu_t *emu, uintptr_t fnc);
void vFEpiL(x86emu_t *emu, uintptr_t fnc);
void vFEpip(x86emu_t *emu, uintptr_t fnc);
void vFEpuu(x86emu_t *emu, uintptr_t fnc);
void vFEpup(x86emu_t *emu, uintptr_t fnc);
void vFEpUp(x86emu_t *emu, uintptr_t fnc);
void vFEppp(x86emu_t *emu, uintptr_t fnc);
void vFEppV(x86emu_t *emu, uintptr_t fnc);
void vFEpPp(x86emu_t *emu, uintptr_t fnc);
void vFcccc(x86emu_t *emu, uintptr_t fnc);
void vFwwww(x86emu_t *emu, uintptr_t fnc);
void vFiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiip(x86emu_t *emu, uintptr_t fnc);
void vFiiCp(x86emu_t *emu, uintptr_t fnc);
void vFiill(x86emu_t *emu, uintptr_t fnc);
void vFiipp(x86emu_t *emu, uintptr_t fnc);
void vFiipV(x86emu_t *emu, uintptr_t fnc);
void vFiuip(x86emu_t *emu, uintptr_t fnc);
void vFiuuu(x86emu_t *emu, uintptr_t fnc);
void vFiulp(x86emu_t *emu, uintptr_t fnc);
void vFiupV(x86emu_t *emu, uintptr_t fnc);
void vFifff(x86emu_t *emu, uintptr_t fnc);
void vFiddd(x86emu_t *emu, uintptr_t fnc);
void vFilip(x86emu_t *emu, uintptr_t fnc);
void vFilll(x86emu_t *emu, uintptr_t fnc);
void vFilpu(x86emu_t *emu, uintptr_t fnc);
void vFilpp(x86emu_t *emu, uintptr_t fnc);
void vFiLLL(x86emu_t *emu, uintptr_t fnc);
void vFipii(x86emu_t *emu, uintptr_t fnc);
void vFipup(x86emu_t *emu, uintptr_t fnc);
void vFipll(x86emu_t *emu, uintptr_t fnc);
void vFippp(x86emu_t *emu, uintptr_t fnc);
void vFCCCC(x86emu_t *emu, uintptr_t fnc);
void vFWWWW(x86emu_t *emu, uintptr_t fnc);
void vFuccc(x86emu_t *emu, uintptr_t fnc);
void vFuwww(x86emu_t *emu, uintptr_t fnc);
void vFuiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiip(x86emu_t *emu, uintptr_t fnc);
void vFuiui(x86emu_t *emu, uintptr_t fnc);
void vFuiuC(x86emu_t *emu, uintptr_t fnc);
void vFuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiup(x86emu_t *emu, uintptr_t fnc);
void vFuifi(x86emu_t *emu, uintptr_t fnc);
void vFuiff(x86emu_t *emu, uintptr_t fnc);
void vFuidd(x86emu_t *emu, uintptr_t fnc);
void vFuill(x86emu_t *emu, uintptr_t fnc);
void vFuilp(x86emu_t *emu, uintptr_t fnc);
void vFuiLL(x86emu_t *emu, uintptr_t fnc);
void vFuipi(x86emu_t *emu, uintptr_t fnc);
void vFuipu(x86emu_t *emu, uintptr_t fnc);
void vFuipp(x86emu_t *emu, uintptr_t fnc);
void vFuWWW(x86emu_t *emu, uintptr_t fnc);
void vFuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuiu(x86emu_t *emu, uintptr_t fnc);
void vFuuil(x86emu_t *emu, uintptr_t fnc);
void vFuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuCu(x86emu_t *emu, uintptr_t fnc);
void vFuuCp(x86emu_t *emu, uintptr_t fnc);
void vFuuui(x86emu_t *emu, uintptr_t fnc);
void vFuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuf(x86emu_t *emu, uintptr_t fnc);
void vFuuud(x86emu_t *emu, uintptr_t fnc);
void vFuuul(x86emu_t *emu, uintptr_t fnc);
void vFuuup(x86emu_t *emu, uintptr_t fnc);
void vFuuff(x86emu_t *emu, uintptr_t fnc);
void vFuuli(x86emu_t *emu, uintptr_t fnc);
void vFuulp(x86emu_t *emu, uintptr_t fnc);
void vFuuLl(x86emu_t *emu, uintptr_t fnc);
void vFuupi(x86emu_t *emu, uintptr_t fnc);
void vFuupp(x86emu_t *emu, uintptr_t fnc);
void vFufff(x86emu_t *emu, uintptr_t fnc);
void vFuddd(x86emu_t *emu, uintptr_t fnc);
void vFuluL(x86emu_t *emu, uintptr_t fnc);
void vFullC(x86emu_t *emu, uintptr_t fnc);
void vFulll(x86emu_t *emu, uintptr_t fnc);
void vFullp(x86emu_t *emu, uintptr_t fnc);
void vFulpi(x86emu_t *emu, uintptr_t fnc);
void vFulpu(x86emu_t *emu, uintptr_t fnc);
void vFulpp(x86emu_t *emu, uintptr_t fnc);
void vFuLui(x86emu_t *emu, uintptr_t fnc);
void vFuLup(x86emu_t *emu, uintptr_t fnc);
void vFuLLL(x86emu_t *emu, uintptr_t fnc);
void vFupii(x86emu_t *emu, uintptr_t fnc);
void vFuppi(x86emu_t *emu, uintptr_t fnc);
void vFuppu(x86emu_t *emu, uintptr_t fnc);
void vFUUpi(x86emu_t *emu, uintptr_t fnc);
void vFffff(x86emu_t *emu, uintptr_t fnc);
void vFdddd(x86emu_t *emu, uintptr_t fnc);
void vFllii(x86emu_t *emu, uintptr_t fnc);
void vFLppi(x86emu_t *emu, uintptr_t fnc);
void vFpiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiu(x86emu_t *emu, uintptr_t fnc);
void vFpiip(x86emu_t *emu, uintptr_t fnc);
void vFpiuu(x86emu_t *emu, uintptr_t fnc);
void vFpiuL(x86emu_t *emu, uintptr_t fnc);
void vFpiup(x86emu_t *emu, uintptr_t fnc);
void vFpiUu(x86emu_t *emu, uintptr_t fnc);
void vFpiUU(x86emu_t *emu, uintptr_t fnc);
void vFpifi(x86emu_t *emu, uintptr_t fnc);
void vFpipi(x86emu_t *emu, uintptr_t fnc);
void vFpipu(x86emu_t *emu, uintptr_t fnc);
void vFpipp(x86emu_t *emu, uintptr_t fnc);
void vFpipG(x86emu_t *emu, uintptr_t fnc);
void vFpIdi(x86emu_t *emu, uintptr_t fnc);
void vFpCiW(x86emu_t *emu, uintptr_t fnc);
void vFpuip(x86emu_t *emu, uintptr_t fnc);
void vFpuui(x86emu_t *emu, uintptr_t fnc);
void vFpuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuup(x86emu_t *emu, uintptr_t fnc);
void vFpuuV(x86emu_t *emu, uintptr_t fnc);
void vFpudd(x86emu_t *emu, uintptr_t fnc);
void vFpupp(x86emu_t *emu, uintptr_t fnc);
void vFpupP(x86emu_t *emu, uintptr_t fnc);
void vFpUui(x86emu_t *emu, uintptr_t fnc);
void vFpUuu(x86emu_t *emu, uintptr_t fnc);
void vFpUup(x86emu_t *emu, uintptr_t fnc);
void vFpUUi(x86emu_t *emu, uintptr_t fnc);
void vFpUUu(x86emu_t *emu, uintptr_t fnc);
void vFpUUp(x86emu_t *emu, uintptr_t fnc);
void vFpUpp(x86emu_t *emu, uintptr_t fnc);
void vFpUPP(x86emu_t *emu, uintptr_t fnc);
void vFpfff(x86emu_t *emu, uintptr_t fnc);
void vFpdii(x86emu_t *emu, uintptr_t fnc);
void vFpddi(x86emu_t *emu, uintptr_t fnc);
void vFpddd(x86emu_t *emu, uintptr_t fnc);
void vFplpp(x86emu_t *emu, uintptr_t fnc);
void vFpLLL(x86emu_t *emu, uintptr_t fnc);
void vFppii(x86emu_t *emu, uintptr_t fnc);
void vFppiu(x86emu_t *emu, uintptr_t fnc);
void vFppid(x86emu_t *emu, uintptr_t fnc);
void vFppil(x86emu_t *emu, uintptr_t fnc);
void vFppiL(x86emu_t *emu, uintptr_t fnc);
void vFppip(x86emu_t *emu, uintptr_t fnc);
void vFppiG(x86emu_t *emu, uintptr_t fnc);
void vFppui(x86emu_t *emu, uintptr_t fnc);
void vFppuu(x86emu_t *emu, uintptr_t fnc);
void vFppup(x86emu_t *emu, uintptr_t fnc);
void vFppfi(x86emu_t *emu, uintptr_t fnc);
void vFppdu(x86emu_t *emu, uintptr_t fnc);
void vFppdd(x86emu_t *emu, uintptr_t fnc);
void vFppdp(x86emu_t *emu, uintptr_t fnc);
void vFpplp(x86emu_t *emu, uintptr_t fnc);
void vFppLp(x86emu_t *emu, uintptr_t fnc);
void vFpppi(x86emu_t *emu, uintptr_t fnc);
void vFpppI(x86emu_t *emu, uintptr_t fnc);
void vFpppu(x86emu_t *emu, uintptr_t fnc);
void vFpppU(x86emu_t *emu, uintptr_t fnc);
void vFpppd(x86emu_t *emu, uintptr_t fnc);
void vFpppL(x86emu_t *emu, uintptr_t fnc);
void vFpppp(x86emu_t *emu, uintptr_t fnc);
void vFpppV(x86emu_t *emu, uintptr_t fnc);
void vFpppG(x86emu_t *emu, uintptr_t fnc);
void vFppGu(x86emu_t *emu, uintptr_t fnc);
void vFpPpp(x86emu_t *emu, uintptr_t fnc);
void vFSppi(x86emu_t *emu, uintptr_t fnc);
void cFpiii(x86emu_t *emu, uintptr_t fnc);
void iFEiip(x86emu_t *emu, uintptr_t fnc);
void iFEiiN(x86emu_t *emu, uintptr_t fnc);
void iFEipL(x86emu_t *emu, uintptr_t fnc);
void iFEipp(x86emu_t *emu, uintptr_t fnc);
void iFEupu(x86emu_t *emu, uintptr_t fnc);
void iFEupp(x86emu_t *emu, uintptr_t fnc);
void iFELup(x86emu_t *emu, uintptr_t fnc);
void iFEpii(x86emu_t *emu, uintptr_t fnc);
void iFEpip(x86emu_t *emu, uintptr_t fnc);
void iFEpuu(x86emu_t *emu, uintptr_t fnc);
void iFEpup(x86emu_t *emu, uintptr_t fnc);
void iFEpUp(x86emu_t *emu, uintptr_t fnc);
void iFEpLi(x86emu_t *emu, uintptr_t fnc);
void iFEppi(x86emu_t *emu, uintptr_t fnc);
void iFEppu(x86emu_t *emu, uintptr_t fnc);
void iFEppd(x86emu_t *emu, uintptr_t fnc);
void iFEppL(x86emu_t *emu, uintptr_t fnc);
void iFEppp(x86emu_t *emu, uintptr_t fnc);
void iFEppV(x86emu_t *emu, uintptr_t fnc);
void iFEpOu(x86emu_t *emu, uintptr_t fnc);
void iFEpOV(x86emu_t *emu, uintptr_t fnc);
void iFEpPp(x86emu_t *emu, uintptr_t fnc);
void iFEPpp(x86emu_t *emu, uintptr_t fnc);
void iFwwww(x86emu_t *emu, uintptr_t fnc);
void iFwppp(x86emu_t *emu, uintptr_t fnc);
void iFiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiu(x86emu_t *emu, uintptr_t fnc);
void iFiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiII(x86emu_t *emu, uintptr_t fnc);
void iFiiui(x86emu_t *emu, uintptr_t fnc);
void iFiipi(x86emu_t *emu, uintptr_t fnc);
void iFiipp(x86emu_t *emu, uintptr_t fnc);
void iFiuwp(x86emu_t *emu, uintptr_t fnc);
void iFiuii(x86emu_t *emu, uintptr_t fnc);
void iFiuui(x86emu_t *emu, uintptr_t fnc);
void iFiLpL(x86emu_t *emu, uintptr_t fnc);
void iFipii(x86emu_t *emu, uintptr_t fnc);
void iFipip(x86emu_t *emu, uintptr_t fnc);
void iFipui(x86emu_t *emu, uintptr_t fnc);
void iFipup(x86emu_t *emu, uintptr_t fnc);
void iFipLi(x86emu_t *emu, uintptr_t fnc);
void iFipLp(x86emu_t *emu, uintptr_t fnc);
void iFippi(x86emu_t *emu, uintptr_t fnc);
void iFippu(x86emu_t *emu, uintptr_t fnc);
void iFippL(x86emu_t *emu, uintptr_t fnc);
void iFippp(x86emu_t *emu, uintptr_t fnc);
void iFipON(x86emu_t *emu, uintptr_t fnc);
void iFuiup(x86emu_t *emu, uintptr_t fnc);
void iFuipu(x86emu_t *emu, uintptr_t fnc);
void iFuipp(x86emu_t *emu, uintptr_t fnc);
void iFupup(x86emu_t *emu, uintptr_t fnc);
void iFuppi(x86emu_t *emu, uintptr_t fnc);
void iFuppp(x86emu_t *emu, uintptr_t fnc);
void iFLppp(x86emu_t *emu, uintptr_t fnc);
void iFpwww(x86emu_t *emu, uintptr_t fnc);
void iFpwpp(x86emu_t *emu, uintptr_t fnc);
void iFpiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiI(x86emu_t *emu, uintptr_t fnc);
void iFpiiu(x86emu_t *emu, uintptr_t fnc);
void iFpiid(x86emu_t *emu, uintptr_t fnc);
void iFpiiL(x86emu_t *emu, uintptr_t fnc);
void iFpiip(x86emu_t *emu, uintptr_t fnc);
void iFpiuu(x86emu_t *emu, uintptr_t fnc);
void iFpiuL(x86emu_t *emu, uintptr_t fnc);
void iFpiup(x86emu_t *emu, uintptr_t fnc);
void iFpiUp(x86emu_t *emu, uintptr_t fnc);
void iFpild(x86emu_t *emu, uintptr_t fnc);
void iFpipi(x86emu_t *emu, uintptr_t fnc);
void iFpipC(x86emu_t *emu, uintptr_t fnc);
void iFpipL(x86emu_t *emu, uintptr_t fnc);
void iFpipp(x86emu_t *emu, uintptr_t fnc);
void iFpipV(x86emu_t *emu, uintptr_t fnc);
void iFpIip(x86emu_t *emu, uintptr_t fnc);
void iFpCCC(x86emu_t *emu, uintptr_t fnc);
void iFpCpi(x86emu_t *emu, uintptr_t fnc);
void iFpWWu(x86emu_t *emu, uintptr_t fnc);
void iFpuwp(x86emu_t *emu, uintptr_t fnc);
void iFpuii(x86emu_t *emu, uintptr_t fnc);
void iFpuiu(x86emu_t *emu, uintptr_t fnc);
void iFpuiL(x86emu_t *emu, uintptr_t fnc);
void iFpuip(x86emu_t *emu, uintptr_t fnc);
void iFpuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuu(x86emu_t *emu, uintptr_t fnc);
void iFpuup(x86emu_t *emu, uintptr_t fnc);
void iFpuUp(x86emu_t *emu, uintptr_t fnc);
void iFpuLL(x86emu_t *emu, uintptr_t fnc);
void iFpuLp(x86emu_t *emu, uintptr_t fnc);
void iFpupi(x86emu_t *emu, uintptr_t fnc);
void iFpupu(x86emu_t *emu, uintptr_t fnc);
void iFpupp(x86emu_t *emu, uintptr_t fnc);
void iFpupV(x86emu_t *emu, uintptr_t fnc);
void iFpuPU(x86emu_t *emu, uintptr_t fnc);
void iFpUup(x86emu_t *emu, uintptr_t fnc);
void iFpUUU(x86emu_t *emu, uintptr_t fnc);
void iFpUpp(x86emu_t *emu, uintptr_t fnc);
void iFplii(x86emu_t *emu, uintptr_t fnc);
void iFplip(x86emu_t *emu, uintptr_t fnc);
void iFpLpi(x86emu_t *emu, uintptr_t fnc);
void iFpLpL(x86emu_t *emu, uintptr_t fnc);
void iFppii(x86emu_t *emu, uintptr_t fnc);
void iFppiu(x86emu_t *emu, uintptr_t fnc);
void iFppiU(x86emu_t *emu, uintptr_t fnc);
void iFppiL(x86emu_t *emu, uintptr_t fnc);
void iFppip(x86emu_t *emu, uintptr_t fnc);
void iFppIL(x86emu_t *emu, uintptr_t fnc);
void iFppCC(x86emu_t *emu, uintptr_t fnc);
void iFppuw(x86emu_t *emu, uintptr_t fnc);
void iFppui(x86emu_t *emu, uintptr_t fnc);
void iFppuW(x86emu_t *emu, uintptr_t fnc);
void iFppuu(x86emu_t *emu, uintptr_t fnc);
void iFppup(x86emu_t *emu, uintptr_t fnc);
void iFppdp(x86emu_t *emu, uintptr_t fnc);
void iFppll(x86emu_t *emu, uintptr_t fnc);
void iFpplp(x86emu_t *emu, uintptr_t fnc);
void iFppLi(x86emu_t *emu, uintptr_t fnc);
void iFppLL(x86emu_t *emu, uintptr_t fnc);
void iFppLp(x86emu_t *emu, uintptr_t fnc);
void iFpppi(x86emu_t *emu, uintptr_t fnc);
void iFpppC(x86emu_t *emu, uintptr_t fnc);
void iFpppu(x86emu_t *emu, uintptr_t fnc);
void iFpppU(x86emu_t *emu, uintptr_t fnc);
void iFpppL(x86emu_t *emu, uintptr_t fnc);
void iFpppp(x86emu_t *emu, uintptr_t fnc);
void iFpPpp(x86emu_t *emu, uintptr_t fnc);
void iFpGGi(x86emu_t *emu, uintptr_t fnc);
void IFEpIi(x86emu_t *emu, uintptr_t fnc);
void IFpIip(x86emu_t *emu, uintptr_t fnc);
void IFppii(x86emu_t *emu, uintptr_t fnc);
void IFppip(x86emu_t *emu, uintptr_t fnc);
void IFpppp(x86emu_t *emu, uintptr_t fnc);
void IFSIii(x86emu_t *emu, uintptr_t fnc);
void CFuuff(x86emu_t *emu, uintptr_t fnc);
void uFEipp(x86emu_t *emu, uintptr_t fnc);
void uFEupp(x86emu_t *emu, uintptr_t fnc);
void uFEpup(x86emu_t *emu, uintptr_t fnc);
void uFEppu(x86emu_t *emu, uintptr_t fnc);
void uFEppp(x86emu_t *emu, uintptr_t fnc);
void uFifff(x86emu_t *emu, uintptr_t fnc);
void uFippu(x86emu_t *emu, uintptr_t fnc);
void uFuuuu(x86emu_t *emu, uintptr_t fnc);
void uFpipu(x86emu_t *emu, uintptr_t fnc);
void uFpipp(x86emu_t *emu, uintptr_t fnc);
void uFpCCC(x86emu_t *emu, uintptr_t fnc);
void uFpuip(x86emu_t *emu, uintptr_t fnc);
void uFpuuu(x86emu_t *emu, uintptr_t fnc);
void uFpuup(x86emu_t *emu, uintptr_t fnc);
void uFpupu(x86emu_t *emu, uintptr_t fnc);
void uFppiu(x86emu_t *emu, uintptr_t fnc);
void uFppip(x86emu_t *emu, uintptr_t fnc);
void uFppuu(x86emu_t *emu, uintptr_t fnc);
void uFppup(x86emu_t *emu, uintptr_t fnc);
void uFppLp(x86emu_t *emu, uintptr_t fnc);
void uFpppi(x86emu_t *emu, uintptr_t fnc);
void uFpppu(x86emu_t *emu, uintptr_t fnc);
void uFpppp(x86emu_t *emu, uintptr_t fnc);
void uFpppV(x86emu_t *emu, uintptr_t fnc);
void UFpipp(x86emu_t *emu, uintptr_t fnc);
void UFppii(x86emu_t *emu, uintptr_t fnc);
void UFppip(x86emu_t *emu, uintptr_t fnc);
void UFpppp(x86emu_t *emu, uintptr_t fnc);
void UFSUii(x86emu_t *emu, uintptr_t fnc);
void dFpppp(x86emu_t *emu, uintptr_t fnc);
void lFEpip(x86emu_t *emu, uintptr_t fnc);
void lFiipL(x86emu_t *emu, uintptr_t fnc);
void lFipLi(x86emu_t *emu, uintptr_t fnc);
void lFipLI(x86emu_t *emu, uintptr_t fnc);
void lFipLl(x86emu_t *emu, uintptr_t fnc);
void lFipLL(x86emu_t *emu, uintptr_t fnc);
void lFippL(x86emu_t *emu, uintptr_t fnc);
void lFpili(x86emu_t *emu, uintptr_t fnc);
void lFpilp(x86emu_t *emu, uintptr_t fnc);
void lFpuip(x86emu_t *emu, uintptr_t fnc);
void lFpupp(x86emu_t *emu, uintptr_t fnc);
void lFpppL(x86emu_t *emu, uintptr_t fnc);
void LFippp(x86emu_t *emu, uintptr_t fnc);
void LFpLCL(x86emu_t *emu, uintptr_t fnc);
void LFpLLp(x86emu_t *emu, uintptr_t fnc);
void LFpLpL(x86emu_t *emu, uintptr_t fnc);
void LFpLpp(x86emu_t *emu, uintptr_t fnc);
void LFppii(x86emu_t *emu, uintptr_t fnc);
void LFppip(x86emu_t *emu, uintptr_t fnc);
void LFppLu(x86emu_t *emu, uintptr_t fnc);
void LFppLL(x86emu_t *emu, uintptr_t fnc);
void LFppLp(x86emu_t *emu, uintptr_t fnc);
void LFpppi(x86emu_t *emu, uintptr_t fnc);
void LFpppL(x86emu_t *emu, uintptr_t fnc);
void LFpppp(x86emu_t *emu, uintptr_t fnc);
void pFEipi(x86emu_t *emu, uintptr_t fnc);
void pFEipp(x86emu_t *emu, uintptr_t fnc);
void pFEipV(x86emu_t *emu, uintptr_t fnc);
void pFEupp(x86emu_t *emu, uintptr_t fnc);
void pFEpii(x86emu_t *emu, uintptr_t fnc);
void pFEpip(x86emu_t *emu, uintptr_t fnc);
void pFEplp(x86emu_t *emu, uintptr_t fnc);
void pFEppi(x86emu_t *emu, uintptr_t fnc);
void pFEppC(x86emu_t *emu, uintptr_t fnc);
void pFEppu(x86emu_t *emu, uintptr_t fnc);
void pFEppp(x86emu_t *emu, uintptr_t fnc);
void pFEppV(x86emu_t *emu, uintptr_t fnc);
void pFiiii(x86emu_t *emu, uintptr_t fnc);
void pFiiiu(x86emu_t *emu, uintptr_t fnc);
void pFiiuu(x86emu_t *emu, uintptr_t fnc);
void pFiiup(x86emu_t *emu, uintptr_t fnc);
void pFiipi(x86emu_t *emu, uintptr_t fnc);
void pFiipp(x86emu_t *emu, uintptr_t fnc);
void pFiIIi(x86emu_t *emu, uintptr_t fnc);
void pFillu(x86emu_t *emu, uintptr_t fnc);
void pFipii(x86emu_t *emu, uintptr_t fnc);
void pFipip(x86emu_t *emu, uintptr_t fnc);
void pFipup(x86emu_t *emu, uintptr_t fnc);
void pFippi(x86emu_t *emu, uintptr_t fnc);
void pFippu(x86emu_t *emu, uintptr_t fnc);
void pFuuii(x86emu_t *emu, uintptr_t fnc);
void pFuuuu(x86emu_t *emu, uintptr_t fnc);
void pFullu(x86emu_t *emu, uintptr_t fnc);
void pFffff(x86emu_t *emu, uintptr_t fnc);
void pFdipp(x86emu_t *emu, uintptr_t fnc);
void pFdddd(x86emu_t *emu, uintptr_t fnc);
void pFlfff(x86emu_t *emu, uintptr_t fnc);
void pFLiip(x86emu_t *emu, uintptr_t fnc);
void pFLppp(x86emu_t *emu, uintptr_t fnc);
void pFpiii(x86emu_t *emu, uintptr_t fnc);
void pFpiiu(x86emu_t *emu, uintptr_t fnc);
void pFpiip(x86emu_t *emu, uintptr_t fnc);
void pFpiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiLL(x86emu_t *emu, uintptr_t fnc);
void pFpipd(x86emu_t *emu, uintptr_t fnc);
void pFpipp(x86emu_t *emu, uintptr_t fnc);
void pFpipV(x86emu_t *emu, uintptr_t fnc);
void pFpuii(x86emu_t *emu, uintptr_t fnc);
void pFpuil(x86emu_t *emu, uintptr_t fnc);
void pFpuip(x86emu_t *emu, uintptr_t fnc);
void pFpuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupi(x86emu_t *emu, uintptr_t fnc);
void pFpupu(x86emu_t *emu, uintptr_t fnc);
void pFpdIU(x86emu_t *emu, uintptr_t fnc);
void pFplpl(x86emu_t *emu, uintptr_t fnc);
void pFpLip(x86emu_t *emu, uintptr_t fnc);
void pFpLLp(x86emu_t *emu, uintptr_t fnc);
void pFppii(x86emu_t *emu, uintptr_t fnc);
void pFppiu(x86emu_t *emu, uintptr_t fnc);
void pFppiL(x86emu_t *emu, uintptr_t fnc);
void pFppip(x86emu_t *emu, uintptr_t fnc);
void pFppuu(x86emu_t *emu, uintptr_t fnc);
void pFppuL(x86emu_t *emu, uintptr_t fnc);
void pFppup(x86emu_t *emu, uintptr_t fnc);
void pFppUU(x86emu_t *emu, uintptr_t fnc);
void pFppdd(x86emu_t *emu, uintptr_t fnc);
void pFppll(x86emu_t *emu, uintptr_t fnc);
void pFppLL(x86emu_t *emu, uintptr_t fnc);
void pFppLp(x86emu_t *emu, uintptr_t fnc);
void pFpppi(x86emu_t *emu, uintptr_t fnc);
void pFpppu(x86emu_t *emu, uintptr_t fnc);
void pFpppL(x86emu_t *emu, uintptr_t fnc);
void pFpppp(x86emu_t *emu, uintptr_t fnc);
void pFpppV(x86emu_t *emu, uintptr_t fnc);
void pFSppi(x86emu_t *emu, uintptr_t fnc);
void vFEippp(x86emu_t *emu, uintptr_t fnc);
void vFEpipu(x86emu_t *emu, uintptr_t fnc);
void vFEpuup(x86emu_t *emu, uintptr_t fnc);
void vFEpupp(x86emu_t *emu, uintptr_t fnc);
void vFEpLLp(x86emu_t *emu, uintptr_t fnc);
void vFEppip(x86emu_t *emu, uintptr_t fnc);
void vFEppiV(x86emu_t *emu, uintptr_t fnc);
void vFEppup(x86emu_t *emu, uintptr_t fnc);
void vFEpppi(x86emu_t *emu, uintptr_t fnc);
void vFEpppp(x86emu_t *emu, uintptr_t fnc);
void vFEpPpp(x86emu_t *emu, uintptr_t fnc);
void vFiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFiiuii(x86emu_t *emu, uintptr_t fnc);
void vFiiuup(x86emu_t *emu, uintptr_t fnc);
void vFiillu(x86emu_t *emu, uintptr_t fnc);
void vFiilll(x86emu_t *emu, uintptr_t fnc);
void vFiipii(x86emu_t *emu, uintptr_t fnc);
void vFiipll(x86emu_t *emu, uintptr_t fnc);
void vFiuiip(x86emu_t *emu, uintptr_t fnc);
void vFiuipi(x86emu_t *emu, uintptr_t fnc);
void vFiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFiulpp(x86emu_t *emu, uintptr_t fnc);
void vFiffff(x86emu_t *emu, uintptr_t fnc);
void vFidddd(x86emu_t *emu, uintptr_t fnc);
void vFilill(x86emu_t *emu, uintptr_t fnc);
void vFilipi(x86emu_t *emu, uintptr_t fnc);
void vFilipl(x86emu_t *emu, uintptr_t fnc);
void vFillll(x86emu_t *emu, uintptr_t fnc);
void vFiLLLL(x86emu_t *emu, uintptr_t fnc);
void vFipipu(x86emu_t *emu, uintptr_t fnc);
void vFipipp(x86emu_t *emu, uintptr_t fnc);
void vFipupi(x86emu_t *emu, uintptr_t fnc);
void vFucccc(x86emu_t *emu, uintptr_t fnc);
void vFuwwww(x86emu_t *emu, uintptr_t fnc);
void vFuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuiiup(x86emu_t *emu, uintptr_t fnc);
void vFuiill(x86emu_t *emu, uintptr_t fnc);
void vFuiIII(x86emu_t *emu, uintptr_t fnc);
void vFuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiuCi(x86emu_t *emu, uintptr_t fnc);
void vFuiuCu(x86emu_t *emu, uintptr_t fnc);
void vFuiuuu(x86emu_t *emu, uintptr_t fnc);
void vFuiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiupi(x86emu_t *emu, uintptr_t fnc);
void vFuifff(x86emu_t *emu, uintptr_t fnc);
void vFuiddd(x86emu_t *emu, uintptr_t fnc);
void vFuilll(x86emu_t *emu, uintptr_t fnc);
void vFuiLLL(x86emu_t *emu, uintptr_t fnc);
void vFuipii(x86emu_t *emu, uintptr_t fnc);
void vFuipip(x86emu_t *emu, uintptr_t fnc);
void vFuipup(x86emu_t *emu, uintptr_t fnc);
void vFuippp(x86emu_t *emu, uintptr_t fnc);
void vFuCCCC(x86emu_t *emu, uintptr_t fnc);
void vFuCuip(x86emu_t *emu, uintptr_t fnc);
void vFuCuup(x86emu_t *emu, uintptr_t fnc);
void vFuWWWW(x86emu_t *emu, uintptr_t fnc);
void vFuuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiip(x86emu_t *emu, uintptr_t fnc);
void vFuuiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiup(x86emu_t *emu, uintptr_t fnc);
void vFuuifi(x86emu_t *emu, uintptr_t fnc);
void vFuuipC(x86emu_t *emu, uintptr_t fnc);
void vFuuipu(x86emu_t *emu, uintptr_t fnc);
void vFuuipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiu(x86emu_t *emu, uintptr_t fnc);
void vFuuuil(x86emu_t *emu, uintptr_t fnc);
void vFuuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuuui(x86emu_t *emu, uintptr_t fnc);
void vFuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuli(x86emu_t *emu, uintptr_t fnc);
void vFuuull(x86emu_t *emu, uintptr_t fnc);
void vFuulll(x86emu_t *emu, uintptr_t fnc);
void vFuullp(x86emu_t *emu, uintptr_t fnc);
void vFuupii(x86emu_t *emu, uintptr_t fnc);
void vFuuppu(x86emu_t *emu, uintptr_t fnc);
void vFuffff(x86emu_t *emu, uintptr_t fnc);
void vFudddd(x86emu_t *emu, uintptr_t fnc);
void vFulill(x86emu_t *emu, uintptr_t fnc);
void vFullll(x86emu_t *emu, uintptr_t fnc);
void vFullpu(x86emu_t *emu, uintptr_t fnc);
void vFuLLLL(x86emu_t *emu, uintptr_t fnc);
void vFupiii(x86emu_t *emu, uintptr_t fnc);
void vFupupi(x86emu_t *emu, uintptr_t fnc);
void vFupupp(x86emu_t *emu, uintptr_t fnc);
void vFuplii(x86emu_t *emu, uintptr_t fnc);
void vFuppip(x86emu_t *emu, uintptr_t fnc);
void vFupppp(x86emu_t *emu, uintptr_t fnc);
void vFfffff(x86emu_t *emu, uintptr_t fnc);
void vFddddp(x86emu_t *emu, uintptr_t fnc);
void vFluipp(x86emu_t *emu, uintptr_t fnc);
void vFLpppi(x86emu_t *emu, uintptr_t fnc);
void vFpiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiiI(x86emu_t *emu, uintptr_t fnc);
void vFpiiiu(x86emu_t *emu, uintptr_t fnc);
void vFpiiip(x86emu_t *emu, uintptr_t fnc);
void vFpiiII(x86emu_t *emu, uintptr_t fnc);
void vFpiiff(x86emu_t *emu, uintptr_t fnc);
void vFpiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiIiI(x86emu_t *emu, uintptr_t fnc);
void vFpiIII(x86emu_t *emu, uintptr_t fnc);
void vFpiUUp(x86emu_t *emu, uintptr_t fnc);
void vFpilpp(x86emu_t *emu, uintptr_t fnc);
void vFpipii(x86emu_t *emu, uintptr_t fnc);
void vFpipiu(x86emu_t *emu, uintptr_t fnc);
void vFpuiip(x86emu_t *emu, uintptr_t fnc);
void vFpuipp(x86emu_t *emu, uintptr_t fnc);
void vFpuipV(x86emu_t *emu, uintptr_t fnc);
void vFpuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuuup(x86emu_t *emu, uintptr_t fnc);
void vFpuupp(x86emu_t *emu, uintptr_t fnc);
void vFpuUUu(x86emu_t *emu, uintptr_t fnc);
void vFpuddd(x86emu_t *emu, uintptr_t fnc);
void vFpupup(x86emu_t *emu, uintptr_t fnc);
void vFpUuiu(x86emu_t *emu, uintptr_t fnc);
void vFpUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpUUup(x86emu_t *emu, uintptr_t fnc);
void vFpUUUu(x86emu_t *emu, uintptr_t fnc);
void vFpUUUp(x86emu_t *emu, uintptr_t fnc);
void vFpffff(x86emu_t *emu, uintptr_t fnc);
void vFpdiII(x86emu_t *emu, uintptr_t fnc);
void vFpddii(x86emu_t *emu, uintptr_t fnc);
void vFpdddd(x86emu_t *emu, uintptr_t fnc);
void vFpddpp(x86emu_t *emu, uintptr_t fnc);
void vFpliil(x86emu_t *emu, uintptr_t fnc);
void vFplppp(x86emu_t *emu, uintptr_t fnc);
void vFpLLpp(x86emu_t *emu, uintptr_t fnc);
void vFppiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiu(x86emu_t *emu, uintptr_t fnc);
void vFppiip(x86emu_t *emu, uintptr_t fnc);
void vFppiup(x86emu_t *emu, uintptr_t fnc);
void vFppiff(x86emu_t *emu, uintptr_t fnc);
void vFppipi(x86emu_t *emu, uintptr_t fnc);
void vFppipp(x86emu_t *emu, uintptr_t fnc);
void vFppWui(x86emu_t *emu, uintptr_t fnc);
void vFppuui(x86emu_t *emu, uintptr_t fnc);
void vFppuuu(x86emu_t *emu, uintptr_t fnc);
void vFppuup(x86emu_t *emu, uintptr_t fnc);
void vFppudd(x86emu_t *emu, uintptr_t fnc);
void vFppupi(x86emu_t *emu, uintptr_t fnc);
void vFppupp(x86emu_t *emu, uintptr_t fnc);
void vFppddp(x86emu_t *emu, uintptr_t fnc);
void vFpppii(x86emu_t *emu, uintptr_t fnc);
void vFpppip(x86emu_t *emu, uintptr_t fnc);
void vFpppuu(x86emu_t *emu, uintptr_t fnc);
void vFpppup(x86emu_t *emu, uintptr_t fnc);
void vFpppdd(x86emu_t *emu, uintptr_t fnc);
void vFppppi(x86emu_t *emu, uintptr_t fnc);
void vFppppu(x86emu_t *emu, uintptr_t fnc);
void vFppppL(x86emu_t *emu, uintptr_t fnc);
void vFppppp(x86emu_t *emu, uintptr_t fnc);
void iFEiipp(x86emu_t *emu, uintptr_t fnc);
void iFEiipV(x86emu_t *emu, uintptr_t fnc);
void iFEiupp(x86emu_t *emu, uintptr_t fnc);
void iFEipip(x86emu_t *emu, uintptr_t fnc);
void iFEipuu(x86emu_t *emu, uintptr_t fnc);
void iFEippi(x86emu_t *emu, uintptr_t fnc);
void iFEippL(x86emu_t *emu, uintptr_t fnc);
void iFEippp(x86emu_t *emu, uintptr_t fnc);
void iFEuuuu(x86emu_t *emu, uintptr_t fnc);
void iFEpiii(x86emu_t *emu, uintptr_t fnc);
void iFEpiup(x86emu_t *emu, uintptr_t fnc);
void iFEpipi(x86emu_t *emu, uintptr_t fnc);
void iFEpipp(x86emu_t *emu, uintptr_t fnc);
void iFEpipV(x86emu_t *emu, uintptr_t fnc);
void iFEpupU(x86emu_t *emu, uintptr_t fnc);
void iFEpupp(x86emu_t *emu, uintptr_t fnc);
void iFEpupV(x86emu_t *emu, uintptr_t fnc);
void iFEpUup(x86emu_t *emu, uintptr_t fnc);
void iFEpUpP(x86emu_t *emu, uintptr_t fnc);
void iFEpLpp(x86emu_t *emu, uintptr_t fnc);
void iFEpLpV(x86emu_t *emu, uintptr_t fnc);
void iFEppii(x86emu_t *emu, uintptr_t fnc);
void iFEppip(x86emu_t *emu, uintptr_t fnc);
void iFEppiV(x86emu_t *emu, uintptr_t fnc);
void iFEpplp(x86emu_t *emu, uintptr_t fnc);
void iFEpppi(x86emu_t *emu, uintptr_t fnc);
void iFEpppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppV(x86emu_t *emu, uintptr_t fnc);
void iFEpPpp(x86emu_t *emu, uintptr_t fnc);
void iFiiipu(x86emu_t *emu, uintptr_t fnc);
void iFiiipp(x86emu_t *emu, uintptr_t fnc);
void iFiiupp(x86emu_t *emu, uintptr_t fnc);
void iFiipip(x86emu_t *emu, uintptr_t fnc);
void iFipiii(x86emu_t *emu, uintptr_t fnc);
void iFipipi(x86emu_t *emu, uintptr_t fnc);
void iFipipu(x86emu_t *emu, uintptr_t fnc);
void iFipuii(x86emu_t *emu, uintptr_t fnc);
void iFipuui(x86emu_t *emu, uintptr_t fnc);
void iFippui(x86emu_t *emu, uintptr_t fnc);
void iFippuu(x86emu_t *emu, uintptr_t fnc);
void iFippup(x86emu_t *emu, uintptr_t fnc);
void iFipppi(x86emu_t *emu, uintptr_t fnc);
void iFipppp(x86emu_t *emu, uintptr_t fnc);
void iFuppup(x86emu_t *emu, uintptr_t fnc);
void iFLpppp(x86emu_t *emu, uintptr_t fnc);
void iFpwwww(x86emu_t *emu, uintptr_t fnc);
void iFpwppp(x86emu_t *emu, uintptr_t fnc);
void iFpiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiu(x86emu_t *emu, uintptr_t fnc);
void iFpiiiL(x86emu_t *emu, uintptr_t fnc);
void iFpiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiui(x86emu_t *emu, uintptr_t fnc);
void iFpiiuu(x86emu_t *emu, uintptr_t fnc);
void iFpiipi(x86emu_t *emu, uintptr_t fnc);
void iFpiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiIip(x86emu_t *emu, uintptr_t fnc);
void iFpiuwp(x86emu_t *emu, uintptr_t fnc);
void iFpiupu(x86emu_t *emu, uintptr_t fnc);
void iFpiUUU(x86emu_t *emu, uintptr_t fnc);
void iFpipii(x86emu_t *emu, uintptr_t fnc);
void iFpipiL(x86emu_t *emu, uintptr_t fnc);
void iFpipip(x86emu_t *emu, uintptr_t fnc);
void iFpippi(x86emu_t *emu, uintptr_t fnc);
void iFpippp(x86emu_t *emu, uintptr_t fnc);
void iFpipGp(x86emu_t *emu, uintptr_t fnc);
void iFpIppp(x86emu_t *emu, uintptr_t fnc);
void iFpCCCC(x86emu_t *emu, uintptr_t fnc);
void iFpuiii(x86emu_t *emu, uintptr_t fnc);
void iFpuiup(x86emu_t *emu, uintptr_t fnc);
void iFpuill(x86emu_t *emu, uintptr_t fnc);
void iFpuipi(x86emu_t *emu, uintptr_t fnc);
void iFpuuip(x86emu_t *emu, uintptr_t fnc);
void iFpuuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuup(x86emu_t *emu, uintptr_t fnc);
void iFpuuLL(x86emu_t *emu, uintptr_t fnc);
void iFpuupu(x86emu_t *emu, uintptr_t fnc);
void iFpuupp(x86emu_t *emu, uintptr_t fnc);
void iFpuLpL(x86emu_t *emu, uintptr_t fnc);
void iFpuLpp(x86emu_t *emu, uintptr_t fnc);
void iFpupiU(x86emu_t *emu, uintptr_t fnc);
void iFpupuu(x86emu_t *emu, uintptr_t fnc);
void iFpupup(x86emu_t *emu, uintptr_t fnc);
void iFpuppu(x86emu_t *emu, uintptr_t fnc);
void iFpuppp(x86emu_t *emu, uintptr_t fnc);
void iFpuPpp(x86emu_t *emu, uintptr_t fnc);
void iFpUiUi(x86emu_t *emu, uintptr_t fnc);
void iFplluu(x86emu_t *emu, uintptr_t fnc);
void iFpLlpp(x86emu_t *emu, uintptr_t fnc);
void iFpLLpp(x86emu_t *emu, uintptr_t fnc);
void iFppiiu(x86emu_t *emu, uintptr_t fnc);
void iFppiip(x86emu_t *emu, uintptr_t fnc);
void iFppiIp(x86emu_t *emu, uintptr_t fnc);
void iFppiup(x86emu_t *emu, uintptr_t fnc);
void iFppiLL(x86emu_t *emu, uintptr_t fnc);
void iFppipi(x86emu_t *emu, uintptr_t fnc);
void iFppipu(x86emu_t *emu, uintptr_t fnc);
void iFppipp(x86emu_t *emu, uintptr_t fnc);
void iFppuwp(x86emu_t *emu, uintptr_t fnc);
void iFppuip(x86emu_t *emu, uintptr_t fnc);
void iFppupi(x86emu_t *emu, uintptr_t fnc);
void iFppupp(x86emu_t *emu, uintptr_t fnc);
void iFppllp(x86emu_t *emu, uintptr_t fnc);
void iFpplpp(x86emu_t *emu, uintptr_t fnc);
void iFppLip(x86emu_t *emu, uintptr_t fnc);
void iFppLpi(x86emu_t *emu, uintptr_t fnc);
void iFppLpL(x86emu_t *emu, uintptr_t fnc);
void iFppLpp(x86emu_t *emu, uintptr_t fnc);
void iFpppii(x86emu_t *emu, uintptr_t fnc);
void iFpppiu(x86emu_t *emu, uintptr_t fnc);
void iFpppip(x86emu_t *emu, uintptr_t fnc);
void iFpppui(x86emu_t *emu, uintptr_t fnc);
void iFpppuu(x86emu_t *emu, uintptr_t fnc);
void iFpppup(x86emu_t *emu, uintptr_t fnc);
void iFpppUi(x86emu_t *emu, uintptr_t fnc);
void iFpppLi(x86emu_t *emu, uintptr_t fnc);
void iFppppi(x86emu_t *emu, uintptr_t fnc);
void iFppppu(x86emu_t *emu, uintptr_t fnc);
void iFppppL(x86emu_t *emu, uintptr_t fnc);
void iFppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppGp(x86emu_t *emu, uintptr_t fnc);
void iFpPPpp(x86emu_t *emu, uintptr_t fnc);
void IFppIII(x86emu_t *emu, uintptr_t fnc);
void uFEippp(x86emu_t *emu, uintptr_t fnc);
void uFEpipp(x86emu_t *emu, uintptr_t fnc);
void uFEppuu(x86emu_t *emu, uintptr_t fnc);
void uFEpppp(x86emu_t *emu, uintptr_t fnc);
void uFiuuuu(x86emu_t *emu, uintptr_t fnc);
void uFipipp(x86emu_t *emu, uintptr_t fnc);
void uFipLpp(x86emu_t *emu, uintptr_t fnc);
void uFpCCCC(x86emu_t *emu, uintptr_t fnc);
void uFpWuip(x86emu_t *emu, uintptr_t fnc);
void uFpuuuu(x86emu_t *emu, uintptr_t fnc);
void uFpuuup(x86emu_t *emu, uintptr_t fnc);
void uFpupuu(x86emu_t *emu, uintptr_t fnc);
void uFppiip(x86emu_t *emu, uintptr_t fnc);
void uFppipp(x86emu_t *emu, uintptr_t fnc);
void uFppuup(x86emu_t *emu, uintptr_t fnc);
void uFppupp(x86emu_t *emu, uintptr_t fnc);
void uFpplip(x86emu_t *emu, uintptr_t fnc);
void uFppLpp(x86emu_t *emu, uintptr_t fnc);
void uFppppp(x86emu_t *emu, uintptr_t fnc);
void UFuiiii(x86emu_t *emu, uintptr_t fnc);
void lFEipiI(x86emu_t *emu, uintptr_t fnc);
void lFipLli(x86emu_t *emu, uintptr_t fnc);
void lFipLlL(x86emu_t *emu, uintptr_t fnc);
void lFpuipC(x86emu_t *emu, uintptr_t fnc);
void lFppiip(x86emu_t *emu, uintptr_t fnc);
void LFEpppp(x86emu_t *emu, uintptr_t fnc);
void LFuiCiu(x86emu_t *emu, uintptr_t fnc);
void LFLpppL(x86emu_t *emu, uintptr_t fnc);
void LFLpppp(x86emu_t *emu, uintptr_t fnc);
void LFpuipp(x86emu_t *emu, uintptr_t fnc);
void LFpuppi(x86emu_t *emu, uintptr_t fnc);
void LFpLppL(x86emu_t *emu, uintptr_t fnc);
void LFpLppp(x86emu_t *emu, uintptr_t fnc);
void LFppLLp(x86emu_t *emu, uintptr_t fnc);
void LFpppii(x86emu_t *emu, uintptr_t fnc);
void LFppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpiii(x86emu_t *emu, uintptr_t fnc);
void pFEpipi(x86emu_t *emu, uintptr_t fnc);
void pFEpipL(x86emu_t *emu, uintptr_t fnc);
void pFEpipp(x86emu_t *emu, uintptr_t fnc);
void pFEpupp(x86emu_t *emu, uintptr_t fnc);
void pFEpUpp(x86emu_t *emu, uintptr_t fnc);
void pFEppii(x86emu_t *emu, uintptr_t fnc);
void pFEppip(x86emu_t *emu, uintptr_t fnc);
void pFEppCC(x86emu_t *emu, uintptr_t fnc);
void pFEppuW(x86emu_t *emu, uintptr_t fnc);
void pFEppuu(x86emu_t *emu, uintptr_t fnc);
void pFEppup(x86emu_t *emu, uintptr_t fnc);
void pFEppLp(x86emu_t *emu, uintptr_t fnc);
void pFEpppi(x86emu_t *emu, uintptr_t fnc);
void pFEpppu(x86emu_t *emu, uintptr_t fnc);
void pFEpppp(x86emu_t *emu, uintptr_t fnc);
void pFiiiii(x86emu_t *emu, uintptr_t fnc);
void pFipipL(x86emu_t *emu, uintptr_t fnc);
void pFipppi(x86emu_t *emu, uintptr_t fnc);
void pFipppu(x86emu_t *emu, uintptr_t fnc);
void pFipppp(x86emu_t *emu, uintptr_t fnc);
void pFuiiiu(x86emu_t *emu, uintptr_t fnc);
void pFuiupp(x86emu_t *emu, uintptr_t fnc);
void pFpiiii(x86emu_t *emu, uintptr_t fnc);
void pFpiiip(x86emu_t *emu, uintptr_t fnc);
void pFpiiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiipi(x86emu_t *emu, uintptr_t fnc);
void pFpiipp(x86emu_t *emu, uintptr_t fnc);
void pFpiCCC(x86emu_t *emu, uintptr_t fnc);
void pFpiuuu(x86emu_t *emu, uintptr_t fnc);
void pFpiLip(x86emu_t *emu, uintptr_t fnc);
void pFpippi(x86emu_t *emu, uintptr_t fnc);
void pFpippp(x86emu_t *emu, uintptr_t fnc);
void pFpIiip(x86emu_t *emu, uintptr_t fnc);
void pFpuiii(x86emu_t *emu, uintptr_t fnc);
void pFpuiip(x86emu_t *emu, uintptr_t fnc);
void pFpuuip(x86emu_t *emu, uintptr_t fnc);
void pFpuuup(x86emu_t *emu, uintptr_t fnc);
void pFpuupp(x86emu_t *emu, uintptr_t fnc);
void pFpuLpp(x86emu_t *emu, uintptr_t fnc);
void pFpuppp(x86emu_t *emu, uintptr_t fnc);
void pFpUdii(x86emu_t *emu, uintptr_t fnc);
void pFpdddd(x86emu_t *emu, uintptr_t fnc);
void pFplppp(x86emu_t *emu, uintptr_t fnc);
void pFpLpip(x86emu_t *emu, uintptr_t fnc);
void pFppiii(x86emu_t *emu, uintptr_t fnc);
void pFppiip(x86emu_t *emu, uintptr_t fnc);
void pFppiup(x86emu_t *emu, uintptr_t fnc);
void pFppipi(x86emu_t *emu, uintptr_t fnc);
void pFppipp(x86emu_t *emu, uintptr_t fnc);
void pFppuui(x86emu_t *emu, uintptr_t fnc);
void pFppuuu(x86emu_t *emu, uintptr_t fnc);
void pFppuup(x86emu_t *emu, uintptr_t fnc);
void pFppddi(x86emu_t *emu, uintptr_t fnc);
void pFppLLi(x86emu_t *emu, uintptr_t fnc);
void pFppLpp(x86emu_t *emu, uintptr_t fnc);
void pFpppii(x86emu_t *emu, uintptr_t fnc);
void pFpppip(x86emu_t *emu, uintptr_t fnc);
void pFpppui(x86emu_t *emu, uintptr_t fnc);
void pFpppuu(x86emu_t *emu, uintptr_t fnc);
void pFpppup(x86emu_t *emu, uintptr_t fnc);
void pFppppi(x86emu_t *emu, uintptr_t fnc);
void pFppppp(x86emu_t *emu, uintptr_t fnc);
void vFEiiipp(x86emu_t *emu, uintptr_t fnc);
void vFEpiLpp(x86emu_t *emu, uintptr_t fnc);
void vFEpippp(x86emu_t *emu, uintptr_t fnc);
void vFEpuipp(x86emu_t *emu, uintptr_t fnc);
void vFEpupup(x86emu_t *emu, uintptr_t fnc);
void vFEpLLpp(x86emu_t *emu, uintptr_t fnc);
void vFEppipV(x86emu_t *emu, uintptr_t fnc);
void vFEppupp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiu(x86emu_t *emu, uintptr_t fnc);
void vFEppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiuil(x86emu_t *emu, uintptr_t fnc);
void vFiiilpi(x86emu_t *emu, uintptr_t fnc);
void vFiiuilp(x86emu_t *emu, uintptr_t fnc);
void vFiffiff(x86emu_t *emu, uintptr_t fnc);
void vFiddidd(x86emu_t *emu, uintptr_t fnc);
void vFilipli(x86emu_t *emu, uintptr_t fnc);
void vFiliplu(x86emu_t *emu, uintptr_t fnc);
void vFillill(x86emu_t *emu, uintptr_t fnc);
void vFipiplp(x86emu_t *emu, uintptr_t fnc);
void vFCCCCff(x86emu_t *emu, uintptr_t fnc);
void vFuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiuii(x86emu_t *emu, uintptr_t fnc);
void vFuiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiuiil(x86emu_t *emu, uintptr_t fnc);
void vFuiuiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuCip(x86emu_t *emu, uintptr_t fnc);
void vFuiuuip(x86emu_t *emu, uintptr_t fnc);
void vFuiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuiupii(x86emu_t *emu, uintptr_t fnc);
void vFuiupiu(x86emu_t *emu, uintptr_t fnc);
void vFuiffff(x86emu_t *emu, uintptr_t fnc);
void vFuidddd(x86emu_t *emu, uintptr_t fnc);
void vFuillll(x86emu_t *emu, uintptr_t fnc);
void vFuiLLLL(x86emu_t *emu, uintptr_t fnc);
void vFuipiup(x86emu_t *emu, uintptr_t fnc);
void vFuCuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuil(x86emu_t *emu, uintptr_t fnc);
void vFuuiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiuCu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuippp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiup(x86emu_t *emu, uintptr_t fnc);
void vFuuuipi(x86emu_t *emu, uintptr_t fnc);
void vFuuuipC(x86emu_t *emu, uintptr_t fnc);
void vFuuuipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuull(x86emu_t *emu, uintptr_t fnc);
void vFuuuppi(x86emu_t *emu, uintptr_t fnc);
void vFuuuppp(x86emu_t *emu, uintptr_t fnc);
void vFuuffff(x86emu_t *emu, uintptr_t fnc);
void vFuudddd(x86emu_t *emu, uintptr_t fnc);
void vFuupiii(x86emu_t *emu, uintptr_t fnc);
void vFuupupp(x86emu_t *emu, uintptr_t fnc);
void vFuuplii(x86emu_t *emu, uintptr_t fnc);
void vFuffiip(x86emu_t *emu, uintptr_t fnc);
void vFufffff(x86emu_t *emu, uintptr_t fnc);
void vFuddiip(x86emu_t *emu, uintptr_t fnc);
void vFullill(x86emu_t *emu, uintptr_t fnc);
void vFulluLC(x86emu_t *emu, uintptr_t fnc);
void vFupiiii(x86emu_t *emu, uintptr_t fnc);
void vFupupip(x86emu_t *emu, uintptr_t fnc);
void vFuppppu(x86emu_t *emu, uintptr_t fnc);
void vFuppppp(x86emu_t *emu, uintptr_t fnc);
void vFffffff(x86emu_t *emu, uintptr_t fnc);
void vFdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiiuuu(x86emu_t *emu, uintptr_t fnc);
void vFpiippi(x86emu_t *emu, uintptr_t fnc);
void vFpiippp(x86emu_t *emu, uintptr_t fnc);
void vFpiUuup(x86emu_t *emu, uintptr_t fnc);
void vFpipiiu(x86emu_t *emu, uintptr_t fnc);
void vFpipipV(x86emu_t *emu, uintptr_t fnc);
void vFpipppi(x86emu_t *emu, uintptr_t fnc);
void vFpipppp(x86emu_t *emu, uintptr_t fnc);
void vFpuiiii(x86emu_t *emu, uintptr_t fnc);
void vFpuiiiu(x86emu_t *emu, uintptr_t fnc);
void vFpuiipp(x86emu_t *emu, uintptr_t fnc);
void vFpuuuiu(x86emu_t *emu, uintptr_t fnc);
void vFpuuppp(x86emu_t *emu, uintptr_t fnc);
void vFpudddd(x86emu_t *emu, uintptr_t fnc);
void vFpupuuu(x86emu_t *emu, uintptr_t fnc);
void vFpupppp(x86emu_t *emu, uintptr_t fnc);
void vFpUiuup(x86emu_t *emu, uintptr_t fnc);
void vFpUiUup(x86emu_t *emu, uintptr_t fnc);
void vFpUipup(x86emu_t *emu, uintptr_t fnc);
void vFpUUiup(x86emu_t *emu, uintptr_t fnc);
void vFpdddii(x86emu_t *emu, uintptr_t fnc);
void vFpddddd(x86emu_t *emu, uintptr_t fnc);
void vFpddddp(x86emu_t *emu, uintptr_t fnc);
void vFppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiip(x86emu_t *emu, uintptr_t fnc);
void vFppiiui(x86emu_t *emu, uintptr_t fnc);
void vFppiiuu(x86emu_t *emu, uintptr_t fnc);
void vFppiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiipp(x86emu_t *emu, uintptr_t fnc);
void vFppilpp(x86emu_t *emu, uintptr_t fnc);
void vFppippi(x86emu_t *emu, uintptr_t fnc);
void vFppippp(x86emu_t *emu, uintptr_t fnc);
void vFppuuuu(x86emu_t *emu, uintptr_t fnc);
void vFppuUUU(x86emu_t *emu, uintptr_t fnc);
void vFppupii(x86emu_t *emu, uintptr_t fnc);
void vFppuppp(x86emu_t *emu, uintptr_t fnc);
void vFppdidd(x86emu_t *emu, uintptr_t fnc);
void vFppdddd(x86emu_t *emu, uintptr_t fnc);
void vFpplppi(x86emu_t *emu, uintptr_t fnc);
void vFpplppp(x86emu_t *emu, uintptr_t fnc);
void vFppLppi(x86emu_t *emu, uintptr_t fnc);
void vFppLppp(x86emu_t *emu, uintptr_t fnc);
void vFpppiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiip(x86emu_t *emu, uintptr_t fnc);
void vFpppiff(x86emu_t *emu, uintptr_t fnc);
void vFpppipu(x86emu_t *emu, uintptr_t fnc);
void vFpppuii(x86emu_t *emu, uintptr_t fnc);
void vFppppii(x86emu_t *emu, uintptr_t fnc);
void vFpppppi(x86emu_t *emu, uintptr_t fnc);
void vFpppppu(x86emu_t *emu, uintptr_t fnc);
void vFpppppL(x86emu_t *emu, uintptr_t fnc);
void vFpppppp(x86emu_t *emu, uintptr_t fnc);
void cFppLppi(x86emu_t *emu, uintptr_t fnc);
void iFEiippi(x86emu_t *emu, uintptr_t fnc);
void iFEiippp(x86emu_t *emu, uintptr_t fnc);
void iFEiLLLL(x86emu_t *emu, uintptr_t fnc);
void iFEipuup(x86emu_t *emu, uintptr_t fnc);
void iFEippLp(x86emu_t *emu, uintptr_t fnc);
void iFEipppi(x86emu_t *emu, uintptr_t fnc);
void iFElpppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpiipV(x86emu_t *emu, uintptr_t fnc);
void iFEpiLpp(x86emu_t *emu, uintptr_t fnc);
void iFEpippi(x86emu_t *emu, uintptr_t fnc);
void iFEpippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuip(x86emu_t *emu, uintptr_t fnc);
void iFEpuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpUPpp(x86emu_t *emu, uintptr_t fnc);
void iFEpLppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppip(x86emu_t *emu, uintptr_t fnc);
void iFEppppp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiiuwp(x86emu_t *emu, uintptr_t fnc);
void iFiuiipi(x86emu_t *emu, uintptr_t fnc);
void iFiuUuUu(x86emu_t *emu, uintptr_t fnc);
void iFipiipi(x86emu_t *emu, uintptr_t fnc);
void iFipipuu(x86emu_t *emu, uintptr_t fnc);
void iFipuIup(x86emu_t *emu, uintptr_t fnc);
void iFipupup(x86emu_t *emu, uintptr_t fnc);
void iFipuppp(x86emu_t *emu, uintptr_t fnc);
void iFipppup(x86emu_t *emu, uintptr_t fnc);
void iFippppp(x86emu_t *emu, uintptr_t fnc);
void iFuppipp(x86emu_t *emu, uintptr_t fnc);
void iFuppppp(x86emu_t *emu, uintptr_t fnc);
void iFdipppL(x86emu_t *emu, uintptr_t fnc);
void iFLpppii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiiuii(x86emu_t *emu, uintptr_t fnc);
void iFpiipip(x86emu_t *emu, uintptr_t fnc);
void iFpiippu(x86emu_t *emu, uintptr_t fnc);
void iFpiippp(x86emu_t *emu, uintptr_t fnc);
void iFpiuuup(x86emu_t *emu, uintptr_t fnc);
void iFpiuupp(x86emu_t *emu, uintptr_t fnc);
void iFpiuppu(x86emu_t *emu, uintptr_t fnc);
void iFpiUUpp(x86emu_t *emu, uintptr_t fnc);
void iFpipipi(x86emu_t *emu, uintptr_t fnc);
void iFpippip(x86emu_t *emu, uintptr_t fnc);
void iFpipppp(x86emu_t *emu, uintptr_t fnc);
void iFpCpipu(x86emu_t *emu, uintptr_t fnc);
void iFpuiiii(x86emu_t *emu, uintptr_t fnc);
void iFpuuupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuLpp(x86emu_t *emu, uintptr_t fnc);
void iFpupipi(x86emu_t *emu, uintptr_t fnc);
void iFpupuui(x86emu_t *emu, uintptr_t fnc);
void iFpUuupp(x86emu_t *emu, uintptr_t fnc);
void iFpUUUip(x86emu_t *emu, uintptr_t fnc);
void iFpUUUUp(x86emu_t *emu, uintptr_t fnc);
void iFpLLppp(x86emu_t *emu, uintptr_t fnc);
void iFppiiii(x86emu_t *emu, uintptr_t fnc);
void iFppiiip(x86emu_t *emu, uintptr_t fnc);
void iFppiiuu(x86emu_t *emu, uintptr_t fnc);
void iFppiipi(x86emu_t *emu, uintptr_t fnc);
void iFppiipp(x86emu_t *emu, uintptr_t fnc);
void iFppipii(x86emu_t *emu, uintptr_t fnc);
void iFppipiL(x86emu_t *emu, uintptr_t fnc);
void iFppipip(x86emu_t *emu, uintptr_t fnc);
void iFppIipp(x86emu_t *emu, uintptr_t fnc);
void iFppIppp(x86emu_t *emu, uintptr_t fnc);
void iFppuiii(x86emu_t *emu, uintptr_t fnc);
void iFppuiiu(x86emu_t *emu, uintptr_t fnc);
void iFppuipp(x86emu_t *emu, uintptr_t fnc);
void iFppuIII(x86emu_t *emu, uintptr_t fnc);
void iFppuupp(x86emu_t *emu, uintptr_t fnc);
void iFppuLpp(x86emu_t *emu, uintptr_t fnc);
void iFppupip(x86emu_t *emu, uintptr_t fnc);
void iFppuppp(x86emu_t *emu, uintptr_t fnc);
void iFppUipp(x86emu_t *emu, uintptr_t fnc);
void iFppUupp(x86emu_t *emu, uintptr_t fnc);
void iFppUUup(x86emu_t *emu, uintptr_t fnc);
void iFppdidd(x86emu_t *emu, uintptr_t fnc);
void iFppLupp(x86emu_t *emu, uintptr_t fnc);
void iFppLpLp(x86emu_t *emu, uintptr_t fnc);
void iFppLppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiuu(x86emu_t *emu, uintptr_t fnc);
void iFpppipi(x86emu_t *emu, uintptr_t fnc);
void iFpppipp(x86emu_t *emu, uintptr_t fnc);
void iFpppuii(x86emu_t *emu, uintptr_t fnc);
void iFpppupu(x86emu_t *emu, uintptr_t fnc);
void iFpppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppii(x86emu_t *emu, uintptr_t fnc);
void iFppppiu(x86emu_t *emu, uintptr_t fnc);
void iFppppip(x86emu_t *emu, uintptr_t fnc);
void iFppppup(x86emu_t *emu, uintptr_t fnc);
void iFpppppi(x86emu_t *emu, uintptr_t fnc);
void iFpppppu(x86emu_t *emu, uintptr_t fnc);
void iFpppppp(x86emu_t *emu, uintptr_t fnc);
void uFEiippp(x86emu_t *emu, uintptr_t fnc);
void uFEiuppp(x86emu_t *emu, uintptr_t fnc);
void uFEpCppp(x86emu_t *emu, uintptr_t fnc);
void uFEpuppp(x86emu_t *emu, uintptr_t fnc);
void uFupuufp(x86emu_t *emu, uintptr_t fnc);
void uFpippup(x86emu_t *emu, uintptr_t fnc);
void uFpWuwCp(x86emu_t *emu, uintptr_t fnc);
void uFpWuipp(x86emu_t *emu, uintptr_t fnc);
void uFpWuuCp(x86emu_t *emu, uintptr_t fnc);
void uFpuippp(x86emu_t *emu, uintptr_t fnc);
void uFppippp(x86emu_t *emu, uintptr_t fnc);
void uFppuuup(x86emu_t *emu, uintptr_t fnc);
void uFppuupu(x86emu_t *emu, uintptr_t fnc);
void uFpppppi(x86emu_t *emu, uintptr_t fnc);
void uFpppppp(x86emu_t *emu, uintptr_t fnc);
void UFpippup(x86emu_t *emu, uintptr_t fnc);
void lFipLipu(x86emu_t *emu, uintptr_t fnc);
void lFipLipp(x86emu_t *emu, uintptr_t fnc);
void lFipLpLL(x86emu_t *emu, uintptr_t fnc);
void LFEupppp(x86emu_t *emu, uintptr_t fnc);
void LFEppppi(x86emu_t *emu, uintptr_t fnc);
void LFpipipi(x86emu_t *emu, uintptr_t fnc);
void LFpLippp(x86emu_t *emu, uintptr_t fnc);
void LFSpLiip(x86emu_t *emu, uintptr_t fnc);
void pFEipppV(x86emu_t *emu, uintptr_t fnc);
void pFEpiupp(x86emu_t *emu, uintptr_t fnc);
void pFEpippp(x86emu_t *emu, uintptr_t fnc);
void pFEpuipp(x86emu_t *emu, uintptr_t fnc);
void pFEpuupp(x86emu_t *emu, uintptr_t fnc);
void pFEpuppp(x86emu_t *emu, uintptr_t fnc);
void pFEpLLiN(x86emu_t *emu, uintptr_t fnc);
void pFEppCWp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuWp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuC(x86emu_t *emu, uintptr_t fnc);
void pFEppuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuup(x86emu_t *emu, uintptr_t fnc);
void pFEppLLp(x86emu_t *emu, uintptr_t fnc);
void pFEpppLp(x86emu_t *emu, uintptr_t fnc);
void pFEppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppppp(x86emu_t *emu, uintptr_t fnc);
void pFiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFiCiiCi(x86emu_t *emu, uintptr_t fnc);
void pFdddddd(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiu(x86emu_t *emu, uintptr_t fnc);
void pFpiiCCC(x86emu_t *emu, uintptr_t fnc);
void pFpiiuuu(x86emu_t *emu, uintptr_t fnc);
void pFpiUUUU(x86emu_t *emu, uintptr_t fnc);
void pFpippip(x86emu_t *emu, uintptr_t fnc);
void pFpipppp(x86emu_t *emu, uintptr_t fnc);
void pFpuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupppp(x86emu_t *emu, uintptr_t fnc);
void pFplpppp(x86emu_t *emu, uintptr_t fnc);
void pFpLiLpp(x86emu_t *emu, uintptr_t fnc);
void pFpLpLLi(x86emu_t *emu, uintptr_t fnc);
void pFppiiii(x86emu_t *emu, uintptr_t fnc);
void pFppiipp(x86emu_t *emu, uintptr_t fnc);
void pFppiCCC(x86emu_t *emu, uintptr_t fnc);
void pFppippi(x86emu_t *emu, uintptr_t fnc);
void pFppippp(x86emu_t *emu, uintptr_t fnc);
void pFpppiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiui(x86emu_t *emu, uintptr_t fnc);
void pFpppupp(x86emu_t *emu, uintptr_t fnc);
void pFppppii(x86emu_t *emu, uintptr_t fnc);
void pFpppppi(x86emu_t *emu, uintptr_t fnc);
void pFpppppu(x86emu_t *emu, uintptr_t fnc);
void pFpppppp(x86emu_t *emu, uintptr_t fnc);
void pFSpiiii(x86emu_t *emu, uintptr_t fnc);
void vFEpipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpuipuV(x86emu_t *emu, uintptr_t fnc);
void vFEppippp(x86emu_t *emu, uintptr_t fnc);
void vFEpppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFiiuilil(x86emu_t *emu, uintptr_t fnc);
void vFiiffffp(x86emu_t *emu, uintptr_t fnc);
void vFiuulipi(x86emu_t *emu, uintptr_t fnc);
void vFiupuuup(x86emu_t *emu, uintptr_t fnc);
void vFilipliu(x86emu_t *emu, uintptr_t fnc);
void vFilulipi(x86emu_t *emu, uintptr_t fnc);
void vFCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuCiuu(x86emu_t *emu, uintptr_t fnc);
void vFuiupiiu(x86emu_t *emu, uintptr_t fnc);
void vFuiupuip(x86emu_t *emu, uintptr_t fnc);
void vFuipiiii(x86emu_t *emu, uintptr_t fnc);
void vFuipffff(x86emu_t *emu, uintptr_t fnc);
void vFuipdddd(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiCiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiCiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuipppp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuii(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuil(x86emu_t *emu, uintptr_t fnc);
void vFuuuiupi(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuuulll(x86emu_t *emu, uintptr_t fnc);
void vFuuuffff(x86emu_t *emu, uintptr_t fnc);
void vFuuudddd(x86emu_t *emu, uintptr_t fnc);
void vFuuffiip(x86emu_t *emu, uintptr_t fnc);
void vFuuddiip(x86emu_t *emu, uintptr_t fnc);
void vFuulluup(x86emu_t *emu, uintptr_t fnc);
void vFuupiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuppppu(x86emu_t *emu, uintptr_t fnc);
void vFuuppppp(x86emu_t *emu, uintptr_t fnc);
void vFuffffff(x86emu_t *emu, uintptr_t fnc);
void vFudddddd(x86emu_t *emu, uintptr_t fnc);
void vFlipuiip(x86emu_t *emu, uintptr_t fnc);
void vFlliiiip(x86emu_t *emu, uintptr_t fnc);
void vFpiiiipp(x86emu_t *emu, uintptr_t fnc);
void vFpiiliip(x86emu_t *emu, uintptr_t fnc);
void vFpiipCpp(x86emu_t *emu, uintptr_t fnc);
void vFpipipii(x86emu_t *emu, uintptr_t fnc);
void vFpipppii(x86emu_t *emu, uintptr_t fnc);
void vFpuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpuuUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpuupppp(x86emu_t *emu, uintptr_t fnc);
void vFpUiUiup(x86emu_t *emu, uintptr_t fnc);
void vFpUUUUuu(x86emu_t *emu, uintptr_t fnc);
void vFpddiidd(x86emu_t *emu, uintptr_t fnc);
void vFpdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpLiLiLp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiip(x86emu_t *emu, uintptr_t fnc);
void vFppiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiipii(x86emu_t *emu, uintptr_t fnc);
void vFppiipuu(x86emu_t *emu, uintptr_t fnc);
void vFppiippp(x86emu_t *emu, uintptr_t fnc);
void vFppilppi(x86emu_t *emu, uintptr_t fnc);
void vFppiLiLp(x86emu_t *emu, uintptr_t fnc);
void vFppipiip(x86emu_t *emu, uintptr_t fnc);
void vFppipipp(x86emu_t *emu, uintptr_t fnc);
void vFppipppp(x86emu_t *emu, uintptr_t fnc);
void vFppddddi(x86emu_t *emu, uintptr_t fnc);
void vFppddpii(x86emu_t *emu, uintptr_t fnc);
void vFppLpppi(x86emu_t *emu, uintptr_t fnc);
void vFppLpppp(x86emu_t *emu, uintptr_t fnc);
void vFpppiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiipi(x86emu_t *emu, uintptr_t fnc);
void vFpppiipp(x86emu_t *emu, uintptr_t fnc);
void vFpppippi(x86emu_t *emu, uintptr_t fnc);
void vFpppuuuu(x86emu_t *emu, uintptr_t fnc);
void vFppppiii(x86emu_t *emu, uintptr_t fnc);
void vFppppiip(x86emu_t *emu, uintptr_t fnc);
void vFppppipi(x86emu_t *emu, uintptr_t fnc);
void vFpppppip(x86emu_t *emu, uintptr_t fnc);
void vFppppppi(x86emu_t *emu, uintptr_t fnc);
void vFppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuiupV(x86emu_t *emu, uintptr_t fnc);
void iFEpupppp(x86emu_t *emu, uintptr_t fnc);
void iFEpUuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpLiipV(x86emu_t *emu, uintptr_t fnc);
void iFEppiuui(x86emu_t *emu, uintptr_t fnc);
void iFEppuppp(x86emu_t *emu, uintptr_t fnc);
void iFEpplppi(x86emu_t *emu, uintptr_t fnc);
void iFEppLpIi(x86emu_t *emu, uintptr_t fnc);
void iFEpppiiu(x86emu_t *emu, uintptr_t fnc);
void iFEpppppp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFippuIup(x86emu_t *emu, uintptr_t fnc);
void iFpiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiiiuwp(x86emu_t *emu, uintptr_t fnc);
void iFpiiuuiu(x86emu_t *emu, uintptr_t fnc);
void iFpiiuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpiuiipp(x86emu_t *emu, uintptr_t fnc);
void iFpiupiii(x86emu_t *emu, uintptr_t fnc);
void iFpiupppp(x86emu_t *emu, uintptr_t fnc);
void iFpipipip(x86emu_t *emu, uintptr_t fnc);
void iFpippupp(x86emu_t *emu, uintptr_t fnc);
void iFpippppp(x86emu_t *emu, uintptr_t fnc);
void iFpIIpppp(x86emu_t *emu, uintptr_t fnc);
void iFpuiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpuiiuii(x86emu_t *emu, uintptr_t fnc);
void iFpuipupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuiuui(x86emu_t *emu, uintptr_t fnc);
void iFpuuuppu(x86emu_t *emu, uintptr_t fnc);
void iFpuupppp(x86emu_t *emu, uintptr_t fnc);
void iFpupuuui(x86emu_t *emu, uintptr_t fnc);
void iFpupuufu(x86emu_t *emu, uintptr_t fnc);
void iFpupuupp(x86emu_t *emu, uintptr_t fnc);
void iFpupupui(x86emu_t *emu, uintptr_t fnc);
void iFpuppppp(x86emu_t *emu, uintptr_t fnc);
void iFpLipipi(x86emu_t *emu, uintptr_t fnc);
void iFppiiuui(x86emu_t *emu, uintptr_t fnc);
void iFppiipii(x86emu_t *emu, uintptr_t fnc);
void iFppiipiL(x86emu_t *emu, uintptr_t fnc);
void iFppiippp(x86emu_t *emu, uintptr_t fnc);
void iFppipiip(x86emu_t *emu, uintptr_t fnc);
void iFppipipi(x86emu_t *emu, uintptr_t fnc);
void iFppipipp(x86emu_t *emu, uintptr_t fnc);
void iFppippip(x86emu_t *emu, uintptr_t fnc);
void iFppipppi(x86emu_t *emu, uintptr_t fnc);
void iFppipppp(x86emu_t *emu, uintptr_t fnc);
void iFppuipiL(x86emu_t *emu, uintptr_t fnc);
void iFppLiipp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiii(x86emu_t *emu, uintptr_t fnc);
void iFpppiiuu(x86emu_t *emu, uintptr_t fnc);
void iFpppiiup(x86emu_t *emu, uintptr_t fnc);
void iFpppiipi(x86emu_t *emu, uintptr_t fnc);
void iFpppiuwu(x86emu_t *emu, uintptr_t fnc);
void iFpppippi(x86emu_t *emu, uintptr_t fnc);
void iFpppippp(x86emu_t *emu, uintptr_t fnc);
void iFpppuiii(x86emu_t *emu, uintptr_t fnc);
void iFpppuppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiii(x86emu_t *emu, uintptr_t fnc);
void iFppppipp(x86emu_t *emu, uintptr_t fnc);
void iFppppdpi(x86emu_t *emu, uintptr_t fnc);
void iFpppppip(x86emu_t *emu, uintptr_t fnc);
void iFpppppup(x86emu_t *emu, uintptr_t fnc);
void iFppppppi(x86emu_t *emu, uintptr_t fnc);
void iFppppppp(x86emu_t *emu, uintptr_t fnc);
void uFEiipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpiippp(x86emu_t *emu, uintptr_t fnc);
void uFEpuuppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppppp(x86emu_t *emu, uintptr_t fnc);
void uFuippppp(x86emu_t *emu, uintptr_t fnc);
void uFppiuppi(x86emu_t *emu, uintptr_t fnc);
void uFppiuppp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuup(x86emu_t *emu, uintptr_t fnc);
void LFEppLppU(x86emu_t *emu, uintptr_t fnc);
void LFEpppppu(x86emu_t *emu, uintptr_t fnc);
void pFEpiiiiu(x86emu_t *emu, uintptr_t fnc);
void pFEpupppp(x86emu_t *emu, uintptr_t fnc);
void pFEpLiiii(x86emu_t *emu, uintptr_t fnc);
void pFEpLiiiI(x86emu_t *emu, uintptr_t fnc);
void pFEppCuup(x86emu_t *emu, uintptr_t fnc);
void pFEppCppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuipp(x86emu_t *emu, uintptr_t fnc);
void pFEppuWWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuup(x86emu_t *emu, uintptr_t fnc);
void pFEppppip(x86emu_t *emu, uintptr_t fnc);
void pFEpppppp(x86emu_t *emu, uintptr_t fnc);
void pFifffppp(x86emu_t *emu, uintptr_t fnc);
void pFuupupup(x86emu_t *emu, uintptr_t fnc);
void pFdiiiIiI(x86emu_t *emu, uintptr_t fnc);
void pFpiiUdii(x86emu_t *emu, uintptr_t fnc);
void pFpipippp(x86emu_t *emu, uintptr_t fnc);
void pFpuppppp(x86emu_t *emu, uintptr_t fnc);
void pFplppppp(x86emu_t *emu, uintptr_t fnc);
void pFpLpLLiL(x86emu_t *emu, uintptr_t fnc);
void pFpLppiip(x86emu_t *emu, uintptr_t fnc);
void pFpLppLLi(x86emu_t *emu, uintptr_t fnc);
void pFppiiipp(x86emu_t *emu, uintptr_t fnc);
void pFppiiCCC(x86emu_t *emu, uintptr_t fnc);
void pFppiippp(x86emu_t *emu, uintptr_t fnc);
void pFppiLLip(x86emu_t *emu, uintptr_t fnc);
void pFppipipp(x86emu_t *emu, uintptr_t fnc);
void pFppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFppuuppp(x86emu_t *emu, uintptr_t fnc);
void pFppLiiip(x86emu_t *emu, uintptr_t fnc);
void pFppLipip(x86emu_t *emu, uintptr_t fnc);
void pFpppccci(x86emu_t *emu, uintptr_t fnc);
void pFpppiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiipp(x86emu_t *emu, uintptr_t fnc);
void pFpppIIIi(x86emu_t *emu, uintptr_t fnc);
void pFpppCCCi(x86emu_t *emu, uintptr_t fnc);
void pFpppuuui(x86emu_t *emu, uintptr_t fnc);
void pFpppuupp(x86emu_t *emu, uintptr_t fnc);
void pFpppUUUi(x86emu_t *emu, uintptr_t fnc);
void pFpppfffi(x86emu_t *emu, uintptr_t fnc);
void pFpppdddi(x86emu_t *emu, uintptr_t fnc);
void pFpppllli(x86emu_t *emu, uintptr_t fnc);
void pFpppLLLi(x86emu_t *emu, uintptr_t fnc);
void pFppppiii(x86emu_t *emu, uintptr_t fnc);
void pFppppuuu(x86emu_t *emu, uintptr_t fnc);
void pFpppppuu(x86emu_t *emu, uintptr_t fnc);
void pFppppppi(x86emu_t *emu, uintptr_t fnc);
void pFppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEiippppV(x86emu_t *emu, uintptr_t fnc);
void vFEiupippp(x86emu_t *emu, uintptr_t fnc);
void vFEippippp(x86emu_t *emu, uintptr_t fnc);
void vFEppipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppippp(x86emu_t *emu, uintptr_t fnc);
void vFEpppuipV(x86emu_t *emu, uintptr_t fnc);
void vFEpppppuu(x86emu_t *emu, uintptr_t fnc);
void vFEppppppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiuuip(x86emu_t *emu, uintptr_t fnc);
void vFiilliilp(x86emu_t *emu, uintptr_t fnc);
void vFiupuiuup(x86emu_t *emu, uintptr_t fnc);
void vFiupuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiipiup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiCuL(x86emu_t *emu, uintptr_t fnc);
void vFuiuiuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiuupp(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFuuuiuCil(x86emu_t *emu, uintptr_t fnc);
void vFuuuipipp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuuufffff(x86emu_t *emu, uintptr_t fnc);
void vFffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpiiiipii(x86emu_t *emu, uintptr_t fnc);
void vFpiiULipp(x86emu_t *emu, uintptr_t fnc);
void vFpiUuupup(x86emu_t *emu, uintptr_t fnc);
void vFpippiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpippiipi(x86emu_t *emu, uintptr_t fnc);
void vFpippippp(x86emu_t *emu, uintptr_t fnc);
void vFpippippV(x86emu_t *emu, uintptr_t fnc);
void vFpuppLLLL(x86emu_t *emu, uintptr_t fnc);
void vFpUiUiupi(x86emu_t *emu, uintptr_t fnc);
void vFpUuuUUUi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiipii(x86emu_t *emu, uintptr_t fnc);
void vFppipipii(x86emu_t *emu, uintptr_t fnc);
void vFppipppui(x86emu_t *emu, uintptr_t fnc);
void vFppippppi(x86emu_t *emu, uintptr_t fnc);
void vFppippppp(x86emu_t *emu, uintptr_t fnc);
void vFppdddddd(x86emu_t *emu, uintptr_t fnc);
void vFpplppppi(x86emu_t *emu, uintptr_t fnc);
void vFpplppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppiipi(x86emu_t *emu, uintptr_t fnc);
void vFpppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEipupupi(x86emu_t *emu, uintptr_t fnc);
void iFEpippppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuiippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuLppp(x86emu_t *emu, uintptr_t fnc);
void iFEpLiLppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppipp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiupiupi(x86emu_t *emu, uintptr_t fnc);
void iFuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpCCWWpWu(x86emu_t *emu, uintptr_t fnc);
void iFpWCuWCuu(x86emu_t *emu, uintptr_t fnc);
void iFpuiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpuipuppp(x86emu_t *emu, uintptr_t fnc);
void iFpuippupp(x86emu_t *emu, uintptr_t fnc);
void iFpuuiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpupppppp(x86emu_t *emu, uintptr_t fnc);
void iFpUuuLpUi(x86emu_t *emu, uintptr_t fnc);
void iFpdiiiIiI(x86emu_t *emu, uintptr_t fnc);
void iFppiiiiiu(x86emu_t *emu, uintptr_t fnc);
void iFppIIIppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipi(x86emu_t *emu, uintptr_t fnc);
void iFpppiippp(x86emu_t *emu, uintptr_t fnc);
void iFpppipipi(x86emu_t *emu, uintptr_t fnc);
void iFpppipppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiipi(x86emu_t *emu, uintptr_t fnc);
void iFppppippp(x86emu_t *emu, uintptr_t fnc);
void iFpppppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppii(x86emu_t *emu, uintptr_t fnc);
void iFpppppppi(x86emu_t *emu, uintptr_t fnc);
void iFpppppppp(x86emu_t *emu, uintptr_t fnc);
void CFuiifpppp(x86emu_t *emu, uintptr_t fnc);
void uFEipipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpiupppp(x86emu_t *emu, uintptr_t fnc);
void uFEppipppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppuppp(x86emu_t *emu, uintptr_t fnc);
void uFEppppppp(x86emu_t *emu, uintptr_t fnc);
void uFuipppppp(x86emu_t *emu, uintptr_t fnc);
void uFuupuuiuf(x86emu_t *emu, uintptr_t fnc);
void uFulpppppp(x86emu_t *emu, uintptr_t fnc);
void uFpupuuuCp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuupp(x86emu_t *emu, uintptr_t fnc);
void uFppuuuppi(x86emu_t *emu, uintptr_t fnc);
void uFppuppppp(x86emu_t *emu, uintptr_t fnc);
void LFEpiupppp(x86emu_t *emu, uintptr_t fnc);
void pFEiplllpp(x86emu_t *emu, uintptr_t fnc);
void pFEpiuCppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuCC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuWW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuwwu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuUUU(x86emu_t *emu, uintptr_t fnc);
void pFEppLiiip(x86emu_t *emu, uintptr_t fnc);
void pFEpppuipV(x86emu_t *emu, uintptr_t fnc);
void pFEpppppiV(x86emu_t *emu, uintptr_t fnc);
void pFEppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppppppp(x86emu_t *emu, uintptr_t fnc);
void pFiipppppp(x86emu_t *emu, uintptr_t fnc);
void pFuiiiuuuu(x86emu_t *emu, uintptr_t fnc);
void pFuupupipp(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void pFpiUdiiUi(x86emu_t *emu, uintptr_t fnc);
void pFpipppppp(x86emu_t *emu, uintptr_t fnc);
void pFpWWiCpup(x86emu_t *emu, uintptr_t fnc);
void pFpuuuupup(x86emu_t *emu, uintptr_t fnc);
void pFpupupuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupLLLpp(x86emu_t *emu, uintptr_t fnc);
void pFpdwwWWui(x86emu_t *emu, uintptr_t fnc);
void pFplpppppp(x86emu_t *emu, uintptr_t fnc);
void pFpLppLLiL(x86emu_t *emu, uintptr_t fnc);
void pFppiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpppppupp(x86emu_t *emu, uintptr_t fnc);
void vFEuuuupppp(x86emu_t *emu, uintptr_t fnc);
void vFEpiiiiipp(x86emu_t *emu, uintptr_t fnc);
void vFEpuuuippp(x86emu_t *emu, uintptr_t fnc);
void vFEppiipppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiippp(x86emu_t *emu, uintptr_t fnc);
void vFEppppippp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiill(x86emu_t *emu, uintptr_t fnc);
void vFiiiiillli(x86emu_t *emu, uintptr_t fnc);
void vFiiilllilp(x86emu_t *emu, uintptr_t fnc);
void vFiupuiuuup(x86emu_t *emu, uintptr_t fnc);
void vFiupuuuuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiCuL(x86emu_t *emu, uintptr_t fnc);
void vFuiupuffup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiC(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiCp(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuupuuiuuf(x86emu_t *emu, uintptr_t fnc);
void vFuffffffff(x86emu_t *emu, uintptr_t fnc);
void vFffCCCCfff(x86emu_t *emu, uintptr_t fnc);
void vFddddddddd(x86emu_t *emu, uintptr_t fnc);
void vFpipiuiipp(x86emu_t *emu, uintptr_t fnc);
void vFpipippppi(x86emu_t *emu, uintptr_t fnc);
void vFpipppiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiipiii(x86emu_t *emu, uintptr_t fnc);
void vFppiipiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiip(x86emu_t *emu, uintptr_t fnc);
void vFppuuiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppddddidd(x86emu_t *emu, uintptr_t fnc);
void vFpplpppppi(x86emu_t *emu, uintptr_t fnc);
void vFpppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppppipiip(x86emu_t *emu, uintptr_t fnc);
void vFpppppippp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiiiiipi(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiippu(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpppipppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppppupp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFiiiipiiip(x86emu_t *emu, uintptr_t fnc);
void iFipiipippi(x86emu_t *emu, uintptr_t fnc);
void iFdddpppppp(x86emu_t *emu, uintptr_t fnc);
void iFpiuuupipu(x86emu_t *emu, uintptr_t fnc);
void iFpipLpiiip(x86emu_t *emu, uintptr_t fnc);
void iFpuiuuipip(x86emu_t *emu, uintptr_t fnc);
void iFpuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void iFpupuupWWu(x86emu_t *emu, uintptr_t fnc);
void iFpdiiiUiUp(x86emu_t *emu, uintptr_t fnc);
void iFppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFppiuiippu(x86emu_t *emu, uintptr_t fnc);
void iFppipiiipi(x86emu_t *emu, uintptr_t fnc);
void iFppuLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFppupppupp(x86emu_t *emu, uintptr_t fnc);
void iFppLpiippp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipip(x86emu_t *emu, uintptr_t fnc);
void iFpppiiuuii(x86emu_t *emu, uintptr_t fnc);
void iFpppiipiiu(x86emu_t *emu, uintptr_t fnc);
void iFpppLLLupp(x86emu_t *emu, uintptr_t fnc);
void iFpppLppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiupp(x86emu_t *emu, uintptr_t fnc);
void iFppppupiii(x86emu_t *emu, uintptr_t fnc);
void iFpppppLupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppppu(x86emu_t *emu, uintptr_t fnc);
void iFppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFEipippppp(x86emu_t *emu, uintptr_t fnc);
void uFEpppufppp(x86emu_t *emu, uintptr_t fnc);
void uFuulpiuiuf(x86emu_t *emu, uintptr_t fnc);
void uFppppppppp(x86emu_t *emu, uintptr_t fnc);
void LFEppppppii(x86emu_t *emu, uintptr_t fnc);
void pFEppiiuuui(x86emu_t *emu, uintptr_t fnc);
void pFEppCuwwWW(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuwwp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuippuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuwwu(x86emu_t *emu, uintptr_t fnc);
void pFEppuupwwC(x86emu_t *emu, uintptr_t fnc);
void pFEpppppiiV(x86emu_t *emu, uintptr_t fnc);
void pFEpppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEpppppppp(x86emu_t *emu, uintptr_t fnc);
void pFpiiiiuuuu(x86emu_t *emu, uintptr_t fnc);
void pFpupuuuuup(x86emu_t *emu, uintptr_t fnc);
void pFppiiiiiip(x86emu_t *emu, uintptr_t fnc);
void pFppiiuuuuu(x86emu_t *emu, uintptr_t fnc);
void pFppipppppp(x86emu_t *emu, uintptr_t fnc);
void pFpppiiiiii(x86emu_t *emu, uintptr_t fnc);
void pFpppiipppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppiipp(x86emu_t *emu, uintptr_t fnc);
void vFEiippppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpippppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppiipppp(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiiu(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiui(x86emu_t *emu, uintptr_t fnc);
void vFiiiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFiiillliiip(x86emu_t *emu, uintptr_t fnc);
void vFippppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiuiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuCCC(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuupuiupuuf(x86emu_t *emu, uintptr_t fnc);
void vFuffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipippppip(x86emu_t *emu, uintptr_t fnc);
void vFpipppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipip(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiip(x86emu_t *emu, uintptr_t fnc);
void vFppiippppii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppuuuuiiuu(x86emu_t *emu, uintptr_t fnc);
void vFppdddddddd(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpiiiiippp(x86emu_t *emu, uintptr_t fnc);
void iFEpuipupppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiiuipp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEppppppipp(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiipiiipip(x86emu_t *emu, uintptr_t fnc);
void iFpippddiidd(x86emu_t *emu, uintptr_t fnc);
void iFpuupiuiipp(x86emu_t *emu, uintptr_t fnc);
void iFpddpippppp(x86emu_t *emu, uintptr_t fnc);
void iFppipiippii(x86emu_t *emu, uintptr_t fnc);
void iFppuuiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFppuuiiuupi(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipipi(x86emu_t *emu, uintptr_t fnc);
void iFpppLLipppp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiuuii(x86emu_t *emu, uintptr_t fnc);
void iFpppppppipi(x86emu_t *emu, uintptr_t fnc);
void uFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEiippppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpiiiiiipp(x86emu_t *emu, uintptr_t fnc);
void pFEpippppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCCuuwwC(x86emu_t *emu, uintptr_t fnc);
void pFEppCuwwWWu(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuuCup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWWCuu(x86emu_t *emu, uintptr_t fnc);
void pFpupLLLLLpp(x86emu_t *emu, uintptr_t fnc);
void pFplllllllll(x86emu_t *emu, uintptr_t fnc);
void pFppuiipuuii(x86emu_t *emu, uintptr_t fnc);
void pFppuuLLuppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpiiiupupup(x86emu_t *emu, uintptr_t fnc);
void vFiiiiillliip(x86emu_t *emu, uintptr_t fnc);
void vFiiiiilllilp(x86emu_t *emu, uintptr_t fnc);
void vFiippppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuiiiillliip(x86emu_t *emu, uintptr_t fnc);
void vFuiuiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuupupppppp(x86emu_t *emu, uintptr_t fnc);
void vFuuffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuufffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuuddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFuffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuLuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFLufffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipipiipiii(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFpupiiuPuPuP(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiipiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddi(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppuiiii(x86emu_t *emu, uintptr_t fnc);
void vFppipppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuipuppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpuuiiuippu(x86emu_t *emu, uintptr_t fnc);
void iFEpuuuuuiipp(x86emu_t *emu, uintptr_t fnc);
void iFEpppipppppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppiiiiuu(x86emu_t *emu, uintptr_t fnc);
void iFiiiiiiiiiip(x86emu_t *emu, uintptr_t fnc);
void iFpiippiiipip(x86emu_t *emu, uintptr_t fnc);
void iFppippipppip(x86emu_t *emu, uintptr_t fnc);
void iFppuppLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFppppiiuuiiu(x86emu_t *emu, uintptr_t fnc);
void uFEpiiupppiuV(x86emu_t *emu, uintptr_t fnc);
void uFEpiippppiup(x86emu_t *emu, uintptr_t fnc);
void uFEppppppippp(x86emu_t *emu, uintptr_t fnc);
void uFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEpipppppppi(x86emu_t *emu, uintptr_t fnc);
void pFEppiiLpppip(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCuuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuiipuuii(x86emu_t *emu, uintptr_t fnc);
void pFEppuuwwWWww(x86emu_t *emu, uintptr_t fnc);
void pFpppppppiipp(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiuLC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiuuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiiui(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiuip(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiipii(x86emu_t *emu, uintptr_t fnc);
void vFpippppiiiipi(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddii(x86emu_t *emu, uintptr_t fnc);
void vFppiiuuuiupup(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFEpppippppppp(x86emu_t *emu, uintptr_t fnc);
void iFEppppiiiiuui(x86emu_t *emu, uintptr_t fnc);
void iFpipllipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpipppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppiiipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppllipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void lFpLpppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppiiuuuipii(x86emu_t *emu, uintptr_t fnc);
void pFEppCuWCCuuCW(x86emu_t *emu, uintptr_t fnc);
void pFEppuwwWWuCuu(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuwwwwWW(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuWWWCCi(x86emu_t *emu, uintptr_t fnc);
void pFEppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFWWiCCCCiipup(x86emu_t *emu, uintptr_t fnc);
void pFppiiuuuiupup(x86emu_t *emu, uintptr_t fnc);
void pFppippLLLiLpp(x86emu_t *emu, uintptr_t fnc);
void pFppuuppppuppp(x86emu_t *emu, uintptr_t fnc);
void pFpppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFEpppppppiippp(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiiiiiuup(x86emu_t *emu, uintptr_t fnc);
void vFuuuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFuffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFuLuuuuuuuuuuu(x86emu_t *emu, uintptr_t fnc);
void vFpipppiiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpippppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpuppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFddddpppddpppp(x86emu_t *emu, uintptr_t fnc);
void iFpippuuuiipppp(x86emu_t *emu, uintptr_t fnc);
void iFpippppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpupiiiipppppp(x86emu_t *emu, uintptr_t fnc);
void iFpuppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFppppppLLLLupp(x86emu_t *emu, uintptr_t fnc);
void iFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFippuuuulllipp(x86emu_t *emu, uintptr_t fnc);
void uFpppppuupppppp(x86emu_t *emu, uintptr_t fnc);
void pFppLppppiiLpip(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFuffiiffiiffiip(x86emu_t *emu, uintptr_t fnc);
void vFuddiiddiiddiip(x86emu_t *emu, uintptr_t fnc);
void vFppiipppiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpupppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFppupppLLLLpupp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuWWwwCCup(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuWWWWWWWW(x86emu_t *emu, uintptr_t fnc);
void pFpuupuupwwwwWWC(x86emu_t *emu, uintptr_t fnc);
void vFuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fnc);
void vFuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFfffffffffffffff(x86emu_t *emu, uintptr_t fnc);
void vFppipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpppippppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppCuuwwWWWWuup(x86emu_t *emu, uintptr_t fnc);
void pFpuiippppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppipipipipipipip(x86emu_t *emu, uintptr_t fnc);
void vFuuuiiiiiuiiiiilll(x86emu_t *emu, uintptr_t fnc);
void vFuuuuiiiiuuiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFppiiiiddddiiiiiuu(x86emu_t *emu, uintptr_t fnc);
void vFpppuppiipppuUUUpi(x86emu_t *emu, uintptr_t fnc);
void iFppipipppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppippppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFppippipipipipipip(x86emu_t *emu, uintptr_t fnc);
void vFppuiiiiipuiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void vFpppipppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void LFpppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuWWWWWWwwCCCuu(x86emu_t *emu, uintptr_t fnc);
void pFippppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void vFpiiiiiiiiiiiiiiiiii(x86emu_t *emu, uintptr_t fnc);
void iFpppippppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFEppuuuuuwwuuuuUUUup(x86emu_t *emu, uintptr_t fnc);
void pFiiiippppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void pFpippppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);
void uFippuuuuiiiiuuiiiiiiiipp(x86emu_t *emu, uintptr_t fnc);
void iFpppppppppppppppppppppppppppppppppp(x86emu_t *emu, uintptr_t fnc);


void IFpi(x86emu_t *emu, uintptr_t fnc);
void iFipV(x86emu_t *emu, uintptr_t fnc);
void iFiipV(x86emu_t *emu, uintptr_t fnc);
void iFppiiiip(x86emu_t *emu, uintptr_t fnc);
# 2461 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void iFiiiN(x86emu_t *emu, uintptr_t fnc);



void DFD(x86emu_t *emu, uintptr_t fnc);
void iFED(x86emu_t *emu, uintptr_t fnc);
void IFED(x86emu_t *emu, uintptr_t fnc);
void DFED(x86emu_t *emu, uintptr_t fnc);
void DFDD(x86emu_t *emu, uintptr_t fnc);
void DFDp(x86emu_t *emu, uintptr_t fnc);
void DFppi(x86emu_t *emu, uintptr_t fnc);
void DFppp(x86emu_t *emu, uintptr_t fnc);
void iFDipppL(x86emu_t *emu, uintptr_t fnc);
void vFppippDDC(x86emu_t *emu, uintptr_t fnc);
# 2490 "/home/ssd/pico/code/box86/src/wrapped/generated/wrapper.h"
void iFEvpp(x86emu_t *emu, uintptr_t fnc);
void iFEvpV(x86emu_t *emu, uintptr_t fnc);
void UFsvvs(x86emu_t *emu, uintptr_t fnc);
void iFEpvpp(x86emu_t *emu, uintptr_t fnc);
void iFEpvpV(x86emu_t *emu, uintptr_t fnc);
void pFpsvvvvs(x86emu_t *emu, uintptr_t fnc);


void iFpvpV(x86emu_t *emu, uintptr_t fnc);
# 13 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/bridge.h" 1




typedef struct x86emu_s x86emu_t;
typedef struct bridge_s bridge_t;
typedef struct box86context_s box86context_t;
typedef void (*wrapper_t)(x86emu_t* emu, uintptr_t fnc);

bridge_t *NewBridge();
void FreeBridge(bridge_t** bridge);

uintptr_t AddBridge(bridge_t* bridge, wrapper_t w, void* fnc, int N, const char* name);
uintptr_t CheckBridged(bridge_t* bridge, void* fnc);
int IsBridge(void* func);
uintptr_t AddCheckBridge(bridge_t* bridge, wrapper_t w, void* fnc, int N, const char* name);
uintptr_t AddAutomaticBridge(x86emu_t* emu, bridge_t* bridge, wrapper_t w, void* fnc, int N, const char* name);
void* GetNativeFnc(uintptr_t fnc);
void* GetNativeFncOrFnc(uintptr_t fnc);

int hasAlternate(void* addr);
void* getAlternate(void* addr);
void addAlternate(void* addr, void* alt);
void cleanAlternate();





void init_bridge_helper();
void fini_bridge_helper();
# 14 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/callback.h" 1





typedef struct x86emu_s x86emu_t;

uint32_t RunFunction(uintptr_t fnc, int nargs, ...);

uint32_t RunFunctionFmt(uintptr_t fnc, const char* fmt, ...);

uint64_t RunFunction64(uintptr_t fnc, int nargs, ...);

uint64_t RunFunctionFmt64(uintptr_t fnc, const char* fmt, ...);

uint32_t RunFunctionWithEmu(x86emu_t *emu, int QuitOnLongJump, uintptr_t fnc, int nargs, ...);

uint32_t RunSafeFunction(uintptr_t fnc, int nargs, ...);
# 15 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/librarian.h" 1




typedef struct lib_s lib_t;
typedef struct bridge_s bridge_t;
typedef struct library_s library_t;
typedef struct kh_mapsymbols_s kh_mapsymbols_t;
typedef struct dlprivate_s dlprivate_t;
typedef struct box86context_s box86context_t;
typedef struct x86emu_s x86emu_t;
typedef struct elfheader_s elfheader_t;
typedef struct needed_libs_s needed_libs_t;
typedef struct kh_mapoffsets_s kh_mapoffsets_t;
typedef char* cstr_t;

lib_t *NewLibrarian(box86context_t* context, int ownlibs);
void FreeLibrarian(lib_t **maplib, x86emu_t* emu);
dlprivate_t *NewDLPrivate(void);
void FreeDLPrivate(dlprivate_t **lib);

box86context_t* GetLibrarianContext(lib_t* maplib);
kh_mapsymbols_t* GetGlobalData(lib_t* maplib);
int AddNeededLib(lib_t* maplib, int local, int bindnow, needed_libs_t* needed, elfheader_t* verneeded, box86context_t* box86, x86emu_t* emu);
void RemoveNeededLib(lib_t* maplib, int local, needed_libs_t* needed, box86context_t* box86, x86emu_t* emu);
library_t* GetLibMapLib(lib_t* maplib, const char* name);
library_t* GetLibInternal(const char* name);
void promoteLocalLibGlobal(library_t* lib);
int isLibLocal(library_t* lib);
uintptr_t FindGlobalSymbol(lib_t *maplib, const char* name, int version, const char* vername);
int GetNoSelfSymbolStartEnd(lib_t *maplib, const char* name, uintptr_t* start, uintptr_t* end, elfheader_t* self, size_t size, int version, const char* vername, const char* globdefver, const char* weakdefver);
int GetGlobalSymbolStartEnd(lib_t *maplib, const char* name, uintptr_t* start, uintptr_t* end, elfheader_t *self, int version, const char* vername, const char* globdefver, const char* weakdefver);
int GetGlobalWeakSymbolStartEnd(lib_t *maplib, const char* name, uintptr_t* start, uintptr_t* end, elfheader_t *self, int version, const char* vername, const char* globdefver, const char* weakdefver);
int GetGlobalNoWeakSymbolStartEnd(lib_t *maplib, const char* name, uintptr_t* start, uintptr_t* end, int version, const char* vername, const char* defver);
int GetLocalSymbolStartEnd(lib_t *maplib, const char* name, uintptr_t* start, uintptr_t* end, elfheader_t *self, int version, const char* vername, const char* globdefver, const char* weakdefver);
elfheader_t* GetGlobalSymbolElf(lib_t *maplib, const char* name, int version, const char* vername);
int IsGlobalNoWeakSymbolInNative(lib_t *maplib, const char* name, int version, const char* vername, const char* defver);

void MapLibRemoveLib(lib_t* maplib, library_t* lib);
void MapLibPrependLib(lib_t* maplib, library_t* lib, library_t* ref);

const char* GetMaplibDefaultVersion(lib_t *maplib, lib_t *local_maplib, int isweak, const char* symname);

const char* FindSymbolName(lib_t *maplib, void* p, void** start, uint32_t* sz, const char** libname, void** base, library_t** lib);

void AddOffsetSymbol(lib_t *maplib, void* offs, const char* name);
const char* GetNameOffset(lib_t *maplib, void* offs);
# 16 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/librarian/library_private.h" 1



# 1 "/usr/include/elf.h" 1 3 4
# 27 "/usr/include/elf.h" 3 4

# 27 "/usr/include/elf.h" 3 4
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;


typedef uint32_t Elf32_Word;
typedef int32_t Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef int32_t Elf64_Sword;


typedef uint64_t Elf32_Xword;
typedef int64_t Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef int64_t Elf64_Sxword;


typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;


typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;


typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;


typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;






typedef struct
{
  unsigned char e_ident[(16)];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct
{
  unsigned char e_ident[(16)];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;
# 382 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct
{
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 490 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word ch_type;
  Elf32_Word ch_size;
  Elf32_Word ch_addralign;
} Elf32_Chdr;

typedef struct
{
  Elf64_Word ch_type;
  Elf64_Word ch_reserved;
  Elf64_Xword ch_size;
  Elf64_Xword ch_addralign;
} Elf64_Chdr;
# 517 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Section st_shndx;
} Elf32_Sym;

typedef struct
{
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Section st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct
{
  Elf32_Half si_boundto;
  Elf32_Half si_flags;
} Elf32_Syminfo;

typedef struct
{
  Elf64_Half si_boundto;
  Elf64_Half si_flags;
} Elf64_Syminfo;
# 632 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;






typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;



typedef struct
{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct
{
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;
# 677 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct
{
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 833 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Sword d_tag;
  union
    {
      Elf32_Word d_val;
      Elf32_Addr d_ptr;
    } d_un;
} Elf32_Dyn;

typedef struct
{
  Elf64_Sxword d_tag;
  union
    {
      Elf64_Xword d_val;
      Elf64_Addr d_ptr;
    } d_un;
} Elf64_Dyn;
# 1015 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Half vd_version;
  Elf32_Half vd_flags;
  Elf32_Half vd_ndx;
  Elf32_Half vd_cnt;
  Elf32_Word vd_hash;
  Elf32_Word vd_aux;
  Elf32_Word vd_next;

} Elf32_Verdef;

typedef struct
{
  Elf64_Half vd_version;
  Elf64_Half vd_flags;
  Elf64_Half vd_ndx;
  Elf64_Half vd_cnt;
  Elf64_Word vd_hash;
  Elf64_Word vd_aux;
  Elf64_Word vd_next;

} Elf64_Verdef;
# 1057 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word vda_name;
  Elf32_Word vda_next;

} Elf32_Verdaux;

typedef struct
{
  Elf64_Word vda_name;
  Elf64_Word vda_next;

} Elf64_Verdaux;




typedef struct
{
  Elf32_Half vn_version;
  Elf32_Half vn_cnt;
  Elf32_Word vn_file;

  Elf32_Word vn_aux;
  Elf32_Word vn_next;

} Elf32_Verneed;

typedef struct
{
  Elf64_Half vn_version;
  Elf64_Half vn_cnt;
  Elf64_Word vn_file;

  Elf64_Word vn_aux;
  Elf64_Word vn_next;

} Elf64_Verneed;
# 1104 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word vna_hash;
  Elf32_Half vna_flags;
  Elf32_Half vna_other;
  Elf32_Word vna_name;
  Elf32_Word vna_next;

} Elf32_Vernaux;

typedef struct
{
  Elf64_Word vna_hash;
  Elf64_Half vna_flags;
  Elf64_Half vna_other;
  Elf64_Word vna_name;
  Elf64_Word vna_next;

} Elf64_Vernaux;
# 1138 "/usr/include/elf.h" 3 4
typedef struct
{
  uint32_t a_type;
  union
    {
      uint32_t a_val;



    } a_un;
} Elf32_auxv_t;

typedef struct
{
  uint64_t a_type;
  union
    {
      uint64_t a_val;



    } a_un;
} Elf64_auxv_t;
# 1239 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;

typedef struct
{
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 1383 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Xword m_value;
  Elf32_Word m_info;
  Elf32_Word m_poffset;
  Elf32_Half m_repeat;
  Elf32_Half m_stride;
} Elf32_Move;

typedef struct
{
  Elf64_Xword m_value;
  Elf64_Xword m_info;
  Elf64_Xword m_poffset;
  Elf64_Half m_repeat;
  Elf64_Half m_stride;
} Elf64_Move;
# 1773 "/usr/include/elf.h" 3 4
typedef union
{
  struct
    {
      Elf32_Word gt_current_g_value;
      Elf32_Word gt_unused;
    } gt_header;
  struct
    {
      Elf32_Word gt_g_value;
      Elf32_Word gt_bytes;
    } gt_entry;
} Elf32_gptab;



typedef struct
{
  Elf32_Word ri_gprmask;
  Elf32_Word ri_cprmask[4];
  Elf32_Sword ri_gp_value;
} Elf32_RegInfo;



typedef struct
{
  unsigned char kind;

  unsigned char size;
  Elf32_Section section;

  Elf32_Word info;
} Elf_Options;
# 1849 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word hwp_flags1;
  Elf32_Word hwp_flags2;
} Elf_Options_Hw;
# 2017 "/usr/include/elf.h" 3 4
typedef struct
{
  Elf32_Word l_name;
  Elf32_Word l_time_stamp;
  Elf32_Word l_checksum;
  Elf32_Word l_version;
  Elf32_Word l_flags;
} Elf32_Lib;

typedef struct
{
  Elf64_Word l_name;
  Elf64_Word l_time_stamp;
  Elf64_Word l_checksum;
  Elf64_Word l_version;
  Elf64_Word l_flags;
} Elf64_Lib;
# 2048 "/usr/include/elf.h" 3 4
typedef Elf32_Addr Elf32_Conflict;

typedef struct
{

  Elf32_Half version;

  unsigned char isa_level;

  unsigned char isa_rev;

  unsigned char gpr_size;

  unsigned char cpr1_size;

  unsigned char cpr2_size;

  unsigned char fp_abi;

  Elf32_Word isa_ext;

  Elf32_Word ases;

  Elf32_Word flags1;
  Elf32_Word flags2;
} Elf_MIPS_ABIFlags_v0;
# 2124 "/usr/include/elf.h" 3 4
enum
{

  Val_GNU_MIPS_ABI_FP_ANY = 0,

  Val_GNU_MIPS_ABI_FP_DOUBLE = 1,

  Val_GNU_MIPS_ABI_FP_SINGLE = 2,

  Val_GNU_MIPS_ABI_FP_SOFT = 3,

  Val_GNU_MIPS_ABI_FP_OLD_64 = 4,

  Val_GNU_MIPS_ABI_FP_XX = 5,

  Val_GNU_MIPS_ABI_FP_64 = 6,

  Val_GNU_MIPS_ABI_FP_64A = 7,

  Val_GNU_MIPS_ABI_FP_MAX = 7
};
# 5 "/home/ssd/pico/code/box86/src/librarian/library_private.h" 2

# 1 "/home/ssd/pico/code/box86/src/include/custommem.h" 1


# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 350 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__ , __leaf__));






extern int close (int __fd);




extern void closefrom (int __lowfd) __attribute__ ((__nothrow__ , __leaf__));







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pipe2 (int __pipedes[2], int __flags) __attribute__ ((__nothrow__ , __leaf__)) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__ , __leaf__));







extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));




extern int dup3 (int __fd, int __fd2, int __flags) __attribute__ ((__nothrow__ , __leaf__));



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 1)));


extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__ , __leaf__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__ , __leaf__)) ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__ , __leaf__)) ;






extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t _Fork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/bits/getopt_posix.h" 3 4
# 1 "/usr/include/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/bits/getopt_posix.h" 3 4

# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) __attribute__ ((__nothrow__ , __leaf__));






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1038 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1059 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1124 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1142 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)))
    __attribute__ ((__access__ (__read_only__, 1, 3)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1208 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) __attribute__ ((__nothrow__ , __leaf__));
# 1218 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/linux/close_range.h" 1 3 4
# 39 "/usr/include/bits/unistd_ext.h" 2 3 4
# 1219 "/usr/include/unistd.h" 2 3 4


# 4 "/home/ssd/pico/code/box86/src/include/custommem.h" 2




# 7 "/home/ssd/pico/code/box86/src/include/custommem.h"
typedef struct box86context_s box86context_t;

void* customMalloc(size_t size);
void* customCalloc(size_t n, size_t size);
void* customRealloc(void* p, size_t size);
void customFree(void* p);
# 50 "/home/ssd/pico/code/box86/src/include/custommem.h"
void updateProtection(uintptr_t addr, size_t size, uint32_t prot);
void setProtection(uintptr_t addr, size_t size, uint32_t prot);
void setProtection_mmap(uintptr_t addr, size_t size, uint32_t prot);
void setProtection_elf(uintptr_t addr, size_t size, uint32_t prot);
void freeProtection(uintptr_t addr, size_t size);
void refreshProtection(uintptr_t addr);
uint32_t getProtection(uintptr_t addr);
int getMmapped(uintptr_t addr);
void loadProtectionFromMap();





void* find32bitBlock(size_t size);
void* findBlockNearHint(void* hint, size_t size, uintptr_t mask);
void* find32bitBlockElf(size_t size, int mainbin, uintptr_t mask);
int isBlockFree(void* hint, size_t size);


int unlockCustommemMutex();

void relockCustommemMutex(int locks);

void init_custommem_helper(box86context_t* ctx);
void fini_custommem_helper(box86context_t* ctx);
# 7 "/home/ssd/pico/code/box86/src/librarian/library_private.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/khash.h" 1
# 130 "/home/ssd/pico/code/box86/src/include/khash.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 1 3 4
# 203 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 38 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 2 3 4
# 81 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/bits/pthread_stack_min-dynamic.h" 1 3 4
# 23 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4


# 24 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4
extern long int __sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));

# 82 "/usr/include/bits/local_lim.h" 2 3 4
# 162 "/usr/include/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/bits/xopen_lim.h" 2 3 4
# 204 "/usr/include/limits.h" 2 3 4
# 204 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/11/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/11/include/limits.h" 2 3 4
# 131 "/home/ssd/pico/code/box86/src/include/khash.h" 2





# 135 "/home/ssd/pico/code/box86/src/include/khash.h"
typedef unsigned int khint32_t;







typedef unsigned long long khint64_t;
# 152 "/home/ssd/pico/code/box86/src/include/khash.h"
typedef khint32_t khint_t;
typedef khint_t khiter_t;
# 182 "/home/ssd/pico/code/box86/src/include/khash.h"
static const double __ac_HASH_UPPER = 0.77;
# 385 "/home/ssd/pico/code/box86/src/include/khash.h"
static inline khint_t __ac_X31_hash_string(const char *s)
{
 khint_t h = (khint_t)*s;
 if (h) for (++s ; *s; ++s) h = (h << 5) - h + (khint_t)*s;
 return h;
}
# 402 "/home/ssd/pico/code/box86/src/include/khash.h"
static inline khint_t __ac_Wang_hash(khint_t key)
{
    key += ~(key << 15);
    key ^= (key >> 10);
    key += (key << 3);
    key ^= (key >> 6);
    key += ~(key << 11);
    key ^= (key >> 16);
    return key;
}
# 650 "/home/ssd/pico/code/box86/src/include/khash.h"
typedef const char *kh_cstr_t;
# 8 "/home/ssd/pico/code/box86/src/librarian/library_private.h" 2

# 1 "/home/ssd/pico/code/box86/src/include/box86context.h" 1



# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 76 "/usr/include/bits/sched.h" 3 4
# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4

# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/bits/sched.h" 2 3 4





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int getcpu (unsigned int *, unsigned int *) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));



# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 130 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 73 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 26 "/usr/include/bits/timex.h" 3 4
struct timex
{
# 58 "/usr/include/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};
# 74 "/usr/include/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));
# 90 "/usr/include/bits/time.h" 3 4

# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 387 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 413 "/usr/include/time.h" 3 4
extern int getdate_err;
# 422 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 436 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4
# 35 "/usr/include/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4





enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);







extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));



extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));

extern int pthread_yield (void) __asm__ ("" "sched_yield") __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")))
                                                      ;







extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));
# 732 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1)));
# 745 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  __attribute__ ((__regparm__ (1)));



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__regparm__ (1))) __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) __asm__ ("" "pthread_mutex_consistent") __attribute__ ((__nothrow__ , __leaf__))
                                __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")))
                                                                         ;
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) __asm__ ("" "pthread_mutexattr_getrobust") __attribute__ ((__nothrow__ , __leaf__))

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")))
                                                                               ;






extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) __asm__ ("" "pthread_mutexattr_setrobust") __attribute__ ((__nothrow__ , __leaf__))

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")))
                                                                               ;
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 5 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/pathcoll.h" 1







# 7 "/home/ssd/pico/code/box86/src/include/pathcoll.h"
typedef struct path_collection_s
{
    int size;
    int cap;
    char** paths;
} path_collection_t;

void ParseList(const char* List, path_collection_t* collection, int folder);
void FreeCollection(path_collection_t* collection);
void CopyCollection(path_collection_t* to, path_collection_t* from);
void AddPath(const char* path, path_collection_t* collection, int folder);
void PrependPath(const char* path, path_collection_t* collection, int folder);
void AppendList(path_collection_t* collection, const char* List, int folder);
void PrependList(path_collection_t* collection, const char* List, int folder);
int FindInCollection(const char* path, path_collection_t* collection);
# 6 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 1 "/home/ssd/pico/code/box86/src/include/dictionnary.h" 1




typedef void dic_t;

dic_t *NewDictionnary();
void FreeDictionnary(dic_t **dic);

const char* AddDictionnary(dic_t* dic, const char* s);
int ExistDictionnary(dic_t* dic, const char* s);
# 7 "/home/ssd/pico/code/box86/src/include/box86context.h" 2
# 15 "/home/ssd/pico/code/box86/src/include/box86context.h"
typedef struct elfheader_s elfheader_t;
typedef struct cleanup_s cleanup_t;
typedef struct x86emu_s x86emu_t;
typedef struct zydis_s zydis_t;
typedef struct lib_s lib_t;
typedef struct bridge_s bridge_t;
typedef struct dlprivate_s dlprivate_t;
typedef struct kh_symbolmap_s kh_symbolmap_t;
typedef struct kh_defaultversion_s kh_defaultversion_t;
typedef struct kh_mapsymbols_s kh_mapsymbols_t;
typedef struct library_s library_t;
typedef struct linkmap_s linkmap_t;
typedef struct kh_fts_s kh_fts_t;
typedef struct kh_threadstack_s kh_threadstack_t;
typedef struct zydis_dec_s zydis_dec_t;
typedef struct atfork_fnc_s {
    uintptr_t prepare;
    uintptr_t parent;
    uintptr_t child;
    void* handle;
} atfork_fnc_t;
# 47 "/home/ssd/pico/code/box86/src/include/box86context.h"
typedef void* (*procaddress_t)(const char* name);
typedef void* (*vkprocaddress_t)(void* instance, const char* name);



typedef struct tlsdatasize_s {
    int tlssize;
    int n_elfs;
    void* data;
    void* ptr;
} tlsdatasize_t;

void free_tlsdatasize(void* p);

typedef struct needed_libs_s {
    int cap;
    int size;
    char** names;
    library_t** libs;
    int nb_done;
} needed_libs_t;

void free_neededlib(needed_libs_t* needed);
needed_libs_t* new_neededlib(int n);
needed_libs_t* copy_neededlib(needed_libs_t* needed);
void add1_neededlib(needed_libs_t* needed);
void add1lib_neededlib(needed_libs_t* needed, library_t* lib, const char* name);

typedef struct base_segment_s {
    uintptr_t base;
    uint32_t limit;
    int present;
    pthread_key_t key;
} base_segment_t;

typedef struct box86context_s {
    path_collection_t box86_path;
    path_collection_t box86_ld_lib;

    path_collection_t box86_emulated_libs;

    int x86trace;
    int trace_tid;

    uint32_t sel_serial;

    zydis_t *zydis;
    void* box86lib;

    int argc;
    char** argv;

    int envc;
    char** envv;

    int orig_argc;
    char** orig_argv;

    char* fullpath;
    char* box86path;
    char* box64path;
    char* bashpath;

    uint32_t stacksz;
    uint32_t stackalign;
    void* stack;

    elfheader_t **elfs;
    int elfcap;
    int elfsize;

    needed_libs_t *neededlibs;
    needed_libs_t *preload;

    uintptr_t ep;

    void* brk;
    int brksz;

    lib_t *maplib;
    lib_t *local_maplib;
    dic_t *versym;
    kh_mapsymbols_t *globdata;

    kh_threadstack_t *stacksizes;
    bridge_t *system;
    uintptr_t exit_bridge;
    uintptr_t vsyscall;
    dlprivate_t *dlprivate;
    kh_symbolmap_t *alwrappers;
    kh_symbolmap_t *almymap;
    kh_symbolmap_t *vkwrappers;
    kh_symbolmap_t *vkmymap;
    vkprocaddress_t vkprocaddress;


    pthread_mutex_t mutex_once;
    pthread_mutex_t mutex_once2;
    pthread_mutex_t mutex_trace;
    pthread_mutex_t mutex_tls;
    pthread_mutex_t mutex_thread;
    pthread_mutex_t mutex_bridge;
    pthread_mutex_t mutex_lock;
# 173 "/home/ssd/pico/code/box86/src/include/box86context.h"
    library_t *libclib;
    library_t *sdl1mixerlib;
    library_t *sdl2lib;
    library_t *sdl2mixerlib;

    linkmap_t *linkmap;

    void* sdl1allocrw;
    void* sdl1freerw;
    void* sdl2allocrw;
    void* sdl2freerw;

    int deferredInit;
    elfheader_t **deferredInitList;
    int deferredInitSz;
    int deferredInitCap;

    pthread_key_t tlskey;
    void* tlsdata;
    int32_t tlssize;
    base_segment_t segtls[3+16];

    uintptr_t *auxval_start;

    cleanup_t *cleanups;
    int clean_sz;
    int clean_cap;



    zydis_dec_t *dec;

    int forked;

    atfork_fnc_t *atforks;
    int atfork_sz;
    int atfork_cap;

    uint8_t canary[4];

    uintptr_t signals[64 +1];
    uintptr_t restorer[64 +1];
    int onstack[64 +1];
    int is_sigaction[64 +1];
    x86emu_t *emu_sig;
    int no_sigsegv;
    int no_sigill;
    void* stack_clone;
    int stack_clone_used;


    char* *log_call;
    char* *log_ret;
    int current_line;
} box86context_t;
# 240 "/home/ssd/pico/code/box86/src/include/box86context.h"
extern box86context_t *my_context;

box86context_t *NewBox86Context(int argc);
void FreeBox86Context(box86context_t** context);


void freeCycleLog(box86context_t* ctx);
void initCycleLog(box86context_t* context);
void print_cycle_log(int loglevel);


int AddElfHeader(box86context_t* ctx, elfheader_t* head);

void RemoveElfHeader(box86context_t* ctx, elfheader_t* head);


int AddTLSPartition(box86context_t* context, int tlssize);


void thread_set_emu(x86emu_t* emu);
x86emu_t* thread_get_emu();


int unlockMutex();

void relockMutex(int locks);
# 10 "/home/ssd/pico/code/box86/src/librarian/library_private.h" 2

typedef struct lib_s lib_t;
typedef struct bridge_s bridge_t;
typedef struct elfheader_s elfheader_t;
typedef struct kh_bridgemap_s kh_bridgemap_t;
typedef struct kh_mapsymbols_s kh_mapsymbols_t;
typedef struct x86emu_s x86emu_t;

typedef void (*wrapper_t)(x86emu_t* emu, uintptr_t fnc);

typedef struct symbol1_s {
    wrapper_t w;
    int resolved;
    uintptr_t addr;
} symbol1_t;

typedef struct symbol2_s {
    wrapper_t w;
    const char* name;
    int weak;
    int resolved;
    uintptr_t addr;
} symbol2_t;
# 49 "/home/ssd/pico/code/box86/src/librarian/library_private.h"
typedef struct kh_symbolmap_s{ khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; kh_cstr_t *keys; symbol1_t *vals; } kh_symbolmap_t; extern kh_symbolmap_t *kh_init_symbolmap(void); extern void kh_destroy_symbolmap(kh_symbolmap_t *h); extern void kh_clear_symbolmap(kh_symbolmap_t *h); extern khint_t kh_get_symbolmap(const kh_symbolmap_t *h, kh_cstr_t key); extern int kh_resize_symbolmap(kh_symbolmap_t *h, khint_t new_n_buckets); extern khint_t kh_put_symbolmap(kh_symbolmap_t *h, kh_cstr_t key, int *ret); extern void kh_del_symbolmap(kh_symbolmap_t *h, khint_t x);
typedef struct kh_symbol2map_s{ khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; kh_cstr_t *keys; symbol2_t *vals; } kh_symbol2map_t; extern kh_symbol2map_t *kh_init_symbol2map(void); extern void kh_destroy_symbol2map(kh_symbol2map_t *h); extern void kh_clear_symbol2map(kh_symbol2map_t *h); extern khint_t kh_get_symbol2map(const kh_symbol2map_t *h, kh_cstr_t key); extern int kh_resize_symbol2map(kh_symbol2map_t *h, khint_t new_n_buckets); extern khint_t kh_put_symbol2map(kh_symbol2map_t *h, kh_cstr_t key, int *ret); extern void kh_del_symbol2map(kh_symbol2map_t *h, khint_t x);
typedef struct kh_datamap_s{ khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; kh_cstr_t *keys; uint32_t *vals; } kh_datamap_t; extern kh_datamap_t *kh_init_datamap(void); extern void kh_destroy_datamap(kh_datamap_t *h); extern void kh_clear_datamap(kh_datamap_t *h); extern khint_t kh_get_datamap(const kh_datamap_t *h, kh_cstr_t key); extern int kh_resize_datamap(kh_datamap_t *h, khint_t new_n_buckets); extern khint_t kh_put_datamap(kh_datamap_t *h, kh_cstr_t key, int *ret); extern void kh_del_datamap(kh_datamap_t *h, khint_t x);






typedef struct wlib_s {
    bridge_t *bridge;
    void* lib;
    void* priv;
    char* altprefix;
    needed_libs_t* needed;
    kh_symbolmap_t *symbolmap;
    kh_symbolmap_t *wsymbolmap;
    kh_symbolmap_t *mysymbolmap;
    kh_symbolmap_t *wmysymbolmap;
    kh_symbolmap_t *stsymbolmap;
    kh_symbol2map_t *symbol2map;
    kh_datamap_t *datamap;
    kh_datamap_t *wdatamap;
    kh_datamap_t *mydatamap;
    char *altmy;
    int refcnt;
} wlib_t;

typedef struct elib_s {
    int elf_index;
    elfheader_t *elf;
    int finalized;
} elib_t;

typedef struct library_s {
    char* name;
    char* path;
    int nbdot;
    int type;
    wrappedlib_fini_t fini;
    wrappedlib_get_t getglobal;
    wrappedlib_get_t getweak;
    wrappedlib_get_t getlocal;
    union {
        wlib_t w;
        elib_t e;
    };
    lib_t *maplib;
    kh_bridgemap_t *gbridgemap;
    kh_bridgemap_t *wbridgemap;
    kh_bridgemap_t *lbridgemap;
    int dlopen;
} library_t;


typedef struct map_onesymbol_s {
    const char* name;
    wrapper_t w;
    int weak;
} map_onesymbol_t;
typedef struct map_onesymbol2_s {
    const char* name;
    wrapper_t w;
    int weak;
    const char* name2;
} map_onesymbol2_t;
typedef struct map_onedata_s {
    const char* name;
    uint32_t sz;
    int weak;
} map_onedata_t;

int getSymbolInMaps(library_t *lib, const char* name, int noweak, uintptr_t *addr, uintptr_t *size, int *weak, int version, const char* vername, int local);

typedef struct linkmap_s {

    Elf32_Addr l_addr;
    char* l_name;
    Elf32_Dyn* l_ld;
    struct linkmap_s *l_next, *l_prev;

    library_t* l_lib;

} linkmap_t;

linkmap_t* getLinkMapLib(library_t* lib);
linkmap_t* getLinkMapElf(elfheader_t* h);
linkmap_t* addLinkMapLib(library_t* lib);
void removeLinkMapLib(library_t* lib);

int FiniLibrary(library_t* lib, x86emu_t* emu);
void Free1Library(library_t **lib, x86emu_t* emu);

void RemoveDlopen(library_t** lib, int idx);
# 17 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h" 1



# 1 "/home/ssd/pico/code/box86/src/include/regs.h" 1



enum {
 _AX, _CX, _DX, _BX,
 _SP, _BP, _SI, _DI
};

enum {
    _ES, _CS, _SS, _DS, _FS, _GS
};


typedef union {
 int32_t sdword[1];
 uint32_t dword[1];
 int16_t sword[2];
 uint16_t word[2];
 int8_t sbyte[4];
 uint8_t byte[4];
} reg32_t;

typedef enum {
 ROUND_Nearest = 0,
 ROUND_Down = 1,
 ROUND_Up = 2,
 ROUND_Chop = 3
} fpu_round_t;

typedef enum {
 d_none = 0,
 d_add8,
 d_add16,
 d_add32,
 d_and8,
 d_and16,
 d_and32,
 d_dec8,
 d_dec16,
 d_dec32,
 d_inc8,
 d_inc16,
 d_inc32,
 d_imul8,
 d_imul16,
 d_imul32,
 d_or8,
 d_or16,
 d_or32,
 d_mul8,
 d_mul16,
 d_mul32,
 d_neg8,
 d_neg16,
 d_neg32,
 d_shl8,
 d_shl16,
 d_shl32,
 d_shr8,
 d_shr16,
 d_shr32,
 d_sar8,
 d_sar16,
 d_sar32,
 d_sub8,
 d_sub16,
 d_sub32,
 d_xor8,
 d_xor16,
 d_xor32,
 d_cmp8,
 d_cmp16,
 d_cmp32,
 d_tst8,
 d_tst16,
 d_tst32,
 d_adc8,
 d_adc16,
 d_adc32,
 d_sbb8,
 d_sbb16,
 d_sbb32,
 d_rol8,
 d_rol16,
 d_rol32,
 d_ror8,
 d_ror16,
 d_ror32,
 d_rcl8,
 d_rcl16,
 d_rcl32,
 d_rcr8,
 d_rcr16,
 d_rcr32,
 d_shld32,
 d_shrd32,
 d_unknown
} defered_flags_t;

#pragma pack(push, 1)

typedef union {

 struct {
  uint64_t lower;
  uint16_t upper;
 } l;
} longdouble_t;

typedef struct {

 long double ld;



 uint64_t uref;
} fpu_ld_t;

typedef struct {
 int64_t sref;
 int64_t sq;
} fpu_ll_t;

typedef union {
    struct __attribute__ ((__packed__)) {
        unsigned int _F_CF:1;
  unsigned int _F_res1:1;
        unsigned int _F_PF:1;
  unsigned int _F_res2:1;
        unsigned int _F_AF:1;
  unsigned int _F_res3:1;
        unsigned int _F_ZF:1;
        unsigned int _F_SF:1;
        unsigned int _F_TF:1;
        unsigned int _F_IF:1;
        unsigned int _F_DF:1;
        unsigned int _F_OF:1;
        unsigned int _F_IOPL:2;
        unsigned int _F_NT:1;
        unsigned int _F_dummy:1;
        unsigned int _F_RF:1;
        unsigned int _F_VM:1;
        unsigned int _F_AC:1;
        unsigned int _F_VIF:1;
        unsigned int _F_VIP:1;
        unsigned int _F_ID:1;
    } f;
    uint32_t x32;
} x86flags_t;

typedef enum {
    F_CF = 0,
 F_res1,
    F_PF,
 F_res2,
    F_AF,
 F_res3,
    F_ZF,
    F_SF,
    F_TF,
    F_IF,
    F_DF,
    F_OF,
    F_IOPL,
    F_NT = 14,
    F_dummy,
    F_RF,
    F_VM,
    F_AC,
    F_VIF,
    F_VIP,
    F_ID,
 F_LAST
} flags_names_t;


typedef union {
    struct __attribute__ ((__packed__)) {
        uint16_t F87_IE:1;
        uint16_t F87_DE:1;
        uint16_t F87_ZE:1;
        uint16_t F87_OE:1;
        uint16_t F87_UE:1;
        uint16_t F87_PE:1;
        uint16_t F87_SF:1;
        uint16_t F87_ES:1;
        uint16_t F87_C0:1;
  uint16_t F87_C1:1;
  uint16_t F87_C2:1;
  uint16_t F87_TOP:3;
  uint16_t F87_C3:1;
  uint16_t F87_B:1;
    } f;
    uint16_t x16;
} x87flags_t;

typedef union {
    struct __attribute__ ((__packed__)) {
        uint16_t C87_IM:1;
        uint16_t C87_DM:1;
        uint16_t C87_ZM:1;
        uint16_t C87_OM:1;
        uint16_t C87_UM:1;
        uint16_t C87_PM:1;
        uint16_t C87_R1:2;
        uint16_t C87_PC:2;
        uint16_t C87_RD:2;
  uint16_t C87_IC:1;
  uint16_t C87_R2:3;
    } f;
    uint16_t x16;
} x87control_t;

typedef union {
 struct __attribute__ ((__packed__)) {
  uint32_t MXCSR_IE:1;
  uint32_t MXCSR_DE:1;
  uint32_t MXCSR_ZE:1;
  uint32_t MXCSR_OE:1;
  uint32_t MXCSR_UE:1;
  uint32_t MXCSR_PE:1;
  uint32_t MXCSR_DAZ:1;
  uint32_t MXCSR_IM:1;
  uint32_t MXCSR_DM:1;
  uint32_t MXCSR_ZM:1;
  uint32_t MXCSR_OM:1;
  uint32_t MXCSR_UM:1;
  uint32_t MXCSR_PM:1;
  uint32_t MXCSR_RC:2;
  uint32_t MXCSR_FZ:1;
  uint32_t MXCSR_RES:16;
 } f;
 uint32_t x32;
} mmxcontrol_t;

typedef union {
 uint64_t q;
 int64_t sq;
 double d;
 float f[2];
 uint32_t ud[2];
 int32_t sd[2];
 uint16_t uw[4];
 int16_t sw[4];
 uint8_t ub[8];
 int8_t sb[8];
} mmx87_regs_t;

typedef union {
 uint64_t q[2];
 int64_t sq[2];
 double d[2];
 float f[4];
 uint32_t ud[4];
 int32_t sd[4];
 uint16_t uw[8];
 int16_t sw[8];
 uint8_t ub[16];
 int8_t sb[16];
} sse_regs_t;
#pragma pack(pop)
# 5 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h" 2

typedef struct box86context_s box86context_t;
typedef struct i386_ucontext_s i386_ucontext_t;
# 18 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
typedef struct forkpty_s {
    void* amaster;
    void* name;
    void* termp;
    void* winp;
    void* f;
} forkpty_t;

typedef struct x86emu_s x86emu_t;

typedef struct x86test_s {
    x86emu_t* emu;
    uintptr_t memaddr;
    int memsize;
    int test;
    int clean;
    uint8_t mem[16];
} x86test_t;

typedef struct emu_flags_s {
    uint32_t need_jmpbuf:1;
    uint32_t quitonlongjmp:2;
    uint32_t quitonexit:2;
    uint32_t longjmp:1;
    uint32_t jmpbuf_ready:1;
} emu_flags_t;
# 52 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
typedef struct x86emu_s {

 reg32_t regs[8];
 x86flags_t eflags;
    reg32_t ip;
    uintptr_t xSPSave;

 x87control_t cw;
 x87flags_t sw;
 mmx87_regs_t x87[8];
 mmx87_regs_t mmx[8];
 uint32_t top;
    int fpu_stack;
 uint32_t fpu_tags;
    fpu_ld_t fpu_ld[8];
    fpu_ll_t fpu_ll[8];

    sse_regs_t xmm[8];
    mmxcontrol_t mxcsr;
    uintptr_t old_ip;

    defered_flags_t df;
    uint32_t op1;
    uint32_t op2;
    uint32_t res;
    uint32_t *x86emu_parity_tab;




    uint16_t segs[6];
    uint16_t dummy_seg6, dummy_seg7;
    uintptr_t segs_offs[6];
    uint32_t segs_serial[6];

    int quit;
    int error;
    int fork;
    int exit;
    forkpty_t* forkpty_info;
    emu_flags_t flags;
    x86test_t test;

    box86context_t *context;

    reg32_t zero;
    reg32_t *sbiidx[8];

    uint32_t scratch[200];

    void* stack2free;
    void* init_stack;
    uint32_t size_stack;
    struct __jmp_buf_tag* jmpbuf;
    uintptr_t old_savedsp;

    i386_ucontext_t *uc_link;

    int type;

} x86emu_t;
# 121 "/home/ssd/pico/code/box86/src/emu/x86emu_private.h"
void applyFlushTo0(x86emu_t* emu);
# 18 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

# 1 "/home/ssd/pico/code/box86/src/include/sdl2rwops.h" 1



typedef struct SDL2_RWops_s SDL2_RWops_t;
typedef struct x86emu_s x86emu_t;

typedef SDL2_RWops_t* (*sdl2_allocrw)();
typedef void (*sdl2_freerw)(SDL2_RWops_t*);

typedef struct SDL2RWSave_s {
    int anyEmu;
    void* size;
    void* seek;
    void* read;
    void* write;
    void* close;
    void* s1;
    void* s2;
} SDL2RWSave_t;


SDL2_RWops_t* AddNativeRW2(x86emu_t* emu, SDL2_RWops_t* ops);
SDL2_RWops_t* RWNativeStart2(x86emu_t* emu, SDL2_RWops_t* ops);
void RWNativeEnd2(SDL2_RWops_t* ops);

int64_t RWNativeSeek2(SDL2_RWops_t *ops, int64_t offset, int32_t whence);
uint32_t RWNativeRead2(SDL2_RWops_t* ops, void* ptr, uint32_t size, uint32_t maxnum);
int32_t RWNativeWrite2(SDL2_RWops_t *ops, const void *ptr, int32_t size, int32_t num);
int32_t RWNativeClose2(SDL2_RWops_t* ops);
# 20 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/myalign.h" 1
# 22 "/home/ssd/pico/code/box86/src/include/myalign.h"
void myStackAlign(const char* fmt, uint32_t* st, uint32_t* mystack);
void myStackAlignGVariantNew(const char* fmt, uint32_t* st, uint32_t* mystack);
void myStackAlignW(const char* fmt, uint32_t* st, uint32_t* mystack);

void AlignStat64(const void* source, void* dest);
void UnalignStat64(const void* source, void* dest);
void UnalignSysStat64(const void* source, void* dest);
void UnalignStat(const void* source, void* dest);

void UnalignStatFS64(const void* source, void* dest);
void UnalignStatFS(const void* source, void* dest);

void UnalignOggVorbis(void* dest, void* source);
void AlignOggVorbis(void* dest, void* source);

void UnalignVorbisDspState(void* dest, void* source);
void AlignVorbisDspState(void* dest, void* source);

void UnalignVorbisBlock(void* dest, void* source);
void AlignVorbisBlock(void* dest, void* source);

void UnalignEpollEvent(void* dest, void* source, int nbr);
void AlignEpollEvent(void* dest, void* source, int nbr);

void UnalignSmpegInfo(void* dest, void* source);
void AlignSmpegInfo(void* dest, void* source);

void Timespec2Timespec64(void* dest, const void* source);
void Timespec642Timespec(void* dest, const void* source);
# 60 "/home/ssd/pico/code/box86/src/include/myalign.h"
struct i386_stat {
 uint64_t st_dev;
 uint32_t __pad1;
 uint32_t st_ino;
 uint32_t st_mode;
 uint32_t st_nlink;
 uint32_t st_uid;
 uint32_t st_gid;
 uint64_t st_rdev;
 uint32_t __pad2;
 int32_t st_size;
 int32_t st_blksize;
 int32_t st_blocks;
 int32_t st_atime_sec;
 uint32_t st_atime_nsec;
 int32_t st_mtime_sec;
 uint32_t st_mtime_nsec;
 int32_t st_ctime_sec;
 uint32_t st_ctime_nsec;
 uint32_t __unused4;
 uint32_t __unused5;
} __attribute__((packed));

struct i386_stat64 {
 uint64_t st_dev;
 uint32_t __pad0;
 uint32_t __st_ino;
 uint32_t st_mode;
 uint32_t st_nlink;
 uint32_t st_uid;
 uint32_t st_gid;
 uint64_t st_rdev;
 uint32_t __pad3;
 int64_t st_size;
 uint32_t st_blksize;
 uint64_t st_blocks;
 uint32_t st_atime;
 uint32_t st_atime_nsec;
 uint32_t st_mtime;
 uint32_t st_mtime_nsec;
 uint32_t st_ctime;
 uint32_t st_ctime_nsec;
 uint64_t st_ino;
} __attribute__((packed));

struct i386_fsid {
  int val[2];
} __attribute__((packed));

struct i386_statfs {
  uint32_t f_type;
  uint32_t f_bsize;
  uint32_t f_blocks;
  uint32_t f_bfree;
  uint32_t f_bavail;
  uint32_t f_files;
  uint32_t f_ffree;
  struct i386_fsid f_fsid;
  uint32_t f_namelen;
  uint32_t f_frsize;
  uint32_t f_flags;
  uint32_t f_spare[4];
} __attribute__((packed));

struct i386_statfs64 {
  uint32_t f_type;
  uint32_t f_bsize;
  uint64_t f_blocks;
  uint64_t f_bfree;
  uint64_t f_bavail;
  uint64_t f_files;
  uint64_t f_ffree;
  struct i386_fsid f_fsid;
  uint32_t f_namelen;
  uint32_t f_frsize;
  uint32_t f_flags;
  uint32_t f_spare[4];
} __attribute__((packed));

typedef struct {
  unsigned char *data;
  int storage;
  int fill;
  int returned;

  int unsynced;
  int headerbytes;
  int bodybytes;
} ogg_sync_state;

typedef struct {
  unsigned char *body_data;
  long body_storage;
  long body_fill;
  long body_returned;


  int *lacing_vals;
  int64_t *granule_vals;


  long lacing_storage;
  long lacing_fill;
  long lacing_packet;
  long lacing_returned;

  unsigned char header[282];
  int header_fill;

  int e_o_s;

  int b_o_s;

  long serialno;
  long pageno;
  int64_t packetno;




  int64_t granulepos;

} ogg_stream_state;

typedef struct vorbis_dsp_state {
  int analysisp;
  void *vi;

  float **pcm;
  float **pcmret;
  int pcm_storage;
  int pcm_current;
  int pcm_returned;

  int preextrapolate;
  int eofflag;

  long lW;
  long W;
  long nW;
  long centerW;

  int64_t granulepos;
  int64_t sequence;

  int64_t glue_bits;
  int64_t time_bits;
  int64_t floor_bits;
  int64_t res_bits;

  void *backend_state;
} vorbis_dsp_state;

typedef struct {
  long endbyte;
  int endbit;

  unsigned char *buffer;
  unsigned char *ptr;
  long storage;
} oggpack_buffer;

typedef struct vorbis_block {

  float **pcm;
  oggpack_buffer opb;

  long lW;
  long W;
  long nW;
  int pcmend;
  int mode;

  int eofflag;
  int64_t granulepos;
  int64_t sequence;
  vorbis_dsp_state *vd;



  void *localstore;
  long localtop;
  long localalloc;
  long totaluse;
  struct alloc_chain *reap;


  long glue_bits;
  long time_bits;
  long floor_bits;
  long res_bits;

  void *internal;

} vorbis_block;

typedef struct {
  size_t (*read_func) (void *ptr, size_t size, size_t nmemb, void *datasource);
  int (*seek_func) (void *datasource, int64_t offset, int whence);
  int (*close_func) (void *datasource);
  long (*tell_func) (void *datasource);
} ov_callbacks;

typedef struct OggVorbis {
  void *datasource;
  int seekable;
  int64_t offset;
  int64_t end;
  ogg_sync_state oy;



  int links;
  int64_t *offsets;
  int64_t *dataoffsets;
  long *serialnos;
  int64_t *pcmlengths;


  void *vi;
  void *vc;


  int64_t pcm_offset;
  int ready_state;
  long current_serialno;
  int current_link;

  double bittrack;
  double samptrack;

  ogg_stream_state os;

  vorbis_dsp_state vd;
  vorbis_block vb;

  ov_callbacks callbacks;

} OggVorbis;

typedef struct my_SMPEG_Info_s {
    int has_audio;
    int has_video;
    int width;
    int height;
    int current_frame;
    double current_fps;
    char audio_string[80];
    int audio_current_frame;
    uint32_t current_offset;
    uint32_t total_size;
    double current_time;
    double total_time;
} my_SMPEG_Info_t;

typedef struct __attribute__((packed)) x86_ftsent_s {
        struct x86_ftsent_s *fts_cycle;
        struct x86_ftsent_s *fts_parent;
        struct x86_ftsent_s *fts_link;
        long fts_number;
        void *fts_pointer;
        char *fts_accpath;
        char *fts_path;
        int fts_errno;
        int fts_symfd;
        uint16_t fts_pathlen;
        uint16_t fts_namelen;
        uintptr_t fts_ino;
        uint64_t fts_dev;
        uint32_t fts_nlink;
        int16_t fts_level;
        uint16_t fts_info;
        uint16_t fts_flags;
        uint16_t fts_instr;
        struct stat *fts_statp;
        char fts_name[1];
} x86_ftsent_t;

void UnalignFTSENT(void* dest, void* source);
void AlignFTSENT(void* dest, void* source);

typedef struct my_flock64_s {
 uint16_t l_type;
 uint16_t l_whence;
 int64_t l_start;
 int64_t l_len;
 int l_pid;
} my_flock64_t;

typedef struct __attribute__((packed)) x86_flock64_s {
 uint16_t l_type;
 uint16_t l_whence;
 int64_t l_start;
 int64_t l_len;
 int l_pid;
} x86_flock64_t;

void UnalignFlock64(void* dest, void* source);
void AlignFlock64(void* dest, void* source);


int of_convert(int);
int of_unconvert(int);

typedef struct my_GValue_s
{
  int g_type;
  union {
    int v_int;
    int64_t v_int64;
    uint64_t v_uint64;
    float v_float;
    double v_double;
    void* v_pointer;
  } data[2];
} my_GValue_t;

void alignNGValue(my_GValue_t* v, void* value, int n);
void unalignNGValue(void* value, my_GValue_t* v, int n);


typedef struct jump_buff_i386_s {
 uint32_t save_ebx;
 uint32_t save_esi;
 uint32_t save_edi;
 uint32_t save_ebp;
 uint32_t save_esp;
 uint32_t save_eip;
} jump_buff_i386_t;

typedef struct __jmp_buf_tag_s {
    jump_buff_i386_t __jmpbuf;
    int __mask_was_saved;
    sigset_t __saved_mask;
} __jmp_buf_tag_t;
# 21 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/threads.h" 1



typedef struct box86context_s box86context_t;
typedef struct x86emu_s x86emu_t;

void CleanStackSize(box86context_t* context);

void init_pthread_helper();
void fini_pthread_helper(box86context_t* context);
void clean_current_emuthread(void);


void* my_prepare_thread(x86emu_t *emu, void* f, void* arg, int ssize, void** pet);



int checkUnlockMutex(void* m);
# 22 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 1 "/home/ssd/pico/code/box86/src/include/gltools.h" 1



typedef struct box86context_s box86context_t;

typedef void* (*glprocaddress_t)(const char* name);

void freeGLProcWrapper(box86context_t* context);

void* getGLProcAddress(x86emu_t* emu, glprocaddress_t procaddr, const char* rname);
# 23 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrappedsdl2defs.h" 1
# 25 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

static void* my_glhandle = 
# 26 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                          ((void *)0)
# 26 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                              ;

void* my_dlopen(x86emu_t* emu, void *filename, int flag);
int my_dlclose(x86emu_t* emu, void *handle);
void* my_dlsym(x86emu_t* emu, void *handle, void *symbol);

static int sdl_Yes() { return 1;}
static int sdl_No() { return 0;}
int __attribute__((visibility("default"))) my2_SDL_Has3DNow() __attribute__((alias("sdl_No")));
int __attribute__((visibility("default"))) my2_SDL_Has3DNowExt() __attribute__((alias("sdl_No")));
int __attribute__((visibility("default"))) my2_SDL_HasAltiVec() __attribute__((alias("sdl_No")));
int __attribute__((visibility("default"))) my2_SDL_HasMMX() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasMMXExt() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasNEON() __attribute__((alias("sdl_No")));
int __attribute__((visibility("default"))) my2_SDL_HasRDTSC() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasSSE() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasSSE2() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasSSE3() __attribute__((alias("sdl_Yes")));
int __attribute__((visibility("default"))) my2_SDL_HasSSE41() __attribute__((alias("sdl_No")));
int __attribute__((visibility("default"))) my2_SDL_HasSSE42() __attribute__((alias("sdl_No")));

typedef struct {
  int32_t freq;
  uint16_t format;
  uint8_t channels;
  uint8_t silence;
  uint16_t samples;
  uint16_t padding;
  uint32_t size;
  void (*callback)(void *userdata, uint8_t *stream, int32_t len);
  void *userdata;
} SDL2_AudioSpec;

typedef struct {
    uint8_t data[16];
} SDL_JoystickGUID;

typedef union {
    SDL_JoystickGUID guid;
    uint32_t u[4];
    uint16_t u16[8];
} SDL_JoystickGUID_Helper;

typedef struct
{
    uint32_t bindType;
    union
    {
        int button;
        int axis;
        struct {
            int hat;
            int hat_mask;
        } hat;
    } value;
} SDL_GameControllerButtonBind;

const char* sdl2Name = "libSDL2-2.0.so.0";


typedef void (*vFv_t)();
typedef void (*vFiupp_t)(int32_t, uint32_t, void*, void*);
typedef int32_t (*iFpLpp_t)(void*, size_t, void*, void*);
typedef int32_t (*iFpupp_t)(void*, uint32_t, void*, void*);






# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrappedsdl2types.h" 1
# 14 "/home/ssd/pico/code/box86/src/wrapped/generated/wrappedsdl2types.h"
typedef void (*vFp_t)(void*);
typedef int32_t (*iFv_t)(void);
typedef int32_t (*iFp_t)(void*);
typedef int32_t (*iFJ_t)(SDL_JoystickGUID);
typedef int64_t (*IFp_t)(void*);
typedef uint32_t (*uFp_t)(void*);
typedef uint64_t (*UFp_t)(void*);
typedef void* (*pFv_t)(void);
typedef void* (*pFp_t)(void*);
typedef SDL_JoystickGUID (*JFi_t)(int32_t);
typedef SDL_JoystickGUID (*JFp_t)(void*);
typedef void (*vFpp_t)(void*, void*);
typedef void (*vFpV_t)(void*, ...);
typedef int32_t (*iFip_t)(int32_t, void*);
typedef int32_t (*iFWW_t)(uint16_t, uint16_t);
typedef int32_t (*iFpi_t)(void*, int32_t);
typedef int32_t (*iFpp_t)(void*, void*);
typedef uint32_t (*uFpW_t)(void*, uint16_t);
typedef uint32_t (*uFpu_t)(void*, uint32_t);
typedef uint32_t (*uFpU_t)(void*, uint64_t);
typedef void* (*pFpi_t)(void*, int32_t);
typedef void* (*pFpp_t)(void*, void*);
typedef SDL_GameControllerButtonBind (*gFpi_t)(void*, int32_t);
typedef void (*vFipV_t)(int32_t, void*, ...);
typedef int32_t (*iFupu_t)(uint32_t, void*, uint32_t);
typedef int32_t (*iFupp_t)(uint32_t, void*, void*);
typedef int32_t (*iFppi_t)(void*, void*, int32_t);
typedef int32_t (*iFppV_t)(void*, void*, ...);
typedef int64_t (*IFpIi_t)(void*, int64_t, int32_t);
typedef void* (*pFupp_t)(uint32_t, void*, void*);
typedef void* (*pFppi_t)(void*, void*, int32_t);
typedef void* (*pFppp_t)(void*, void*, void*);
typedef void (*vFiupV_t)(int32_t, uint32_t, void*, ...);
typedef void (*vFpuup_t)(void*, uint32_t, uint32_t, void*);
typedef int32_t (*iFpupp_t)(void*, uint32_t, void*, void*);
typedef int32_t (*iFpupV_t)(void*, uint32_t, void*, ...);
typedef uint32_t (*uFppuu_t)(void*, void*, uint32_t, uint32_t);
typedef void (*vFJpppp_t)(SDL_JoystickGUID, void*, void*, void*, void*);
typedef int32_t (*iFpippi_t)(void*, int32_t, void*, void*, int32_t);
typedef void* (*pFpippp_t)(void*, int32_t, void*, void*, void*);
typedef void* (*pFpiiiiu_t)(void*, int32_t, int32_t, int32_t, int32_t, uint32_t);
# 97 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2

# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappercallback.h" 1




typedef struct sdl2_my_s {


    vFv_t SDL_Quit; sdl2_allocrw SDL_AllocRW; sdl2_freerw SDL_FreeRW; vFiupp_t SDL_LogMessageV; vFp_t SDL_UnloadObject; iFp_t SDL_RWclose; iFp_t SDL_RemoveTimer; iFp_t SDL_SaveAllDollarTemplates; iFp_t SDL_mutexP; iFp_t SDL_mutexV; iFJ_t SDL_IsJoystickHIDAPI; iFJ_t SDL_IsJoystickXInput; IFp_t SDL_RWsize; IFp_t SDL_RWtell; uFp_t SDL_ReadBE16; uFp_t SDL_ReadBE32; uFp_t SDL_ReadLE16; uFp_t SDL_ReadLE32; uFp_t SDL_ReadU8; UFp_t SDL_ReadBE64; UFp_t SDL_ReadLE64; pFv_t SDL_GetBasePath; pFv_t SDL_Vulkan_GetVkGetInstanceProcAddr; pFp_t SDL_GL_GetProcAddress; pFp_t SDL_LoadObject; JFi_t SDL_JoystickGetDeviceGUID; JFp_t SDL_JoystickGetGUID; JFp_t SDL_JoystickGetGUIDFromString; vFpp_t SDL_AddEventWatch; vFpp_t SDL_DelEventWatch; vFpp_t SDL_LogGetOutputFunction; vFpp_t SDL_LogSetOutputFunction; vFpp_t SDL_SetEventFilter; vFpV_t SDL_Log; iFip_t SDL_SaveDollarTemplate; iFWW_t SDL_IsJoystickNintendoSwitchPro; iFWW_t SDL_IsJoystickPS4; iFWW_t SDL_IsJoystickSteamController; iFWW_t SDL_IsJoystickXbox360; iFWW_t SDL_IsJoystickXboxOne; iFpi_t SDL_GameControllerAddMappingsFromRW; iFpp_t SDL_GetEventFilter; iFpp_t SDL_OpenAudio; uFpW_t SDL_WriteBE16; uFpW_t SDL_WriteLE16; uFpu_t SDL_WriteBE32; uFpu_t SDL_WriteLE32; uFpu_t SDL_WriteU8; uFpU_t SDL_WriteBE64; uFpU_t SDL_WriteLE64; pFpi_t SDL_LoadBMP_RW; pFpi_t SDL_RWFromConstMem; pFpi_t SDL_RWFromFP; pFpi_t SDL_RWFromMem; pFpp_t SDL_LoadFunction; pFpp_t SDL_RWFromFile; gFpi_t SDL_GameControllerGetBindForAxis; gFpi_t SDL_GameControllerGetBindForButton; vFipV_t SDL_LogCritical; vFipV_t SDL_LogDebug; vFipV_t SDL_LogError; vFipV_t SDL_LogInfo; vFipV_t SDL_LogVerbose; vFipV_t SDL_LogWarn; iFupu_t SDL_DYNAPI_entry; iFupp_t SDL_TLSSet; iFppi_t SDL_SaveBMP_RW; iFppV_t SDL_sscanf; IFpIi_t SDL_RWseek; pFupp_t SDL_AddTimer; pFppi_t SDL_LoadFile_RW; pFppp_t SDL_CreateThread; vFiupV_t SDL_LogMessage; vFpuup_t SDL_qsort; iFpupp_t SDL_vsnprintf; iFpupV_t SDL_snprintf; uFppuu_t SDL_RWread; uFppuu_t SDL_RWwrite; vFJpppp_t SDL_GetJoystickGUIDInfo; iFpippi_t SDL_OpenAudioDevice; pFpippp_t SDL_LoadWAV_RW; pFpiiiiu_t SDL_CreateWindow;




} sdl2_my_t;

static library_t* my_lib = 
# 15 "/home/ssd/pico/code/box86/src/wrapped/wrappercallback.h" 3 4
                          ((void *)0)
# 15 "/home/ssd/pico/code/box86/src/wrapped/wrappercallback.h"
                              ;
static sdl2_my_t my_sdl2 = {0};
static sdl2_my_t * const my = &my_sdl2;

static void getMy(library_t* lib)
{

    my->SDL_Quit = (vFv_t)dlsym(lib->w.lib, "SDL_Quit"); my->SDL_AllocRW = (sdl2_allocrw)dlsym(lib->w.lib, "SDL_AllocRW"); my->SDL_FreeRW = (sdl2_freerw)dlsym(lib->w.lib, "SDL_FreeRW"); my->SDL_LogMessageV = (vFiupp_t)dlsym(lib->w.lib, "SDL_LogMessageV"); my->SDL_UnloadObject = (vFp_t)dlsym(lib->w.lib, "SDL_UnloadObject"); my->SDL_RWclose = (iFp_t)dlsym(lib->w.lib, "SDL_RWclose"); my->SDL_RemoveTimer = (iFp_t)dlsym(lib->w.lib, "SDL_RemoveTimer"); my->SDL_SaveAllDollarTemplates = (iFp_t)dlsym(lib->w.lib, "SDL_SaveAllDollarTemplates"); my->SDL_mutexP = (iFp_t)dlsym(lib->w.lib, "SDL_mutexP"); my->SDL_mutexV = (iFp_t)dlsym(lib->w.lib, "SDL_mutexV"); my->SDL_IsJoystickHIDAPI = (iFJ_t)dlsym(lib->w.lib, "SDL_IsJoystickHIDAPI"); my->SDL_IsJoystickXInput = (iFJ_t)dlsym(lib->w.lib, "SDL_IsJoystickXInput"); my->SDL_RWsize = (IFp_t)dlsym(lib->w.lib, "SDL_RWsize"); my->SDL_RWtell = (IFp_t)dlsym(lib->w.lib, "SDL_RWtell"); my->SDL_ReadBE16 = (uFp_t)dlsym(lib->w.lib, "SDL_ReadBE16"); my->SDL_ReadBE32 = (uFp_t)dlsym(lib->w.lib, "SDL_ReadBE32"); my->SDL_ReadLE16 = (uFp_t)dlsym(lib->w.lib, "SDL_ReadLE16"); my->SDL_ReadLE32 = (uFp_t)dlsym(lib->w.lib, "SDL_ReadLE32"); my->SDL_ReadU8 = (uFp_t)dlsym(lib->w.lib, "SDL_ReadU8"); my->SDL_ReadBE64 = (UFp_t)dlsym(lib->w.lib, "SDL_ReadBE64"); my->SDL_ReadLE64 = (UFp_t)dlsym(lib->w.lib, "SDL_ReadLE64"); my->SDL_GetBasePath = (pFv_t)dlsym(lib->w.lib, "SDL_GetBasePath"); my->SDL_Vulkan_GetVkGetInstanceProcAddr = (pFv_t)dlsym(lib->w.lib, "SDL_Vulkan_GetVkGetInstanceProcAddr"); my->SDL_GL_GetProcAddress = (pFp_t)dlsym(lib->w.lib, "SDL_GL_GetProcAddress"); my->SDL_LoadObject = (pFp_t)dlsym(lib->w.lib, "SDL_LoadObject"); my->SDL_JoystickGetDeviceGUID = (JFi_t)dlsym(lib->w.lib, "SDL_JoystickGetDeviceGUID"); my->SDL_JoystickGetGUID = (JFp_t)dlsym(lib->w.lib, "SDL_JoystickGetGUID"); my->SDL_JoystickGetGUIDFromString = (JFp_t)dlsym(lib->w.lib, "SDL_JoystickGetGUIDFromString"); my->SDL_AddEventWatch = (vFpp_t)dlsym(lib->w.lib, "SDL_AddEventWatch"); my->SDL_DelEventWatch = (vFpp_t)dlsym(lib->w.lib, "SDL_DelEventWatch"); my->SDL_LogGetOutputFunction = (vFpp_t)dlsym(lib->w.lib, "SDL_LogGetOutputFunction"); my->SDL_LogSetOutputFunction = (vFpp_t)dlsym(lib->w.lib, "SDL_LogSetOutputFunction"); my->SDL_SetEventFilter = (vFpp_t)dlsym(lib->w.lib, "SDL_SetEventFilter"); my->SDL_Log = (vFpV_t)dlsym(lib->w.lib, "SDL_Log"); my->SDL_SaveDollarTemplate = (iFip_t)dlsym(lib->w.lib, "SDL_SaveDollarTemplate"); my->SDL_IsJoystickNintendoSwitchPro = (iFWW_t)dlsym(lib->w.lib, "SDL_IsJoystickNintendoSwitchPro"); my->SDL_IsJoystickPS4 = (iFWW_t)dlsym(lib->w.lib, "SDL_IsJoystickPS4"); my->SDL_IsJoystickSteamController = (iFWW_t)dlsym(lib->w.lib, "SDL_IsJoystickSteamController"); my->SDL_IsJoystickXbox360 = (iFWW_t)dlsym(lib->w.lib, "SDL_IsJoystickXbox360"); my->SDL_IsJoystickXboxOne = (iFWW_t)dlsym(lib->w.lib, "SDL_IsJoystickXboxOne"); my->SDL_GameControllerAddMappingsFromRW = (iFpi_t)dlsym(lib->w.lib, "SDL_GameControllerAddMappingsFromRW"); my->SDL_GetEventFilter = (iFpp_t)dlsym(lib->w.lib, "SDL_GetEventFilter"); my->SDL_OpenAudio = (iFpp_t)dlsym(lib->w.lib, "SDL_OpenAudio"); my->SDL_WriteBE16 = (uFpW_t)dlsym(lib->w.lib, "SDL_WriteBE16"); my->SDL_WriteLE16 = (uFpW_t)dlsym(lib->w.lib, "SDL_WriteLE16"); my->SDL_WriteBE32 = (uFpu_t)dlsym(lib->w.lib, "SDL_WriteBE32"); my->SDL_WriteLE32 = (uFpu_t)dlsym(lib->w.lib, "SDL_WriteLE32"); my->SDL_WriteU8 = (uFpu_t)dlsym(lib->w.lib, "SDL_WriteU8"); my->SDL_WriteBE64 = (uFpU_t)dlsym(lib->w.lib, "SDL_WriteBE64"); my->SDL_WriteLE64 = (uFpU_t)dlsym(lib->w.lib, "SDL_WriteLE64"); my->SDL_LoadBMP_RW = (pFpi_t)dlsym(lib->w.lib, "SDL_LoadBMP_RW"); my->SDL_RWFromConstMem = (pFpi_t)dlsym(lib->w.lib, "SDL_RWFromConstMem"); my->SDL_RWFromFP = (pFpi_t)dlsym(lib->w.lib, "SDL_RWFromFP"); my->SDL_RWFromMem = (pFpi_t)dlsym(lib->w.lib, "SDL_RWFromMem"); my->SDL_LoadFunction = (pFpp_t)dlsym(lib->w.lib, "SDL_LoadFunction"); my->SDL_RWFromFile = (pFpp_t)dlsym(lib->w.lib, "SDL_RWFromFile"); my->SDL_GameControllerGetBindForAxis = (gFpi_t)dlsym(lib->w.lib, "SDL_GameControllerGetBindForAxis"); my->SDL_GameControllerGetBindForButton = (gFpi_t)dlsym(lib->w.lib, "SDL_GameControllerGetBindForButton"); my->SDL_LogCritical = (vFipV_t)dlsym(lib->w.lib, "SDL_LogCritical"); my->SDL_LogDebug = (vFipV_t)dlsym(lib->w.lib, "SDL_LogDebug"); my->SDL_LogError = (vFipV_t)dlsym(lib->w.lib, "SDL_LogError"); my->SDL_LogInfo = (vFipV_t)dlsym(lib->w.lib, "SDL_LogInfo"); my->SDL_LogVerbose = (vFipV_t)dlsym(lib->w.lib, "SDL_LogVerbose"); my->SDL_LogWarn = (vFipV_t)dlsym(lib->w.lib, "SDL_LogWarn"); my->SDL_DYNAPI_entry = (iFupu_t)dlsym(lib->w.lib, "SDL_DYNAPI_entry"); my->SDL_TLSSet = (iFupp_t)dlsym(lib->w.lib, "SDL_TLSSet"); my->SDL_SaveBMP_RW = (iFppi_t)dlsym(lib->w.lib, "SDL_SaveBMP_RW"); my->SDL_sscanf = (iFppV_t)dlsym(lib->w.lib, "SDL_sscanf"); my->SDL_RWseek = (IFpIi_t)dlsym(lib->w.lib, "SDL_RWseek"); my->SDL_AddTimer = (pFupp_t)dlsym(lib->w.lib, "SDL_AddTimer"); my->SDL_LoadFile_RW = (pFppi_t)dlsym(lib->w.lib, "SDL_LoadFile_RW"); my->SDL_CreateThread = (pFppp_t)dlsym(lib->w.lib, "SDL_CreateThread"); my->SDL_LogMessage = (vFiupV_t)dlsym(lib->w.lib, "SDL_LogMessage"); my->SDL_qsort = (vFpuup_t)dlsym(lib->w.lib, "SDL_qsort"); my->SDL_vsnprintf = (iFpupp_t)dlsym(lib->w.lib, "SDL_vsnprintf"); my->SDL_snprintf = (iFpupV_t)dlsym(lib->w.lib, "SDL_snprintf"); my->SDL_RWread = (uFppuu_t)dlsym(lib->w.lib, "SDL_RWread"); my->SDL_RWwrite = (uFppuu_t)dlsym(lib->w.lib, "SDL_RWwrite"); my->SDL_GetJoystickGUIDInfo = (vFJpppp_t)dlsym(lib->w.lib, "SDL_GetJoystickGUIDInfo"); my->SDL_OpenAudioDevice = (iFpippi_t)dlsym(lib->w.lib, "SDL_OpenAudioDevice"); my->SDL_LoadWAV_RW = (pFpippp_t)dlsym(lib->w.lib, "SDL_LoadWAV_RW"); my->SDL_CreateWindow = (pFpiiiiu_t)dlsym(lib->w.lib, "SDL_CreateWindow");

    my_lib = lib;



}

static void freeMy()
{
    my_lib = 
# 32 "/home/ssd/pico/code/box86/src/wrapped/wrappercallback.h" 3 4
            ((void *)0)
# 32 "/home/ssd/pico/code/box86/src/wrapped/wrappercallback.h"
                ;



}
# 99 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
# 114 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
static uintptr_t my_Timer_fct_0 = 0; static uint32_t my_Timer_0(uint32_t a, void* b) { return (uint32_t)RunFunctionFmt(my_Timer_fct_0, "up", a, b); } static uintptr_t my_Timer_fct_1 = 0; static uint32_t my_Timer_1(uint32_t a, void* b) { return (uint32_t)RunFunctionFmt(my_Timer_fct_1, "up", a, b); } static uintptr_t my_Timer_fct_2 = 0; static uint32_t my_Timer_2(uint32_t a, void* b) { return (uint32_t)RunFunctionFmt(my_Timer_fct_2, "up", a, b); } static uintptr_t my_Timer_fct_3 = 0; static uint32_t my_Timer_3(uint32_t a, void* b) { return (uint32_t)RunFunctionFmt(my_Timer_fct_3, "up", a, b); } static uintptr_t my_Timer_fct_4 = 0; static uint32_t my_Timer_4(uint32_t a, void* b) { return (uint32_t)RunFunctionFmt(my_Timer_fct_4, "up", a, b); }

static void* find_Timer_Fct(void* fct)
{
    if(!fct) return 
# 118 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                   ((void *)0)
# 118 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                       ;
    void* p;
    if((p = GetNativeFnc((uintptr_t)fct))) return p;

    if(my_Timer_fct_0 == (uintptr_t)fct) return my_Timer_0; if(my_Timer_fct_1 == (uintptr_t)fct) return my_Timer_1; if(my_Timer_fct_2 == (uintptr_t)fct) return my_Timer_2; if(my_Timer_fct_3 == (uintptr_t)fct) return my_Timer_3; if(my_Timer_fct_4 == (uintptr_t)fct) return my_Timer_4;


    if(my_Timer_fct_0 == 0) {my_Timer_fct_0 = (uintptr_t)fct; return my_Timer_0; } if(my_Timer_fct_1 == 0) {my_Timer_fct_1 = (uintptr_t)fct; return my_Timer_1; } if(my_Timer_fct_2 == 0) {my_Timer_fct_2 = (uintptr_t)fct; return my_Timer_2; } if(my_Timer_fct_3 == 0) {my_Timer_fct_3 = (uintptr_t)fct; return my_Timer_3; } if(my_Timer_fct_4 == 0) {my_Timer_fct_4 = (uintptr_t)fct; return my_Timer_4; }

    do {if((0)<=box86_log) {fprintf(ftrace, "Warning, no more slot for SDL2 Timer callback\n"); fflush(ftrace);}} while(0);
    return 
# 128 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
          ((void *)0)
# 128 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
              ;

}







static uintptr_t my_AudioCallback_fct_0 = 0; static void my_AudioCallback_0(void* a, void* b, int c) { RunFunctionFmt(my_AudioCallback_fct_0, "ppi", a, b, c); } static uintptr_t my_AudioCallback_fct_1 = 0; static void my_AudioCallback_1(void* a, void* b, int c) { RunFunctionFmt(my_AudioCallback_fct_1, "ppi", a, b, c); } static uintptr_t my_AudioCallback_fct_2 = 0; static void my_AudioCallback_2(void* a, void* b, int c) { RunFunctionFmt(my_AudioCallback_fct_2, "ppi", a, b, c); } static uintptr_t my_AudioCallback_fct_3 = 0; static void my_AudioCallback_3(void* a, void* b, int c) { RunFunctionFmt(my_AudioCallback_fct_3, "ppi", a, b, c); } static uintptr_t my_AudioCallback_fct_4 = 0; static void my_AudioCallback_4(void* a, void* b, int c) { RunFunctionFmt(my_AudioCallback_fct_4, "ppi", a, b, c); }

static void* find_AudioCallback_Fct(void* fct)
{
    if(!fct) return 
# 142 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                   ((void *)0)
# 142 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                       ;
    void* p;
    if((p = GetNativeFnc((uintptr_t)fct))) return p;

    if(my_AudioCallback_fct_0 == (uintptr_t)fct) return my_AudioCallback_0; if(my_AudioCallback_fct_1 == (uintptr_t)fct) return my_AudioCallback_1; if(my_AudioCallback_fct_2 == (uintptr_t)fct) return my_AudioCallback_2; if(my_AudioCallback_fct_3 == (uintptr_t)fct) return my_AudioCallback_3; if(my_AudioCallback_fct_4 == (uintptr_t)fct) return my_AudioCallback_4;


    if(my_AudioCallback_fct_0 == 0) {my_AudioCallback_fct_0 = (uintptr_t)fct; return my_AudioCallback_0; } if(my_AudioCallback_fct_1 == 0) {my_AudioCallback_fct_1 = (uintptr_t)fct; return my_AudioCallback_1; } if(my_AudioCallback_fct_2 == 0) {my_AudioCallback_fct_2 = (uintptr_t)fct; return my_AudioCallback_2; } if(my_AudioCallback_fct_3 == 0) {my_AudioCallback_fct_3 = (uintptr_t)fct; return my_AudioCallback_3; } if(my_AudioCallback_fct_4 == 0) {my_AudioCallback_fct_4 = (uintptr_t)fct; return my_AudioCallback_4; }

    do {if((0)<=box86_log) {fprintf(ftrace, "Warning, no more slot for SDL2 AudioCallback callback\n"); fflush(ftrace);}} while(0);
    return 
# 152 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
          ((void *)0)
# 152 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
              ;

}







static uintptr_t my_eventfilter_fct_0 = 0; static int my_eventfilter_0(void* userdata, void* event) { return (int)RunFunctionFmt(my_eventfilter_fct_0, "pp", userdata, event); } static uintptr_t my_eventfilter_fct_1 = 0; static int my_eventfilter_1(void* userdata, void* event) { return (int)RunFunctionFmt(my_eventfilter_fct_1, "pp", userdata, event); } static uintptr_t my_eventfilter_fct_2 = 0; static int my_eventfilter_2(void* userdata, void* event) { return (int)RunFunctionFmt(my_eventfilter_fct_2, "pp", userdata, event); } static uintptr_t my_eventfilter_fct_3 = 0; static int my_eventfilter_3(void* userdata, void* event) { return (int)RunFunctionFmt(my_eventfilter_fct_3, "pp", userdata, event); } static uintptr_t my_eventfilter_fct_4 = 0; static int my_eventfilter_4(void* userdata, void* event) { return (int)RunFunctionFmt(my_eventfilter_fct_4, "pp", userdata, event); }

static void* find_eventfilter_Fct(void* fct)
{
    if(!fct) return 
# 166 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                   ((void *)0)
# 166 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                       ;
    void* p;
    if((p = GetNativeFnc((uintptr_t)fct))) return p;

    if(my_eventfilter_fct_0 == (uintptr_t)fct) return my_eventfilter_0; if(my_eventfilter_fct_1 == (uintptr_t)fct) return my_eventfilter_1; if(my_eventfilter_fct_2 == (uintptr_t)fct) return my_eventfilter_2; if(my_eventfilter_fct_3 == (uintptr_t)fct) return my_eventfilter_3; if(my_eventfilter_fct_4 == (uintptr_t)fct) return my_eventfilter_4;


    if(my_eventfilter_fct_0 == 0) {my_eventfilter_fct_0 = (uintptr_t)fct; return my_eventfilter_0; } if(my_eventfilter_fct_1 == 0) {my_eventfilter_fct_1 = (uintptr_t)fct; return my_eventfilter_1; } if(my_eventfilter_fct_2 == 0) {my_eventfilter_fct_2 = (uintptr_t)fct; return my_eventfilter_2; } if(my_eventfilter_fct_3 == 0) {my_eventfilter_fct_3 = (uintptr_t)fct; return my_eventfilter_3; } if(my_eventfilter_fct_4 == 0) {my_eventfilter_fct_4 = (uintptr_t)fct; return my_eventfilter_4; }

    do {if((0)<=box86_log) {fprintf(ftrace, "Warning, no more slot for SDL2 eventfilter callback\n"); fflush(ftrace);}} while(0);
    return 
# 176 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
          ((void *)0)
# 176 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
              ;

}
static void* reverse_eventfilter_Fct(void* fct)
{
    if(!fct) return fct;
    if(CheckBridged(my_lib->w.bridge, fct))
        return (void*)CheckBridged(my_lib->w.bridge, fct);

    if(my_eventfilter_0 == fct) return (void*)my_eventfilter_fct_0; if(my_eventfilter_1 == fct) return (void*)my_eventfilter_fct_1; if(my_eventfilter_2 == fct) return (void*)my_eventfilter_fct_2; if(my_eventfilter_3 == fct) return (void*)my_eventfilter_fct_3; if(my_eventfilter_4 == fct) return (void*)my_eventfilter_fct_4;

    return (void*)AddBridge(my_lib->w.bridge, iFpp, fct, 0, 
# 187 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                           ((void *)0)
# 187 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                               );
}
# 197 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
static uintptr_t my_LogOutput_fct_0 = 0; static void my_LogOutput_0(void* a, int b, int c, void* d) { RunFunctionFmt(my_LogOutput_fct_0, "piip", a, b, c, d); } static uintptr_t my_LogOutput_fct_1 = 0; static void my_LogOutput_1(void* a, int b, int c, void* d) { RunFunctionFmt(my_LogOutput_fct_1, "piip", a, b, c, d); } static uintptr_t my_LogOutput_fct_2 = 0; static void my_LogOutput_2(void* a, int b, int c, void* d) { RunFunctionFmt(my_LogOutput_fct_2, "piip", a, b, c, d); } static uintptr_t my_LogOutput_fct_3 = 0; static void my_LogOutput_3(void* a, int b, int c, void* d) { RunFunctionFmt(my_LogOutput_fct_3, "piip", a, b, c, d); } static uintptr_t my_LogOutput_fct_4 = 0; static void my_LogOutput_4(void* a, int b, int c, void* d) { RunFunctionFmt(my_LogOutput_fct_4, "piip", a, b, c, d); }

static void* find_LogOutput_Fct(void* fct)
{
    if(!fct) return fct;
    if(GetNativeFnc((uintptr_t)fct)) return GetNativeFnc((uintptr_t)fct);

    if(my_LogOutput_fct_0 == (uintptr_t)fct) return my_LogOutput_0; if(my_LogOutput_fct_1 == (uintptr_t)fct) return my_LogOutput_1; if(my_LogOutput_fct_2 == (uintptr_t)fct) return my_LogOutput_2; if(my_LogOutput_fct_3 == (uintptr_t)fct) return my_LogOutput_3; if(my_LogOutput_fct_4 == (uintptr_t)fct) return my_LogOutput_4;


    if(my_LogOutput_fct_0 == 0) {my_LogOutput_fct_0 = (uintptr_t)fct; return my_LogOutput_0; } if(my_LogOutput_fct_1 == 0) {my_LogOutput_fct_1 = (uintptr_t)fct; return my_LogOutput_1; } if(my_LogOutput_fct_2 == 0) {my_LogOutput_fct_2 = (uintptr_t)fct; return my_LogOutput_2; } if(my_LogOutput_fct_3 == 0) {my_LogOutput_fct_3 = (uintptr_t)fct; return my_LogOutput_3; } if(my_LogOutput_fct_4 == 0) {my_LogOutput_fct_4 = (uintptr_t)fct; return my_LogOutput_4; }

    do {if((0)<=box86_log) {fprintf(ftrace, "Warning, no more slot for SDL2 LogOutput callback\n"); fflush(ftrace);}} while(0);
    return 
# 210 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
          ((void *)0)
# 210 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
              ;
}
static void* reverse_LogOutput_Fct(void* fct)
{
    if(!fct) return fct;
    if(CheckBridged(my_lib->w.bridge, fct))
        return (void*)CheckBridged(my_lib->w.bridge, fct);

    if(my_LogOutput_0 == fct) return (void*)my_LogOutput_fct_0; if(my_LogOutput_1 == fct) return (void*)my_LogOutput_fct_1; if(my_LogOutput_2 == fct) return (void*)my_LogOutput_fct_2; if(my_LogOutput_3 == fct) return (void*)my_LogOutput_fct_3; if(my_LogOutput_4 == fct) return (void*)my_LogOutput_fct_4;

    return (void*)AddBridge(my_lib->w.bridge, vFpiip, fct, 0, 
# 220 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                             ((void *)0)
# 220 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                                 );
}




__attribute__((visibility("default"))) int32_t my2_SDL_OpenAudio(x86emu_t* emu, void* d, void* o)
{
    (void)emu;
    SDL2_AudioSpec *desired = (SDL2_AudioSpec*)d;


    void *fnc = (void*)desired->callback;
    desired->callback = find_AudioCallback_Fct(fnc);
    int ret = my->SDL_OpenAudio(desired, (SDL2_AudioSpec*)o);
    if (ret!=0) {

        desired->callback = fnc;
        return ret;
    }

    desired->callback = fnc;

    return ret;
}

__attribute__((visibility("default"))) int32_t my2_SDL_OpenAudioDevice(x86emu_t* emu, void* device, int32_t iscapture, void* d, void* o, int32_t allowed)
{
    (void)emu;
    SDL2_AudioSpec *desired = (SDL2_AudioSpec*)d;


    void *fnc = (void*)desired->callback;
    desired->callback = find_AudioCallback_Fct(fnc);
    int ret = my->SDL_OpenAudioDevice(device, iscapture, desired, (SDL2_AudioSpec*)o, allowed);
    if (ret<=0) {

        desired->callback = fnc;
        return ret;
    }

    desired->callback = fnc;

    return ret;
}

__attribute__((visibility("default"))) void *my2_SDL_LoadFile_RW(x86emu_t* emu, void* a, void* b, int c)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    void* r = my->SDL_LoadFile_RW(rw, b, c);
    if(c==0)
        RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) void *my2_SDL_LoadBMP_RW(x86emu_t* emu, void* a, int b)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    void* r = my->SDL_LoadBMP_RW(rw, b);
    if(b==0)
        RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) int32_t my2_SDL_SaveBMP_RW(x86emu_t* emu, void* a, void* b, int c)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    int32_t r = my->SDL_SaveBMP_RW(rw, b, c);
    if(c==0)
        RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) void *my2_SDL_LoadWAV_RW(x86emu_t* emu, void* a, int b, void* c, void* d, void* e)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    void* r = my->SDL_LoadWAV_RW(rw, b, c, d, e);
    if(b==0)
        RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) int32_t my2_SDL_GameControllerAddMappingsFromRW(x86emu_t* emu, void* a, int b)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    int32_t r = my->SDL_GameControllerAddMappingsFromRW(rw, b);
    if(b==0)
        RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_ReadU8(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_ReadU8(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_ReadBE16(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_ReadBE16(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_ReadBE32(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_ReadBE32(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint64_t my2_SDL_ReadBE64(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint64_t r = my->SDL_ReadBE64(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_ReadLE16(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_ReadLE16(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_ReadLE32(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_ReadLE32(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint64_t my2_SDL_ReadLE64(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint64_t r = my->SDL_ReadLE64(rw);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteU8(x86emu_t* emu, void* a, uint8_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteU8(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteBE16(x86emu_t* emu, void* a, uint16_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteBE16(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteBE32(x86emu_t* emu, void* a, uint32_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteBE32(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteBE64(x86emu_t* emu, void* a, uint64_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteBE64(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteLE16(x86emu_t* emu, void* a, uint16_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteLE16(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteLE32(x86emu_t* emu, void* a, uint32_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteLE32(rw, v);
    RWNativeEnd2(rw);
    return r;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_WriteLE64(x86emu_t* emu, void* a, uint64_t v)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t r = my->SDL_WriteLE64(rw, v);
    RWNativeEnd2(rw);
    return r;
}

__attribute__((visibility("default"))) void *my2_SDL_RWFromConstMem(x86emu_t* emu, void* a, int b)
{
    void* r = my->SDL_RWFromConstMem(a, b);
    return AddNativeRW2(emu, (SDL2_RWops_t*)r);
}
__attribute__((visibility("default"))) void *my2_SDL_RWFromFP(x86emu_t* emu, void* a, int b)
{
    void* r = my->SDL_RWFromFP(a, b);
    return AddNativeRW2(emu, (SDL2_RWops_t*)r);
}
__attribute__((visibility("default"))) void *my2_SDL_RWFromFile(x86emu_t* emu, void* a, void* b)
{
    void* r = my->SDL_RWFromFile(a, b);
    return AddNativeRW2(emu, (SDL2_RWops_t*)r);
}
__attribute__((visibility("default"))) void *my2_SDL_RWFromMem(x86emu_t* emu, void* a, int b)
{
    void* r = my->SDL_RWFromMem(a, b);
    return AddNativeRW2(emu, (SDL2_RWops_t*)r);
}

__attribute__((visibility("default"))) int64_t my2_SDL_RWseek(x86emu_t* emu, void* a, int64_t offset, int32_t whence)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    int64_t ret = RWNativeSeek2(rw, offset, whence);
    RWNativeEnd2(rw);
    return ret;
}
__attribute__((visibility("default"))) int64_t my2_SDL_RWsize(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    int64_t ret = my->SDL_RWsize(rw);
    RWNativeEnd2(rw);
    return ret;
}
__attribute__((visibility("default"))) int64_t my2_SDL_RWtell(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    int64_t ret = RWNativeSeek2(rw, 0, 1);
    RWNativeEnd2(rw);
    return ret;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_RWread(x86emu_t* emu, void* a, void* ptr, uint32_t size, uint32_t maxnum)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t ret = RWNativeRead2(rw, ptr, size, maxnum);
    RWNativeEnd2(rw);
    return ret;
}
__attribute__((visibility("default"))) uint32_t my2_SDL_RWwrite(x86emu_t* emu, void* a, const void* ptr, uint32_t size, uint32_t maxnum)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t ret = RWNativeWrite2(rw, ptr, size, maxnum);
    RWNativeEnd2(rw);
    return ret;
}
__attribute__((visibility("default"))) int my2_SDL_RWclose(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    return RWNativeClose2(rw);
}

__attribute__((visibility("default"))) int my2_SDL_SaveAllDollarTemplates(x86emu_t* emu, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t ret = my->SDL_SaveAllDollarTemplates(rw);
    RWNativeEnd2(rw);
    return ret;
}

__attribute__((visibility("default"))) int my2_SDL_SaveDollarTemplate(x86emu_t* emu, int gesture, void* a)
{
    SDL2_RWops_t *rw = RWNativeStart2(emu, (SDL2_RWops_t*)a);
    uint32_t ret = my->SDL_SaveDollarTemplate(gesture, rw);
    RWNativeEnd2(rw);
    return ret;
}

__attribute__((visibility("default"))) void *my2_SDL_AddTimer(x86emu_t* emu, uint32_t a, void* f, void* p)
{
    (void)emu;
    return my->SDL_AddTimer(a, find_Timer_Fct(f), p);
}

__attribute__((visibility("default"))) int my2_SDL_RemoveTimer(x86emu_t* emu, void *t)
{
    (void)emu;
    return my->SDL_RemoveTimer(t);
}

__attribute__((visibility("default"))) void my2_SDL_SetEventFilter(x86emu_t* emu, void* p, void* userdata)
{
    (void)emu;
    my->SDL_SetEventFilter(find_eventfilter_Fct(p), userdata);
}
__attribute__((visibility("default"))) int my2_SDL_GetEventFilter(x86emu_t* emu, void** f, void* userdata)
{
    (void)emu;
    int ret = my->SDL_GetEventFilter(f, userdata);
    *f = reverse_eventfilter_Fct(*f);
    return ret;
}

__attribute__((visibility("default"))) void my2_SDL_LogGetOutputFunction(x86emu_t* emu, void** f, void* arg)
{
    (void)emu;
    my->SDL_LogGetOutputFunction(f, arg);
    if(*f) *f = reverse_LogOutput_Fct(*f);
}
__attribute__((visibility("default"))) void my2_SDL_LogSetOutputFunction(x86emu_t* emu, void* f, void* arg)
{
    (void)emu;
    my->SDL_LogSetOutputFunction(find_LogOutput_Fct(f), arg);
}

__attribute__((visibility("default"))) int my2_SDL_vsnprintf(x86emu_t* emu, void* buff, uint32_t s, void * fmt, void * b) {







    (void)emu;
    return vsnprintf(buff, s, fmt, b);

}

__attribute__((visibility("default"))) void* my2_SDL_CreateThread(x86emu_t* emu, void* f, void* n, void* p)
{
    void* et = 
# 535 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
              ((void *)0)
# 535 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                  ;
    return my->SDL_CreateThread(my_prepare_thread(emu, f, p, 0, &et), n, et);
}

__attribute__((visibility("default"))) int my2_SDL_snprintf(x86emu_t* emu, void* buff, uint32_t s, void * fmt, void * b) {







    (void)emu;
    return vsnprintf((char*)buff, s, (char*)fmt, b);

}

static int get_sdl_priv(x86emu_t* emu, const char *sym_str, void **w, void **f)
{
# 578 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
    if(0);
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
else if (strcmp("SDL_abs", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_abs"); return *f != 
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_acos", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_acos"); return *f != 
# 11 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 11 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_acosf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_acosf"); return *f != 
# 12 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 12 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AddEventWatch", sym_str) == 0) { *w = vFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_AddEventWatch"); return *f != 
# 13 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 13 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_AddTimer", sym_str) == 0) { *w = pFEupp; *f = dlsym(emu->context->box86lib, "my2_""SDL_AddTimer"); return *f != 
# 15 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 15 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AllocFormat", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AllocFormat"); return *f != 
# 16 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 16 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AllocPalette", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AllocPalette"); return *f != 
# 17 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 17 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AllocRW", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AllocRW"); return *f != 
# 18 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 18 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_asin", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_asin"); return *f != 
# 19 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 19 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_asinf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_asinf"); return *f != 
# 20 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 20 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atan", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atan"); return *f != 
# 21 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 21 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atan2", sym_str) == 0) { *w = dFdd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atan2"); return *f != 
# 22 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 22 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atan2f", sym_str) == 0) { *w = fFff; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atan2f"); return *f != 
# 23 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 23 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atanf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atanf"); return *f != 
# 24 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 24 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atof", sym_str) == 0) { *w = dFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atof"); return *f != 
# 25 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 25 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_atoi", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_atoi"); return *f != 
# 26 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 26 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicAdd", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicAdd"); return *f != 
# 27 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 27 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicCAS", sym_str) == 0) { *w = iFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicCAS"); return *f != 
# 28 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 28 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicCASPtr", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicCASPtr"); return *f != 
# 29 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 29 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicGet", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicGet"); return *f != 
# 30 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 30 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicGetPtr", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicGetPtr"); return *f != 
# 31 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 31 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicLock", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicLock"); return *f != 
# 32 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 32 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicSet", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicSet"); return *f != 
# 33 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 33 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicSetPtr", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicSetPtr"); return *f != 
# 34 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 34 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicTryLock", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicTryLock"); return *f != 
# 35 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 35 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AtomicUnlock", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AtomicUnlock"); return *f != 
# 36 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 36 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioInit", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioInit"); return *f != 
# 37 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 37 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioQuit", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioQuit"); return *f != 
# 38 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 38 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioStreamAvailable", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioStreamAvailable"); return *f != 
# 39 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 39 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioStreamClear", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioStreamClear"); return *f != 
# 40 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 40 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioStreamFlush", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioStreamFlush"); return *f != 
# 41 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 41 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioStreamGet", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioStreamGet"); return *f != 
# 42 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 42 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_AudioStreamPut", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_AudioStreamPut"); return *f != 
# 43 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 43 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_BuildAudioCVT", sym_str) == 0) { *w = iFpuuiuui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_BuildAudioCVT"); return *f != 
# 44 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 44 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CalculateGammaRamp", sym_str) == 0) { *w = vFfp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CalculateGammaRamp"); return *f != 
# 45 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 45 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_calloc", sym_str) == 0) { *w = pFuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_calloc"); return *f != 
# 46 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 46 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CaptureMouse", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CaptureMouse"); return *f != 
# 47 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 47 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ceil", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ceil"); return *f != 
# 48 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 48 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ceilf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ceilf"); return *f != 
# 49 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 49 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ClearError", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ClearError"); return *f != 
# 50 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 50 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ClearHints", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ClearHints"); return *f != 
# 51 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 51 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ClearQueuedAudio", sym_str) == 0) { *w = vFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ClearQueuedAudio"); return *f != 
# 52 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 52 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CloseAudio", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CloseAudio"); return *f != 
# 53 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 53 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CloseAudioDevice", sym_str) == 0) { *w = vFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CloseAudioDevice"); return *f != 
# 54 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 54 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ComposeCustomBlendMode", sym_str) == 0) { *w = iFiiiiii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ComposeCustomBlendMode"); return *f != 
# 55 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 55 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CondBroadcast", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CondBroadcast"); return *f != 
# 56 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 56 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CondSignal", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CondSignal"); return *f != 
# 57 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 57 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CondWait", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CondWait"); return *f != 
# 58 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 58 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CondWaitTimeout", sym_str) == 0) { *w = iFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CondWaitTimeout"); return *f != 
# 59 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 59 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ConvertAudio", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ConvertAudio"); return *f != 
# 60 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 60 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ConvertPixels", sym_str) == 0) { *w = iFiiupiupi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ConvertPixels"); return *f != 
# 61 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 61 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ConvertSurface", sym_str) == 0) { *w = pFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ConvertSurface"); return *f != 
# 62 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 62 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ConvertSurfaceFormat", sym_str) == 0) { *w = pFpuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ConvertSurfaceFormat"); return *f != 
# 63 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 63 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_copysign", sym_str) == 0) { *w = dFdd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_copysign"); return *f != 
# 64 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 64 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_copysignf", sym_str) == 0) { *w = fFff; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_copysignf"); return *f != 
# 65 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 65 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_cos", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_cos"); return *f != 
# 66 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 66 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_cosf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_cosf"); return *f != 
# 67 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 67 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateColorCursor", sym_str) == 0) { *w = pFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateColorCursor"); return *f != 
# 68 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 68 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateCond", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateCond"); return *f != 
# 69 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 69 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateCursor", sym_str) == 0) { *w = pFppiiii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateCursor"); return *f != 
# 70 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 70 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateMutex", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateMutex"); return *f != 
# 71 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 71 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateRenderer", sym_str) == 0) { *w = pFpiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateRenderer"); return *f != 
# 72 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 72 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateRGBSurface", sym_str) == 0) { *w = pFuiiiuuuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateRGBSurface"); return *f != 
# 73 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 73 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateRGBSurfaceFrom", sym_str) == 0) { *w = pFpiiiiuuuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateRGBSurfaceFrom"); return *f != 
# 74 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 74 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateRGBSurfaceWithFormat", sym_str) == 0) { *w = pFuiiiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateRGBSurfaceWithFormat"); return *f != 
# 75 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 75 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateRGBSurfaceWithFormatFrom", sym_str) == 0) { *w = pFpiiiiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateRGBSurfaceWithFormatFrom"); return *f != 
# 76 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 76 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateSemaphore", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateSemaphore"); return *f != 
# 77 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 77 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateShapedWindow", sym_str) == 0) { *w = pFpuuuuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateShapedWindow"); return *f != 
# 78 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 78 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateSoftwareRenderer", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateSoftwareRenderer"); return *f != 
# 79 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 79 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateSystemCursor", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateSystemCursor"); return *f != 
# 80 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 80 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateTexture", sym_str) == 0) { *w = pFpuiii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateTexture"); return *f != 
# 81 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 81 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateTextureFromSurface", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateTextureFromSurface"); return *f != 
# 82 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 82 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateThread", sym_str) == 0) { *w = pFEppp; *f = dlsym(emu->context->box86lib, "my2_""SDL_CreateThread"); return *f != 
# 83 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 83 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_CreateWindow", sym_str) == 0) { *w = pFEpiiiiu; *f = dlsym(emu->context->box86lib, "my2_""SDL_CreateWindow"); return *f != 
# 85 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 85 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateWindowAndRenderer", sym_str) == 0) { *w = iFiiupp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateWindowAndRenderer"); return *f != 
# 86 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 86 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_CreateWindowFrom", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_CreateWindowFrom"); return *f != 
# 87 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 87 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Delay", sym_str) == 0) { *w = vFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Delay"); return *f != 
# 88 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 88 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DelEventWatch", sym_str) == 0) { *w = vFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_DelEventWatch"); return *f != 
# 89 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 89 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_DequeueAudio", sym_str) == 0) { *w = uFupu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DequeueAudio"); return *f != 
# 91 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 91 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroyCond", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroyCond"); return *f != 
# 92 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 92 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroyMutex", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroyMutex"); return *f != 
# 93 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 93 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroyRenderer", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroyRenderer"); return *f != 
# 94 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 94 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroySemaphore", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroySemaphore"); return *f != 
# 95 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 95 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroyTexture", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroyTexture"); return *f != 
# 96 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 96 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DestroyWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DestroyWindow"); return *f != 
# 97 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 97 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DetachThread", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DetachThread"); return *f != 
# 98 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 98 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DisableScreenSaver", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DisableScreenSaver"); return *f != 
# 99 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 99 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DuplicateSurface", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_DuplicateSurface"); return *f != 
# 100 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 100 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_DYNAPI_entry", sym_str) == 0) { *w = iFEupu; *f = dlsym(emu->context->box86lib, "my2_""SDL_DYNAPI_entry"); return *f != 
# 101 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 101 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_EnableScreenSaver", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_EnableScreenSaver"); return *f != 
# 102 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 102 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_EnclosePoints", sym_str) == 0) { *w = iFpipp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_EnclosePoints"); return *f != 
# 103 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 103 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Error", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Error"); return *f != 
# 104 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 104 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_EventState", sym_str) == 0) { *w = CFui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_EventState"); return *f != 
# 105 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 105 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_exp", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_exp"); return *f != 
# 106 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 106 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_expf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_expf"); return *f != 
# 107 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 107 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_fabs", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_fabs"); return *f != 
# 108 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 108 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_fabsf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_fabsf"); return *f != 
# 109 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 109 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FillRect", sym_str) == 0) { *w = iFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FillRect"); return *f != 
# 110 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 110 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FillRects", sym_str) == 0) { *w = iFppiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FillRects"); return *f != 
# 111 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 111 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_floor", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_floor"); return *f != 
# 113 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 113 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_floorf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_floorf"); return *f != 
# 114 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 114 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FlushEvent", sym_str) == 0) { *w = vFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FlushEvent"); return *f != 
# 115 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 115 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FlushEvents", sym_str) == 0) { *w = vFuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FlushEvents"); return *f != 
# 116 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 116 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_fmod", sym_str) == 0) { *w = dFdd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_fmod"); return *f != 
# 117 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 117 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_fmodf", sym_str) == 0) { *w = fFff; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_fmodf"); return *f != 
# 118 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 118 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_free", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_free"); return *f != 
# 119 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 119 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeAudioStream", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeAudioStream"); return *f != 
# 120 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 120 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeCursor", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeCursor"); return *f != 
# 121 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 121 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeFormat", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeFormat"); return *f != 
# 122 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 122 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreePalette", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreePalette"); return *f != 
# 123 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 123 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeRW", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeRW"); return *f != 
# 124 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 124 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeSurface", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeSurface"); return *f != 
# 125 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 125 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_FreeWAV", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_FreeWAV"); return *f != 
# 126 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 126 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerAddMapping", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerAddMapping"); return *f != 
# 127 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 127 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerAddMappingsFromRW", sym_str) == 0) { *w = iFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_GameControllerAddMappingsFromRW"); return *f != 
# 128 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 128 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerClose", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerClose"); return *f != 
# 129 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 129 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerEventState", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerEventState"); return *f != 
# 130 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 130 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerFromInstanceID", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerFromInstanceID"); return *f != 
# 131 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 131 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetAttached", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetAttached"); return *f != 
# 132 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 132 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetAxis", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetAxis"); return *f != 
# 133 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 133 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetAxisFromString", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetAxisFromString"); return *f != 
# 134 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 134 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetBindForAxis", sym_str) == 0) { *w = pFEppi; *f = dlsym(emu->context->box86lib, "my2_""SDL_GameControllerGetBindForAxis"); return *f != 
# 135 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 135 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetBindForButton", sym_str) == 0) { *w = pFEppi; *f = dlsym(emu->context->box86lib, "my2_""SDL_GameControllerGetBindForButton"); return *f != 
# 136 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 136 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetButton", sym_str) == 0) { *w = uFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetButton"); return *f != 
# 137 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 137 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetButtonFromString", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetButtonFromString"); return *f != 
# 138 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 138 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetJoystick", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetJoystick"); return *f != 
# 139 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 139 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetPlayerIndex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetPlayerIndex"); return *f != 
# 140 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 140 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetProduct", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetProduct"); return *f != 
# 141 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 141 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetProductVersion", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetProductVersion"); return *f != 
# 142 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 142 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetSerial", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetSerial"); return *f != 
# 143 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 143 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetStringForAxis", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetStringForAxis"); return *f != 
# 144 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 144 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetStringForButton", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetStringForButton"); return *f != 
# 145 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 145 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetType", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetType"); return *f != 
# 146 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 146 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerGetVendor", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerGetVendor"); return *f != 
# 147 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 147 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerHasLED", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerHasLED"); return *f != 
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerHasSensor", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerHasSensor"); return *f != 
# 149 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 149 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerMapping", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerMapping"); return *f != 
# 150 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 150 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerMappingForDeviceIndex", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerMappingForDeviceIndex"); return *f != 
# 151 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 151 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerMappingForGUID", sym_str) == 0) { *w = pFuuuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerMappingForGUID"); return *f != 
# 152 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 152 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerMappingForIndex", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerMappingForIndex"); return *f != 
# 153 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 153 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerName", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerName"); return *f != 
# 154 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 154 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerNameForIndex", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerNameForIndex"); return *f != 
# 155 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 155 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerNumMappings", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerNumMappings"); return *f != 
# 156 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 156 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerOpen", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerOpen"); return *f != 
# 157 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 157 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerRumble", sym_str) == 0) { *w = iFpWWu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerRumble"); return *f != 
# 158 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 158 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerRumbleTriggers", sym_str) == 0) { *w = iFpWWu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerRumbleTriggers"); return *f != 
# 159 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 159 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerSetLED", sym_str) == 0) { *w = iFpCCC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerSetLED"); return *f != 
# 160 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 160 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerSetPlayerIndex", sym_str) == 0) { *w = vFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerSetPlayerIndex"); return *f != 
# 161 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 161 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerSetSensorEnabled", sym_str) == 0) { *w = iFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerSetSensorEnabled"); return *f != 
# 162 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 162 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerTypeForIndex", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerTypeForIndex"); return *f != 
# 163 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 163 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GameControllerUpdate", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GameControllerUpdate"); return *f != 
# 164 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 164 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_GetAssertionReport", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetAssertionReport"); return *f != 
# 166 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 166 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetAudioDeviceName", sym_str) == 0) { *w = pFii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetAudioDeviceName"); return *f != 
# 167 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 167 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetAudioDeviceStatus", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetAudioDeviceStatus"); return *f != 
# 168 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 168 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetAudioDriver", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetAudioDriver"); return *f != 
# 169 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 169 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetAudioStatus", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetAudioStatus"); return *f != 
# 170 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 170 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetBasePath", sym_str) == 0) { *w = pFEv; *f = dlsym(emu->context->box86lib, "my2_""SDL_GetBasePath"); return *f != 
# 171 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 171 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetClipboardText", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetClipboardText"); return *f != 
# 172 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 172 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetClipRect", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetClipRect"); return *f != 
# 173 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 173 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetClosestDisplayMode", sym_str) == 0) { *w = pFipp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetClosestDisplayMode"); return *f != 
# 174 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 174 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetColorKey", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetColorKey"); return *f != 
# 175 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 175 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCPUCacheLineSize", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCPUCacheLineSize"); return *f != 
# 176 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 176 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCPUCount", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCPUCount"); return *f != 
# 177 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 177 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCurrentAudioDriver", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCurrentAudioDriver"); return *f != 
# 178 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 178 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCurrentDisplayMode", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCurrentDisplayMode"); return *f != 
# 179 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 179 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCurrentVideoDriver", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCurrentVideoDriver"); return *f != 
# 180 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 180 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetCursor", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetCursor"); return *f != 
# 181 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 181 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_GetDefaultCursor", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDefaultCursor"); return *f != 
# 183 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 183 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDesktopDisplayMode", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDesktopDisplayMode"); return *f != 
# 184 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 184 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayBounds", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayBounds"); return *f != 
# 185 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 185 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayDPI", sym_str) == 0) { *w = iFippp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayDPI"); return *f != 
# 186 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 186 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayMode", sym_str) == 0) { *w = iFiip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayMode"); return *f != 
# 187 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 187 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayName", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayName"); return *f != 
# 188 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 188 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayOrientation", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayOrientation"); return *f != 
# 189 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 189 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetDisplayUsableBounds", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetDisplayUsableBounds"); return *f != 
# 190 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 190 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_getenv", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_getenv"); return *f != 
# 191 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 191 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetError", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetError"); return *f != 
# 192 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 192 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetEventFilter", sym_str) == 0) { *w = iFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_GetEventFilter"); return *f != 
# 193 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 193 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetGlobalMouseState", sym_str) == 0) { *w = uFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetGlobalMouseState"); return *f != 
# 194 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 194 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetGrabbedWindow", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetGrabbedWindow"); return *f != 
# 195 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 195 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetHint", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetHint"); return *f != 
# 196 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 196 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetHintBoolean", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetHintBoolean"); return *f != 
# 197 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 197 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetJoystickGUIDInfo", sym_str) == 0) { *w = vFEuuuupppp; *f = dlsym(emu->context->box86lib, "my2_""SDL_GetJoystickGUIDInfo"); return *f != 
# 198 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 198 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetKeyboardFocus", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetKeyboardFocus"); return *f != 
# 199 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 199 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetKeyboardState", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetKeyboardState"); return *f != 
# 200 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 200 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetKeyFromName", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetKeyFromName"); return *f != 
# 201 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 201 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetKeyFromScancode", sym_str) == 0) { *w = uFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetKeyFromScancode"); return *f != 
# 202 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 202 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetKeyName", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetKeyName"); return *f != 
# 203 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 203 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetMemoryFunctions", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetMemoryFunctions"); return *f != 
# 204 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 204 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetModState", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetModState"); return *f != 
# 205 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 205 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetMouseFocus", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetMouseFocus"); return *f != 
# 206 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 206 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetMouseState", sym_str) == 0) { *w = uFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetMouseState"); return *f != 
# 207 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 207 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumAllocations", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumAllocations"); return *f != 
# 208 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 208 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumAudioDevices", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumAudioDevices"); return *f != 
# 209 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 209 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumAudioDrivers", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumAudioDrivers"); return *f != 
# 210 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 210 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumDisplayModes", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumDisplayModes"); return *f != 
# 211 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 211 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumRenderDrivers", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumRenderDrivers"); return *f != 
# 212 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 212 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumTouchDevices", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumTouchDevices"); return *f != 
# 213 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 213 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumTouchFingers", sym_str) == 0) { *w = iFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumTouchFingers"); return *f != 
# 214 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 214 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumVideoDisplays", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumVideoDisplays"); return *f != 
# 215 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 215 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetNumVideoDrivers", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetNumVideoDrivers"); return *f != 
# 216 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 216 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPerformanceCounter", sym_str) == 0) { *w = UFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPerformanceCounter"); return *f != 
# 217 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 217 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPerformanceFrequency", sym_str) == 0) { *w = UFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPerformanceFrequency"); return *f != 
# 218 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 218 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPixelFormatName", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPixelFormatName"); return *f != 
# 219 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 219 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPlatform", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPlatform"); return *f != 
# 220 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 220 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPreferredLocales", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPreferredLocales"); return *f != 
# 221 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 221 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPowerInfo", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPowerInfo"); return *f != 
# 222 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 222 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetPrefPath", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetPrefPath"); return *f != 
# 223 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 223 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetQueuedAudioSize", sym_str) == 0) { *w = uFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetQueuedAudioSize"); return *f != 
# 224 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 224 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRelativeMouseMode", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRelativeMouseMode"); return *f != 
# 225 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 225 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRelativeMouseState", sym_str) == 0) { *w = uFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRelativeMouseState"); return *f != 
# 226 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 226 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRenderDrawBlendMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRenderDrawBlendMode"); return *f != 
# 227 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 227 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRenderDrawColor", sym_str) == 0) { *w = iFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRenderDrawColor"); return *f != 
# 228 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 228 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRenderDriverInfo", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRenderDriverInfo"); return *f != 
# 229 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 229 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRenderer", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRenderer"); return *f != 
# 230 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 230 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRendererInfo", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRendererInfo"); return *f != 
# 231 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 231 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRendererOutputSize", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRendererOutputSize"); return *f != 
# 232 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 232 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRenderTarget", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRenderTarget"); return *f != 
# 233 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 233 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRevision", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRevision"); return *f != 
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRevisionNumber", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRevisionNumber"); return *f != 
# 235 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 235 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRGB", sym_str) == 0) { *w = vFupppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRGB"); return *f != 
# 236 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 236 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetRGBA", sym_str) == 0) { *w = vFuppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetRGBA"); return *f != 
# 237 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 237 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetScancodeFromKey", sym_str) == 0) { *w = uFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetScancodeFromKey"); return *f != 
# 238 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 238 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetScancodeFromName", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetScancodeFromName"); return *f != 
# 239 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 239 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetScancodeName", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetScancodeName"); return *f != 
# 240 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 240 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetShapedWindowMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetShapedWindowMode"); return *f != 
# 241 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 241 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetSurfaceAlphaMod", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetSurfaceAlphaMod"); return *f != 
# 242 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 242 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetSurfaceBlendMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetSurfaceBlendMode"); return *f != 
# 243 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 243 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetSurfaceColorMod", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetSurfaceColorMod"); return *f != 
# 244 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 244 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetSystemRAM", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetSystemRAM"); return *f != 
# 245 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 245 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTextureAlphaMod", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTextureAlphaMod"); return *f != 
# 246 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 246 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTextureBlendMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTextureBlendMode"); return *f != 
# 247 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 247 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTextureColorMod", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTextureColorMod"); return *f != 
# 248 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 248 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetThreadID", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetThreadID"); return *f != 
# 249 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 249 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetThreadName", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetThreadName"); return *f != 
# 250 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 250 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTicks", sym_str) == 0) { *w = uFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTicks"); return *f != 
# 251 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 251 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTouchDevice", sym_str) == 0) { *w = uFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTouchDevice"); return *f != 
# 252 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 252 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTouchDeviceType", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTouchDeviceType"); return *f != 
# 253 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 253 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetTouchFinger", sym_str) == 0) { *w = pFui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetTouchFinger"); return *f != 
# 254 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 254 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetVersion", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetVersion"); return *f != 
# 255 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 255 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetVideoDriver", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetVideoDriver"); return *f != 
# 256 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 256 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowBordersSize", sym_str) == 0) { *w = iFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowBordersSize"); return *f != 
# 257 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 257 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowBrightness", sym_str) == 0) { *w = fFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowBrightness"); return *f != 
# 258 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 258 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowData", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowData"); return *f != 
# 259 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 259 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowDisplayIndex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowDisplayIndex"); return *f != 
# 260 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 260 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowDisplayMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowDisplayMode"); return *f != 
# 261 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 261 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowFlags", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowFlags"); return *f != 
# 262 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 262 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowFromID", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowFromID"); return *f != 
# 263 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 263 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowGammaRamp", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowGammaRamp"); return *f != 
# 264 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 264 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowGrab", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowGrab"); return *f != 
# 265 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 265 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowID", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowID"); return *f != 
# 266 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 266 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowMaximumSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowMaximumSize"); return *f != 
# 267 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 267 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowMinimumSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowMinimumSize"); return *f != 
# 268 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 268 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowOpacity", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowOpacity"); return *f != 
# 269 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 269 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowPixelFormat", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowPixelFormat"); return *f != 
# 270 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 270 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowPosition", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowPosition"); return *f != 
# 271 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 271 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowSize"); return *f != 
# 272 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 272 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowSurface", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowSurface"); return *f != 
# 273 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 273 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowTitle", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowTitle"); return *f != 
# 274 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 274 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetWindowWMInfo", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetWindowWMInfo"); return *f != 
# 275 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 275 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetYUVConversionMode", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetYUVConversionMode"); return *f != 
# 276 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 276 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GetYUVConversionModeForResolution", sym_str) == 0) { *w = iFii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GetYUVConversionModeForResolution"); return *f != 
# 277 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 277 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_BindTexture", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_BindTexture"); return *f != 
# 278 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 278 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_CreateContext", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_CreateContext"); return *f != 
# 279 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 279 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_DeleteContext", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_DeleteContext"); return *f != 
# 280 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 280 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_ExtensionSupported", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_ExtensionSupported"); return *f != 
# 281 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 281 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetAttribute", sym_str) == 0) { *w = iFup; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_GetAttribute"); return *f != 
# 282 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 282 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetCurrentContext", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_GetCurrentContext"); return *f != 
# 283 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 283 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetCurrentWindow", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_GetCurrentWindow"); return *f != 
# 284 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 284 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetDrawableSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_GetDrawableSize"); return *f != 
# 285 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 285 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetProcAddress", sym_str) == 0) { *w = pFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_GL_GetProcAddress"); return *f != 
# 286 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 286 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_GetSwapInterval", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_GetSwapInterval"); return *f != 
# 287 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 287 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_LoadLibrary", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_LoadLibrary"); return *f != 
# 288 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 288 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_MakeCurrent", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_MakeCurrent"); return *f != 
# 289 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 289 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_ResetAttributes", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_ResetAttributes"); return *f != 
# 290 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 290 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_SetAttribute", sym_str) == 0) { *w = iFui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_SetAttribute"); return *f != 
# 291 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 291 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_SetSwapInterval", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_SetSwapInterval"); return *f != 
# 292 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 292 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_SwapWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_SwapWindow"); return *f != 
# 293 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 293 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_UnbindTexture", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_UnbindTexture"); return *f != 
# 294 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 294 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_GL_UnloadLibrary", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_UnloadLibrary"); return *f != 
# 295 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 295 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticClose", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticClose"); return *f != 
# 296 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 296 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticDestroyEffect", sym_str) == 0) { *w = vFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticDestroyEffect"); return *f != 
# 297 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 297 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticEffectSupported", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticEffectSupported"); return *f != 
# 298 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 298 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticGetEffectStatus", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticGetEffectStatus"); return *f != 
# 299 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 299 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticIndex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticIndex"); return *f != 
# 300 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 300 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticName", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticName"); return *f != 
# 301 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 301 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticNewEffect", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticNewEffect"); return *f != 
# 302 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 302 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticNumAxes", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticNumAxes"); return *f != 
# 303 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 303 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticNumEffects", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticNumEffects"); return *f != 
# 304 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 304 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticNumEffectsPlaying", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticNumEffectsPlaying"); return *f != 
# 305 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 305 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticOpen", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticOpen"); return *f != 
# 306 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 306 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticOpened", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticOpened"); return *f != 
# 307 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 307 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticOpenFromJoystick", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticOpenFromJoystick"); return *f != 
# 308 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 308 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticOpenFromMouse", sym_str) == 0) { *w = pFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticOpenFromMouse"); return *f != 
# 309 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 309 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticPause", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticPause"); return *f != 
# 310 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 310 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticQuery", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticQuery"); return *f != 
# 311 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 311 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticRumbleInit", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticRumbleInit"); return *f != 
# 312 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 312 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticRumblePlay", sym_str) == 0) { *w = iFpfu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticRumblePlay"); return *f != 
# 313 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 313 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticRumbleStop", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticRumbleStop"); return *f != 
# 314 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 314 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticRumbleSupported", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticRumbleSupported"); return *f != 
# 315 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 315 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticRunEffect", sym_str) == 0) { *w = iFpiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticRunEffect"); return *f != 
# 316 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 316 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticSetAutocenter", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticSetAutocenter"); return *f != 
# 317 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 317 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticSetGain", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticSetGain"); return *f != 
# 318 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 318 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticStopAll", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticStopAll"); return *f != 
# 319 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 319 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticStopEffect", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticStopEffect"); return *f != 
# 320 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 320 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticUnpause", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticUnpause"); return *f != 
# 321 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 321 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HapticUpdateEffect", sym_str) == 0) { *w = iFpip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HapticUpdateEffect"); return *f != 
# 322 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 322 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Has3DNow", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_Has3DNow"); return *f != 
# 323 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 323 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasAltiVec", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasAltiVec"); return *f != 
# 324 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 324 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasAVX", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasAVX"); return *f != 
# 325 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 325 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasAVX2", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasAVX2"); return *f != 
# 326 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 326 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasAVX512F", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasAVX512F"); return *f != 
# 327 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 327 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasClipboardText", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasClipboardText"); return *f != 
# 328 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 328 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasColorKey", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasColorKey"); return *f != 
# 329 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 329 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasEvent", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasEvent"); return *f != 
# 330 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 330 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasEvents", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasEvents"); return *f != 
# 331 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 331 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasIntersection", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasIntersection"); return *f != 
# 332 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 332 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasMMX", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasMMX"); return *f != 
# 333 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 333 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasNEON", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasNEON"); return *f != 
# 334 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 334 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasRDTSC", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasRDTSC"); return *f != 
# 335 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 335 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasScreenKeyboardSupport", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HasScreenKeyboardSupport"); return *f != 
# 336 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 336 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasSSE", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasSSE"); return *f != 
# 337 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 337 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasSSE2", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasSSE2"); return *f != 
# 338 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 338 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasSSE3", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasSSE3"); return *f != 
# 339 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 339 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasSSE41", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasSSE41"); return *f != 
# 340 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 340 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HasSSE42", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->box86lib, "my2_""SDL_HasSSE42"); return *f != 
# 341 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 341 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_HideWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_HideWindow"); return *f != 
# 342 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 342 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_iconv", sym_str) == 0) { *w = LFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_iconv"); return *f != 
# 343 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 343 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_iconv_close", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_iconv_close"); return *f != 
# 344 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 344 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_iconv_open", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_iconv_open"); return *f != 
# 345 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 345 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_iconv_string", sym_str) == 0) { *w = pFpppL; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_iconv_string"); return *f != 
# 346 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 346 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Init", sym_str) == 0) { *w = iFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Init"); return *f != 
# 347 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 347 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_InitSubSystem", sym_str) == 0) { *w = iFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_InitSubSystem"); return *f != 
# 348 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 348 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IntersectRect", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IntersectRect"); return *f != 
# 349 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 349 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IntersectRectAndLine", sym_str) == 0) { *w = iFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IntersectRectAndLine"); return *f != 
# 350 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 350 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_isdigit", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_isdigit"); return *f != 
# 351 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 351 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsGameController", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsGameController"); return *f != 
# 352 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 352 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsScreenKeyboardShown", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsScreenKeyboardShown"); return *f != 
# 353 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 353 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsScreenSaverEnabled", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsScreenSaverEnabled"); return *f != 
# 354 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 354 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsShapedWindow", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsShapedWindow"); return *f != 
# 355 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 355 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_isspace", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_isspace"); return *f != 
# 356 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 356 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsTablet", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsTablet"); return *f != 
# 357 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 357 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsTextInputActive", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_IsTextInputActive"); return *f != 
# 358 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 358 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_itoa", sym_str) == 0) { *w = pFipi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_itoa"); return *f != 
# 359 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 359 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickClose", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickClose"); return *f != 
# 360 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 360 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickCurrentPowerLevel", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickCurrentPowerLevel"); return *f != 
# 361 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 361 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickEventState", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickEventState"); return *f != 
# 362 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 362 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickFromInstanceID", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickFromInstanceID"); return *f != 
# 363 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 363 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetAttached", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetAttached"); return *f != 
# 364 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 364 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetAxis", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetAxis"); return *f != 
# 365 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 365 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetAxisInitialState", sym_str) == 0) { *w = iFpip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetAxisInitialState"); return *f != 
# 366 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 366 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetBall", sym_str) == 0) { *w = iFpipp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetBall"); return *f != 
# 367 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 367 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetButton", sym_str) == 0) { *w = CFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetButton"); return *f != 
# 368 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 368 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceGUID", sym_str) == 0) { *w = pFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_JoystickGetDeviceGUID"); return *f != 
# 369 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 369 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceInstanceID", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDeviceInstanceID"); return *f != 
# 370 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 370 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDevicePlayerIndex", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDevicePlayerIndex"); return *f != 
# 371 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 371 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceProduct", sym_str) == 0) { *w = WFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDeviceProduct"); return *f != 
# 372 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 372 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceProductVersion", sym_str) == 0) { *w = WFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDeviceProductVersion"); return *f != 
# 373 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 373 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceType", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDeviceType"); return *f != 
# 374 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 374 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetDeviceVendor", sym_str) == 0) { *w = WFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetDeviceVendor"); return *f != 
# 375 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 375 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetGUID", sym_str) == 0) { *w = pFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_JoystickGetGUID"); return *f != 
# 376 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 376 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetGUIDFromString", sym_str) == 0) { *w = pFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_JoystickGetGUIDFromString"); return *f != 
# 377 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 377 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetGUIDString", sym_str) == 0) { *w = vFUUpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetGUIDString"); return *f != 
# 378 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 378 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetHat", sym_str) == 0) { *w = CFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetHat"); return *f != 
# 379 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 379 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetPlayerIndex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetPlayerIndex"); return *f != 
# 380 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 380 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetProduct", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetProduct"); return *f != 
# 381 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 381 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetProductVersion", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetProductVersion"); return *f != 
# 382 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 382 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetSerial", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetSerial"); return *f != 
# 383 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 383 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetType", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetType"); return *f != 
# 384 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 384 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickGetVendor", sym_str) == 0) { *w = WFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickGetVendor"); return *f != 
# 385 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 385 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickInstanceID", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickInstanceID"); return *f != 
# 386 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 386 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickIsHaptic", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickIsHaptic"); return *f != 
# 387 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 387 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickName", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickName"); return *f != 
# 388 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 388 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickNameForIndex", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickNameForIndex"); return *f != 
# 389 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 389 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickNumAxes", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickNumAxes"); return *f != 
# 390 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 390 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickNumBalls", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickNumBalls"); return *f != 
# 391 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 391 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickNumButtons", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickNumButtons"); return *f != 
# 392 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 392 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickNumHats", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickNumHats"); return *f != 
# 393 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 393 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickOpen", sym_str) == 0) { *w = pFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickOpen"); return *f != 
# 394 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 394 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickRumble", sym_str) == 0) { *w = iFpWWu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickRumble"); return *f != 
# 395 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 395 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickRumbleTriggers", sym_str) == 0) { *w = iFpWWu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickRumbleTriggers"); return *f != 
# 396 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 396 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_JoystickUpdate", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_JoystickUpdate"); return *f != 
# 397 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 397 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LinuxSetThreadPriority", sym_str) == 0) { *w = iFIi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LinuxSetThreadPriority"); return *f != 
# 398 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 398 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_lltoa", sym_str) == 0) { *w = pFIpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_lltoa"); return *f != 
# 399 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 399 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadBMP_RW", sym_str) == 0) { *w = pFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_LoadBMP_RW"); return *f != 
# 400 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 400 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadDollarTemplates", sym_str) == 0) { *w = iFip; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LoadDollarTemplates"); return *f != 
# 401 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 401 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadFile_RW", sym_str) == 0) { *w = pFEppi; *f = dlsym(emu->context->box86lib, "my2_""SDL_LoadFile_RW"); return *f != 
# 402 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 402 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadFunction", sym_str) == 0) { *w = pFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_LoadFunction"); return *f != 
# 403 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 403 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadObject", sym_str) == 0) { *w = pFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_LoadObject"); return *f != 
# 404 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 404 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LoadWAV_RW", sym_str) == 0) { *w = pFEpippp; *f = dlsym(emu->context->box86lib, "my2_""SDL_LoadWAV_RW"); return *f != 
# 405 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 405 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockAudio", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockAudio"); return *f != 
# 406 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 406 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockAudioDevice", sym_str) == 0) { *w = vFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockAudioDevice"); return *f != 
# 407 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 407 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockJoysticks", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockJoysticks"); return *f != 
# 408 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 408 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockMutex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockMutex"); return *f != 
# 409 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 409 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockSurface", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockSurface"); return *f != 
# 410 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 410 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LockTexture", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockTexture"); return *f != 
# 411 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 411 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_log", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_log"); return *f != 
# 412 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 412 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Log", sym_str) == 0) { *w = vFEpV; *f = dlsym(emu->context->box86lib, "my2_""SDL_Log"); return *f != 
# 413 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 413 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_log10", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_log10"); return *f != 
# 414 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 414 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_log10f", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_log10f"); return *f != 
# 415 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 415 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogCritical", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogCritical"); return *f != 
# 416 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 416 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogDebug", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogDebug"); return *f != 
# 417 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 417 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogError", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogError"); return *f != 
# 418 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 418 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_logf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_logf"); return *f != 
# 419 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 419 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogGetOutputFunction", sym_str) == 0) { *w = vFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogGetOutputFunction"); return *f != 
# 420 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 420 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogGetPriority", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogGetPriority"); return *f != 
# 421 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 421 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogInfo", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogInfo"); return *f != 
# 422 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 422 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogMessage", sym_str) == 0) { *w = vFiupV; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogMessageV"); return *f != 
# 423 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 423 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogMessageV", sym_str) == 0) { *w = vFiupV; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogMessageV"); return *f != 
# 424 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 424 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogResetPriorities", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogResetPriorities"); return *f != 
# 425 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 425 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogSetAllPriority", sym_str) == 0) { *w = vFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogSetAllPriority"); return *f != 
# 426 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 426 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogSetOutputFunction", sym_str) == 0) { *w = vFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogSetOutputFunction"); return *f != 
# 427 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 427 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogSetPriority", sym_str) == 0) { *w = vFiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LogSetPriority"); return *f != 
# 428 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 428 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogVerbose", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogVerbose"); return *f != 
# 429 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 429 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LogWarn", sym_str) == 0) { *w = vFEipV; *f = dlsym(emu->context->box86lib, "my2_""SDL_LogWarn"); return *f != 
# 430 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 430 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LowerBlit", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LowerBlit"); return *f != 
# 431 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 431 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_LowerBlitScaled", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LowerBlitScaled"); return *f != 
# 432 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 432 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ltoa", sym_str) == 0) { *w = pFlp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ltoa"); return *f != 
# 433 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 433 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_malloc", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_malloc"); return *f != 
# 434 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 434 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MapRGB", sym_str) == 0) { *w = uFpCCC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MapRGB"); return *f != 
# 435 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 435 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MapRGBA", sym_str) == 0) { *w = uFpCCCC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MapRGBA"); return *f != 
# 436 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 436 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MasksToPixelFormatEnum", sym_str) == 0) { *w = uFiuuuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MasksToPixelFormatEnum"); return *f != 
# 437 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 437 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MaximizeWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MaximizeWindow"); return *f != 
# 438 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 438 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_memcmp", sym_str) == 0) { *w = iFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_memcmp"); return *f != 
# 439 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 439 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_memcpy", sym_str) == 0) { *w = pFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_memcpy"); return *f != 
# 440 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 440 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_memmove", sym_str) == 0) { *w = pFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_memmove"); return *f != 
# 441 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 441 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MemoryBarrierAcquireFunction", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MemoryBarrierAcquireFunction"); return *f != 
# 442 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 442 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MemoryBarrierReleaseFunction", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MemoryBarrierReleaseFunction"); return *f != 
# 443 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 443 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_memset", sym_str) == 0) { *w = pFpiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_memset"); return *f != 
# 444 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 444 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MinimizeWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MinimizeWindow"); return *f != 
# 445 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 445 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MixAudio", sym_str) == 0) { *w = vFppui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MixAudio"); return *f != 
# 446 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 446 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MixAudioFormat", sym_str) == 0) { *w = vFppWui; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MixAudioFormat"); return *f != 
# 447 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 447 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_MouseIsHaptic", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_MouseIsHaptic"); return *f != 
# 448 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 448 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_NewAudioStream", sym_str) == 0) { *w = pFiCiiCi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_NewAudioStream"); return *f != 
# 449 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 449 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_NumHaptics", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_NumHaptics"); return *f != 
# 450 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 450 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_NumJoysticks", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_NumJoysticks"); return *f != 
# 451 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 451 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_NumSensors", sym_str) == 0) { *w = iFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_NumSensors"); return *f != 
# 452 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 452 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_OpenAudio", sym_str) == 0) { *w = iFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_OpenAudio"); return *f != 
# 453 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 453 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_OpenAudioDevice", sym_str) == 0) { *w = iFEpippi; *f = dlsym(emu->context->box86lib, "my2_""SDL_OpenAudioDevice"); return *f != 
# 454 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 454 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PauseAudio", sym_str) == 0) { *w = vFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PauseAudio"); return *f != 
# 455 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 455 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PauseAudioDevice", sym_str) == 0) { *w = vFii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PauseAudioDevice"); return *f != 
# 456 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 456 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PeepEvents", sym_str) == 0) { *w = iFpiiuu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PeepEvents"); return *f != 
# 457 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 457 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PixelFormatEnumToMasks", sym_str) == 0) { *w = iFuppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PixelFormatEnumToMasks"); return *f != 
# 458 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 458 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PollEvent", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PollEvent"); return *f != 
# 459 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 459 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_pow", sym_str) == 0) { *w = dFdd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_pow"); return *f != 
# 460 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 460 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_powf", sym_str) == 0) { *w = fFff; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_powf"); return *f != 
# 461 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 461 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PumpEvents", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PumpEvents"); return *f != 
# 462 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 462 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_PushEvent", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_PushEvent"); return *f != 
# 463 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 463 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_qsort", sym_str) == 0) { *w = vFEpuup; *f = dlsym(emu->context->sdl2lib->w.lib, "my_qsort"); return *f != 
# 464 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 464 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_QueryTexture", sym_str) == 0) { *w = iFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_QueryTexture"); return *f != 
# 465 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 465 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_QueueAudio", sym_str) == 0) { *w = iFipu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_QueueAudio"); return *f != 
# 466 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 466 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Quit", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Quit"); return *f != 
# 467 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 467 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_QuitSubSystem", sym_str) == 0) { *w = vFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_QuitSubSystem"); return *f != 
# 468 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 468 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RaiseWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RaiseWindow"); return *f != 
# 469 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 469 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadBE16", sym_str) == 0) { *w = uFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadBE16"); return *f != 
# 470 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 470 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadBE32", sym_str) == 0) { *w = uFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadBE32"); return *f != 
# 471 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 471 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadBE64", sym_str) == 0) { *w = UFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadBE64"); return *f != 
# 472 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 472 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadLE16", sym_str) == 0) { *w = uFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadLE16"); return *f != 
# 473 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 473 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadLE32", sym_str) == 0) { *w = uFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadLE32"); return *f != 
# 474 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 474 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadLE64", sym_str) == 0) { *w = UFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadLE64"); return *f != 
# 475 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 475 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReadU8", sym_str) == 0) { *w = uFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_ReadU8"); return *f != 
# 476 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 476 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_realloc", sym_str) == 0) { *w = pFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_realloc"); return *f != 
# 477 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 477 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RecordGesture", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RecordGesture"); return *f != 
# 478 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 478 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RegisterEvents", sym_str) == 0) { *w = uFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RegisterEvents"); return *f != 
# 479 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 479 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RemoveTimer", sym_str) == 0) { *w = iFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_RemoveTimer"); return *f != 
# 480 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 480 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderClear", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderClear"); return *f != 
# 481 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 481 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderCopy", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderCopy"); return *f != 
# 482 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 482 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderCopyEx", sym_str) == 0) { *w = iFppppdpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderCopyEx"); return *f != 
# 483 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 483 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }


else if (strcmp("SDL_RenderDrawLine", sym_str) == 0) { *w = iFpiiii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawLine"); return *f != 
# 486 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 486 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderDrawLines", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawLines"); return *f != 
# 488 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 488 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderDrawPoint", sym_str) == 0) { *w = iFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawPoint"); return *f != 
# 490 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 490 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderDrawPoints", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawPoints"); return *f != 
# 492 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 492 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderDrawRect", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawRect"); return *f != 
# 494 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 494 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderDrawRects", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderDrawRects"); return *f != 
# 496 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 496 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderFillRect", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderFillRect"); return *f != 
# 498 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 498 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RenderFillRects", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderFillRects"); return *f != 
# 500 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 500 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }


else if (strcmp("SDL_RenderGetClipRect", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderGetClipRect"); return *f != 
# 503 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 503 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderGetIntegerScale", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderGetIntegerScale"); return *f != 
# 504 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 504 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderGetLogicalSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderGetLogicalSize"); return *f != 
# 505 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 505 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }


else if (strcmp("SDL_RenderGetScale", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderGetScale"); return *f != 
# 508 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 508 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderGetViewport", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderGetViewport"); return *f != 
# 509 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 509 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderIsClipEnabled", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderIsClipEnabled"); return *f != 
# 510 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 510 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderPresent", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderPresent"); return *f != 
# 511 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 511 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderReadPixels", sym_str) == 0) { *w = iFppupi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderReadPixels"); return *f != 
# 512 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 512 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderSetClipRect", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderSetClipRect"); return *f != 
# 513 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 513 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderSetIntegerScale", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderSetIntegerScale"); return *f != 
# 514 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 514 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderSetLogicalSize", sym_str) == 0) { *w = iFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderSetLogicalSize"); return *f != 
# 515 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 515 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderSetScale", sym_str) == 0) { *w = iFpff; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderSetScale"); return *f != 
# 516 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 516 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderSetViewport", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderSetViewport"); return *f != 
# 517 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 517 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RenderTargetSupported", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RenderTargetSupported"); return *f != 
# 518 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 518 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ReportAssertion", sym_str) == 0) { *w = uFpppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ReportAssertion"); return *f != 
# 519 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 519 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ResetAssertionReport", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ResetAssertionReport"); return *f != 
# 520 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 520 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ResetKeyboard", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ResetKeyboard"); return *f != 
# 521 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 521 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RestoreWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_RestoreWindow"); return *f != 
# 522 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 522 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWFromConstMem", sym_str) == 0) { *w = pFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWFromConstMem"); return *f != 
# 523 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 523 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWFromFP", sym_str) == 0) { *w = pFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWFromFP"); return *f != 
# 524 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 524 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWFromFile", sym_str) == 0) { *w = pFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWFromFile"); return *f != 
# 525 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 525 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWFromMem", sym_str) == 0) { *w = pFEpi; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWFromMem"); return *f != 
# 526 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 526 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SaveAllDollarTemplates", sym_str) == 0) { *w = iFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_SaveAllDollarTemplates"); return *f != 
# 527 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 527 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SaveBMP_RW", sym_str) == 0) { *w = iFEppi; *f = dlsym(emu->context->box86lib, "my2_""SDL_SaveBMP_RW"); return *f != 
# 528 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 528 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SaveDollarTemplate", sym_str) == 0) { *w = iFEip; *f = dlsym(emu->context->box86lib, "my2_""SDL_SaveDollarTemplate"); return *f != 
# 529 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 529 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_scalbn", sym_str) == 0) { *w = dFdi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_scalbn"); return *f != 
# 530 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 530 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SemPost", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SemPost"); return *f != 
# 532 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 532 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SemTryWait", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SemTryWait"); return *f != 
# 533 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 533 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SemValue", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SemValue"); return *f != 
# 534 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 534 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SemWait", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SemWait"); return *f != 
# 535 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 535 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SemWaitTimeout", sym_str) == 0) { *w = iFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SemWaitTimeout"); return *f != 
# 536 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 536 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
else if (strcmp("SDL_SetClipboardText", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetClipboardText"); return *f != 
# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetClipRect", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetClipRect"); return *f != 
# 552 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 552 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetColorKey", sym_str) == 0) { *w = iFpiu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetColorKey"); return *f != 
# 553 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 553 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetCursor", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetCursor"); return *f != 
# 554 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 554 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_setenv", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_setenv"); return *f != 
# 555 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 555 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetError", sym_str) == 0) { *w = iFppppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetError"); return *f != 
# 556 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 556 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetEventFilter", sym_str) == 0) { *w = vFEpp; *f = dlsym(emu->context->box86lib, "my2_""SDL_SetEventFilter"); return *f != 
# 557 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 557 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetHint", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetHint"); return *f != 
# 558 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 558 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetHintWithPriority", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetHintWithPriority"); return *f != 
# 559 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 559 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetMainReady", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetMainReady"); return *f != 
# 560 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 560 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SetModState", sym_str) == 0) { *w = vFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetModState"); return *f != 
# 562 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 562 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetPaletteColors", sym_str) == 0) { *w = iFppii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetPaletteColors"); return *f != 
# 563 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 563 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SetRelativeMouseMode", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetRelativeMouseMode"); return *f != 
# 565 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 565 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetRenderDrawBlendMode", sym_str) == 0) { *w = iFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetRenderDrawBlendMode"); return *f != 
# 566 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 566 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetRenderDrawColor", sym_str) == 0) { *w = iFpCCCC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetRenderDrawColor"); return *f != 
# 567 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 567 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetRenderTarget", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetRenderTarget"); return *f != 
# 568 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 568 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetSurfaceAlphaMod", sym_str) == 0) { *w = iFpC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetSurfaceAlphaMod"); return *f != 
# 569 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 569 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetSurfaceBlendMode", sym_str) == 0) { *w = iFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetSurfaceBlendMode"); return *f != 
# 570 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 570 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SetSurfacePalette", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetSurfacePalette"); return *f != 
# 572 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 572 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetSurfaceRLE", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetSurfaceRLE"); return *f != 
# 573 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 573 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetTextInputRect", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetTextInputRect"); return *f != 
# 574 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 574 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetTextureAlphaMod", sym_str) == 0) { *w = iFpC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetTextureAlphaMod"); return *f != 
# 575 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 575 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetTextureBlendMode", sym_str) == 0) { *w = iFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetTextureBlendMode"); return *f != 
# 576 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 576 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetTextureColorMod", sym_str) == 0) { *w = iFpCCC; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetTextureColorMod"); return *f != 
# 577 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 577 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetThreadPriority", sym_str) == 0) { *w = iFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetThreadPriority"); return *f != 
# 578 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 578 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowBordered", sym_str) == 0) { *w = vFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowBordered"); return *f != 
# 579 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 579 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowBrightness", sym_str) == 0) { *w = iFpf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowBrightness"); return *f != 
# 580 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 580 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowData", sym_str) == 0) { *w = pFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowData"); return *f != 
# 581 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 581 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowDisplayMode", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowDisplayMode"); return *f != 
# 582 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 582 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowFullscreen", sym_str) == 0) { *w = iFpu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowFullscreen"); return *f != 
# 583 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 583 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowGammaRamp", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowGammaRamp"); return *f != 
# 584 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 584 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowGrab", sym_str) == 0) { *w = vFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowGrab"); return *f != 
# 585 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 585 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SetWindowIcon", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowIcon"); return *f != 
# 587 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 587 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_SetWindowMaximumSize", sym_str) == 0) { *w = vFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowMaximumSize"); return *f != 
# 589 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 589 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowMinimumSize", sym_str) == 0) { *w = vFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowMinimumSize"); return *f != 
# 590 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 590 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }


else if (strcmp("SDL_SetWindowPosition", sym_str) == 0) { *w = vFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowPosition"); return *f != 
# 593 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 593 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowResizable", sym_str) == 0) { *w = vFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowResizable"); return *f != 
# 594 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 594 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowShape", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowShape"); return *f != 
# 595 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 595 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowSize", sym_str) == 0) { *w = vFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowSize"); return *f != 
# 596 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 596 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SetWindowTitle", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SetWindowTitle"); return *f != 
# 597 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 597 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_ShowCursor", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ShowCursor"); return *f != 
# 599 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 599 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ShowMessageBox", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ShowMessageBox"); return *f != 
# 600 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 600 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ShowSimpleMessageBox", sym_str) == 0) { *w = iFuppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ShowSimpleMessageBox"); return *f != 
# 601 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 601 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ShowWindow", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ShowWindow"); return *f != 
# 602 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 602 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_sin", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_sin"); return *f != 
# 603 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 603 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_sinf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_sinf"); return *f != 
# 604 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 604 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_snprintf", sym_str) == 0) { *w = iFEpupV; *f = dlsym(emu->context->box86lib, "my2_""SDL_snprintf"); return *f != 
# 605 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 605 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_SoftStretch", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_SoftStretch"); return *f != 
# 606 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 606 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_sqrt", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_sqrt"); return *f != 
# 607 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 607 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_sqrtf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_sqrtf"); return *f != 
# 608 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 608 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_sscanf", sym_str) == 0) { *w = iFppV; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_vsscanf"); return *f != 
# 609 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 609 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_StartTextInput", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_StartTextInput"); return *f != 
# 610 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 610 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_StopTextInput", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_StopTextInput"); return *f != 
# 611 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 611 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strcasecmp", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strcasecmp"); return *f != 
# 612 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 612 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strchr", sym_str) == 0) { *w = pFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strchr"); return *f != 
# 613 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 613 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strcmp", sym_str) == 0) { *w = iFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strcmp"); return *f != 
# 614 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 614 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strdup", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strdup"); return *f != 
# 615 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 615 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strlcat", sym_str) == 0) { *w = uFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strlcat"); return *f != 
# 616 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 616 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strlcpy", sym_str) == 0) { *w = uFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strlcpy"); return *f != 
# 617 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 617 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strlen", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strlen"); return *f != 
# 618 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 618 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strlwr", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strlwr"); return *f != 
# 619 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 619 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strncasecmp", sym_str) == 0) { *w = iFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strncasecmp"); return *f != 
# 620 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 620 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strncmp", sym_str) == 0) { *w = iFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strncmp"); return *f != 
# 621 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 621 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strrchr", sym_str) == 0) { *w = pFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strrchr"); return *f != 
# 622 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 622 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strrev", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strrev"); return *f != 
# 623 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 623 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strstr", sym_str) == 0) { *w = pFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strstr"); return *f != 
# 624 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 624 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtod", sym_str) == 0) { *w = dFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtod"); return *f != 
# 625 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 625 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtokr", sym_str) == 0) { *w = pFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtokr"); return *f != 
# 626 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 626 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtol", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtol"); return *f != 
# 627 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 627 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtoll", sym_str) == 0) { *w = IFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtoll"); return *f != 
# 628 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 628 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtoul", sym_str) == 0) { *w = uFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtoul"); return *f != 
# 629 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 629 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strtoull", sym_str) == 0) { *w = UFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strtoull"); return *f != 
# 630 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 630 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_strupr", sym_str) == 0) { *w = pFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_strupr"); return *f != 
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_tan", sym_str) == 0) { *w = dFd; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_tan"); return *f != 
# 632 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 632 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_tanf", sym_str) == 0) { *w = fFf; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_tanf"); return *f != 
# 633 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 633 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ThreadID", sym_str) == 0) { *w = uFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ThreadID"); return *f != 
# 634 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 634 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_TLSCreate", sym_str) == 0) { *w = uFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_TLSCreate"); return *f != 
# 635 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 635 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_TLSGet", sym_str) == 0) { *w = pFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_TLSGet"); return *f != 
# 636 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 636 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_TLSSet", sym_str) == 0) { *w = iFEupp; *f = dlsym(emu->context->box86lib, "my2_""SDL_TLSSet"); return *f != 
# 637 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 637 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_tolower", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_tolower"); return *f != 
# 638 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 638 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_toupper", sym_str) == 0) { *w = iFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_toupper"); return *f != 
# 639 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 639 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_TryLockMutex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_TryLockMutex"); return *f != 
# 640 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 640 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_uitoa", sym_str) == 0) { *w = pFupi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_uitoa"); return *f != 
# 641 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 641 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ulltoa", sym_str) == 0) { *w = pFUpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ulltoa"); return *f != 
# 642 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 642 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_ultoa", sym_str) == 0) { *w = pFupi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_ultoa"); return *f != 
# 643 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 643 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnionRect", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnionRect"); return *f != 
# 644 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 644 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnloadObject", sym_str) == 0) { *w = vFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_UnloadObject"); return *f != 
# 645 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 645 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockAudio", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockAudio"); return *f != 
# 646 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 646 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockAudioDevice", sym_str) == 0) { *w = vFi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockAudioDevice"); return *f != 
# 647 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 647 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockJoysticks", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockJoysticks"); return *f != 
# 648 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 648 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockMutex", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockMutex"); return *f != 
# 649 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 649 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockSurface", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockSurface"); return *f != 
# 650 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 650 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UnlockTexture", sym_str) == 0) { *w = vFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockTexture"); return *f != 
# 651 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 651 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpdateTexture", sym_str) == 0) { *w = iFpppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpdateTexture"); return *f != 
# 652 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 652 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpdateWindowSurface", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpdateWindowSurface"); return *f != 
# 653 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 653 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpdateWindowSurfaceRects", sym_str) == 0) { *w = iFppi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpdateWindowSurfaceRects"); return *f != 
# 654 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 654 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpdateYUVTexture", sym_str) == 0) { *w = iFpppipipi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpdateYUVTexture"); return *f != 
# 655 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 655 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpperBlit", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpperBlit"); return *f != 
# 656 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 656 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_UpperBlitScaled", sym_str) == 0) { *w = iFpppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UpperBlitScaled"); return *f != 
# 657 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 657 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_utf8strlcpy", sym_str) == 0) { *w = uFppu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_utf8strlcpy"); return *f != 
# 658 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 658 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_VideoInit", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_VideoInit"); return *f != 
# 660 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 660 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_VideoQuit", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_VideoQuit"); return *f != 
# 661 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 661 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_vsnprintf", sym_str) == 0) { *w = iFEpupp; *f = dlsym(emu->context->box86lib, "my2_""SDL_vsnprintf"); return *f != 
# 662 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 662 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_Vulkan_CreateSurface", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Vulkan_CreateSurface"); return *f != 
# 664 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 664 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Vulkan_GetDrawableSize", sym_str) == 0) { *w = vFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Vulkan_GetDrawableSize"); return *f != 
# 665 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 665 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Vulkan_GetInstanceExtensions", sym_str) == 0) { *w = iFppp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Vulkan_GetInstanceExtensions"); return *f != 
# 666 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 666 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Vulkan_GetVkGetInstanceProcAddr", sym_str) == 0) { *w = pFEv; *f = dlsym(emu->context->box86lib, "my2_""SDL_Vulkan_GetVkGetInstanceProcAddr"); return *f != 
# 667 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 667 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Vulkan_LoadLibrary", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Vulkan_LoadLibrary"); return *f != 
# 668 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 668 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_Vulkan_UnloadLibrary", sym_str) == 0) { *w = vFv; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_Vulkan_UnloadLibrary"); return *f != 
# 669 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 669 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WaitEvent", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WaitEvent"); return *f != 
# 670 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 670 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WaitEventTimeout", sym_str) == 0) { *w = iFpi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WaitEventTimeout"); return *f != 
# 671 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 671 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WaitThread", sym_str) == 0) { *w = vFpp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WaitThread"); return *f != 
# 672 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 672 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WarpMouseGlobal", sym_str) == 0) { *w = iFii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WarpMouseGlobal"); return *f != 
# 673 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 673 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WarpMouseInWindow", sym_str) == 0) { *w = vFpii; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WarpMouseInWindow"); return *f != 
# 674 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 674 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WasInit", sym_str) == 0) { *w = uFu; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_WasInit"); return *f != 
# 675 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 675 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }




else if (strcmp("SDL_wcslen", sym_str) == 0) { *w = uFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_wcslen"); return *f != 
# 680 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 680 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteBE16", sym_str) == 0) { *w = uFEpW; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteBE16"); return *f != 
# 681 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 681 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteBE32", sym_str) == 0) { *w = uFEpu; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteBE32"); return *f != 
# 682 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 682 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteBE64", sym_str) == 0) { *w = uFEpU; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteBE64"); return *f != 
# 683 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 683 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteLE16", sym_str) == 0) { *w = uFEpW; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteLE16"); return *f != 
# 684 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 684 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteLE32", sym_str) == 0) { *w = uFEpu; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteLE32"); return *f != 
# 685 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 685 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteLE64", sym_str) == 0) { *w = uFEpU; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteLE64"); return *f != 
# 686 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 686 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_WriteU8", sym_str) == 0) { *w = uFEpu; *f = dlsym(emu->context->box86lib, "my2_""SDL_WriteU8"); return *f != 
# 687 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 687 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_RWseek", sym_str) == 0) { *w = IFEpIi; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWseek"); return *f != 
# 689 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 689 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWtell", sym_str) == 0) { *w = IFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWtell"); return *f != 
# 690 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 690 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWsize", sym_str) == 0) { *w = IFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWsize"); return *f != 
# 691 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 691 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWread", sym_str) == 0) { *w = uFEppuu; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWread"); return *f != 
# 692 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 692 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWwrite", sym_str) == 0) { *w = uFEppuu; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWwrite"); return *f != 
# 693 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 693 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_RWclose", sym_str) == 0) { *w = iFEp; *f = dlsym(emu->context->box86lib, "my2_""SDL_RWclose"); return *f != 
# 694 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 694 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_mutexP", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_LockMutex"); return *f != 
# 696 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 696 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_mutexV", sym_str) == 0) { *w = iFp; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_UnlockMutex"); return *f != 
# 697 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 697 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_doesntexist", sym_str) == 0) { *w = IFpIi; *f = dlsym(emu->context->sdl2lib->w.lib, "SDL_doesntexist"); return *f != 
# 699 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 699 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }

else if (strcmp("SDL_IsJoystickPS4", sym_str) == 0) { *w = iFEWW; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickPS4"); return *f != 
# 701 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 701 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickNintendoSwitchPro", sym_str) == 0) { *w = iFEWW; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickNintendoSwitchPro"); return *f != 
# 702 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 702 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickSteamController", sym_str) == 0) { *w = iFEWW; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickSteamController"); return *f != 
# 703 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 703 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickXbox360", sym_str) == 0) { *w = iFEWW; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickXbox360"); return *f != 
# 704 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 704 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickXboxOne", sym_str) == 0) { *w = iFEWW; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickXboxOne"); return *f != 
# 705 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 705 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickXInput", sym_str) == 0) { *w = iFEuuuu; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickXInput"); return *f != 
# 706 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 706 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
else if (strcmp("SDL_IsJoystickHIDAPI", sym_str) == 0) { *w = iFEuuuu; *f = dlsym(emu->context->box86lib, "my2_""SDL_IsJoystickHIDAPI"); return *f != 
# 707 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 3 4
((void *)0)
# 707 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
; }
# 580 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2






    return 0;
}

int __attribute__((visibility("default"))) my2_SDL_DYNAPI_entry(x86emu_t* emu, uint32_t version, uintptr_t *table, uint32_t tablesize)
{
    uint32_t i = 0;
    uintptr_t tab[tablesize];
    int r = my->SDL_DYNAPI_entry(version, tab, tablesize);
    (void)r;
# 609 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
# 1 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 1
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
if (i < tablesize) { void *w = 
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetError", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetError"); } else table[i] = (uintptr_t)
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 34 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetError", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Log", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Log"); } else table[i] = (uintptr_t)
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 35 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Log", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogVerbose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogVerbose"); } else table[i] = (uintptr_t)
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 36 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogVerbose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogDebug", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogDebug"); } else table[i] = (uintptr_t)
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 37 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogDebug", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogInfo", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogInfo"); } else table[i] = (uintptr_t)
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 38 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogInfo", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogWarn", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogWarn"); } else table[i] = (uintptr_t)
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 39 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogWarn", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogError", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogError"); } else table[i] = (uintptr_t)
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 40 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogError", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogCritical", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogCritical"); } else table[i] = (uintptr_t)
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 41 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogCritical", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogMessage", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogMessage"); } else table[i] = (uintptr_t)
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 42 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogMessage", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_sscanf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_sscanf"); } else table[i] = (uintptr_t)
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 43 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_sscanf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_snprintf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_snprintf"); } else table[i] = (uintptr_t)
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 44 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_snprintf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
if (i < tablesize) { void *w = 
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateThread", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateThread"); } else table[i] = (uintptr_t)
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 56 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateThread", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }





if (i < tablesize) { void *w = 
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWFromFP", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWFromFP"); } else table[i] = (uintptr_t)
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 62 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWFromFP", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
if (i < tablesize) { void *w = 
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Init", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Init"); } else table[i] = (uintptr_t)
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 85 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Init", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_InitSubSystem", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_InitSubSystem"); } else table[i] = (uintptr_t)
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 86 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_InitSubSystem", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_QuitSubSystem", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_QuitSubSystem"); } else table[i] = (uintptr_t)
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 87 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_QuitSubSystem", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WasInit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WasInit"); } else table[i] = (uintptr_t)
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 88 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WasInit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Quit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Quit"); } else table[i] = (uintptr_t)
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 89 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Quit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReportAssertion", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReportAssertion"); } else table[i] = (uintptr_t)
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 90 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReportAssertion", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetAssertionHandler", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetAssertionHandler"); } else table[i] = (uintptr_t)
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 91 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetAssertionHandler", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAssertionReport", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAssertionReport"); } else table[i] = (uintptr_t)
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 92 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAssertionReport", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ResetAssertionReport", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ResetAssertionReport"); } else table[i] = (uintptr_t)
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 93 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ResetAssertionReport", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicTryLock", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicTryLock"); } else table[i] = (uintptr_t)
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 94 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicTryLock", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicLock", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicLock"); } else table[i] = (uintptr_t)
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 95 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicLock", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicUnlock", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicUnlock"); } else table[i] = (uintptr_t)
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 96 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicUnlock", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicCAS", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicCAS"); } else table[i] = (uintptr_t)
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 97 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicCAS", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicSet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicSet"); } else table[i] = (uintptr_t)
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 98 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicSet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicGet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicGet"); } else table[i] = (uintptr_t)
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 99 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicGet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicAdd", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicAdd"); } else table[i] = (uintptr_t)
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 100 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicAdd", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicCASPtr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicCASPtr"); } else table[i] = (uintptr_t)
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 101 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicCASPtr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicSetPtr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicSetPtr"); } else table[i] = (uintptr_t)
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 102 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicSetPtr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AtomicGetPtr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AtomicGetPtr"); } else table[i] = (uintptr_t)
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 103 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AtomicGetPtr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumAudioDrivers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumAudioDrivers"); } else table[i] = (uintptr_t)
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 104 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumAudioDrivers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAudioDriver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAudioDriver"); } else table[i] = (uintptr_t)
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 105 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAudioDriver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioInit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioInit"); } else table[i] = (uintptr_t)
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 106 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioInit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioQuit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioQuit"); } else table[i] = (uintptr_t)
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 107 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioQuit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCurrentAudioDriver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCurrentAudioDriver"); } else table[i] = (uintptr_t)
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 108 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCurrentAudioDriver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OpenAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OpenAudio"); } else table[i] = (uintptr_t)
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 109 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OpenAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumAudioDevices", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumAudioDevices"); } else table[i] = (uintptr_t)
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 110 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumAudioDevices", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAudioDeviceName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAudioDeviceName"); } else table[i] = (uintptr_t)
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 111 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAudioDeviceName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OpenAudioDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OpenAudioDevice"); } else table[i] = (uintptr_t)
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 112 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OpenAudioDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAudioStatus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAudioStatus"); } else table[i] = (uintptr_t)
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 113 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAudioStatus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAudioDeviceStatus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAudioDeviceStatus"); } else table[i] = (uintptr_t)
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 114 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAudioDeviceStatus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PauseAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PauseAudio"); } else table[i] = (uintptr_t)
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 115 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PauseAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PauseAudioDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PauseAudioDevice"); } else table[i] = (uintptr_t)
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 116 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PauseAudioDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadWAV_RW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadWAV_RW"); } else table[i] = (uintptr_t)
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 117 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadWAV_RW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeWAV", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeWAV"); } else table[i] = (uintptr_t)
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 118 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeWAV", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_BuildAudioCVT", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_BuildAudioCVT"); } else table[i] = (uintptr_t)
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 119 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_BuildAudioCVT", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ConvertAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ConvertAudio"); } else table[i] = (uintptr_t)
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 120 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ConvertAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MixAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MixAudio"); } else table[i] = (uintptr_t)
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 121 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MixAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MixAudioFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MixAudioFormat"); } else table[i] = (uintptr_t)
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 122 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MixAudioFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockAudio"); } else table[i] = (uintptr_t)
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 123 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockAudioDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockAudioDevice"); } else table[i] = (uintptr_t)
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 124 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockAudioDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockAudio"); } else table[i] = (uintptr_t)
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 125 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockAudioDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockAudioDevice"); } else table[i] = (uintptr_t)
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 126 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockAudioDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CloseAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CloseAudio"); } else table[i] = (uintptr_t)
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 127 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CloseAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CloseAudioDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CloseAudioDevice"); } else table[i] = (uintptr_t)
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 128 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CloseAudioDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetClipboardText", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetClipboardText"); } else table[i] = (uintptr_t)
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 129 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetClipboardText", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetClipboardText", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetClipboardText"); } else table[i] = (uintptr_t)
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 130 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetClipboardText", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasClipboardText", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasClipboardText"); } else table[i] = (uintptr_t)
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 131 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasClipboardText", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCPUCount", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCPUCount"); } else table[i] = (uintptr_t)
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 132 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCPUCount", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCPUCacheLineSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCPUCacheLineSize"); } else table[i] = (uintptr_t)
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 133 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCPUCacheLineSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasRDTSC", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasRDTSC"); } else table[i] = (uintptr_t)
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 134 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasRDTSC", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasAltiVec", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasAltiVec"); } else table[i] = (uintptr_t)
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 135 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasAltiVec", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasMMX", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasMMX"); } else table[i] = (uintptr_t)
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 136 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasMMX", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Has3DNow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Has3DNow"); } else table[i] = (uintptr_t)
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 137 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Has3DNow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSSE", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSSE"); } else table[i] = (uintptr_t)
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 138 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSSE", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSSE2", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSSE2"); } else table[i] = (uintptr_t)
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 139 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSSE2", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSSE3", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSSE3"); } else table[i] = (uintptr_t)
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 140 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSSE3", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSSE41", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSSE41"); } else table[i] = (uintptr_t)
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 141 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSSE41", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSSE42", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSSE42"); } else table[i] = (uintptr_t)
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 142 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSSE42", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetSystemRAM", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetSystemRAM"); } else table[i] = (uintptr_t)
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 143 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetSystemRAM", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetError", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetError"); } else table[i] = (uintptr_t)
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 144 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetError", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ClearError", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ClearError"); } else table[i] = (uintptr_t)
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 145 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ClearError", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Error", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Error"); } else table[i] = (uintptr_t)
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 146 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Error", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PumpEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PumpEvents"); } else table[i] = (uintptr_t)
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 147 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PumpEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PeepEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PeepEvents"); } else table[i] = (uintptr_t)
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 148 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PeepEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasEvent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasEvent"); } else table[i] = (uintptr_t)
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 149 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasEvent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasEvents"); } else table[i] = (uintptr_t)
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 150 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FlushEvent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FlushEvent"); } else table[i] = (uintptr_t)
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 151 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FlushEvent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FlushEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FlushEvents"); } else table[i] = (uintptr_t)
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 152 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FlushEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PollEvent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PollEvent"); } else table[i] = (uintptr_t)
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 153 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PollEvent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WaitEvent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WaitEvent"); } else table[i] = (uintptr_t)
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 154 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WaitEvent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WaitEventTimeout", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WaitEventTimeout"); } else table[i] = (uintptr_t)
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 155 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WaitEventTimeout", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PushEvent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PushEvent"); } else table[i] = (uintptr_t)
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 156 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PushEvent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetEventFilter", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetEventFilter"); } else table[i] = (uintptr_t)
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 157 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetEventFilter", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetEventFilter", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetEventFilter"); } else table[i] = (uintptr_t)
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 158 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetEventFilter", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AddEventWatch", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AddEventWatch"); } else table[i] = (uintptr_t)
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 159 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AddEventWatch", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DelEventWatch", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DelEventWatch"); } else table[i] = (uintptr_t)
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 160 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DelEventWatch", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FilterEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FilterEvents"); } else table[i] = (uintptr_t)
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 161 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FilterEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_EventState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_EventState"); } else table[i] = (uintptr_t)
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 162 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_EventState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RegisterEvents", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RegisterEvents"); } else table[i] = (uintptr_t)
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 163 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RegisterEvents", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetBasePath", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetBasePath"); } else table[i] = (uintptr_t)
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 164 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetBasePath", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPrefPath", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPrefPath"); } else table[i] = (uintptr_t)
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 165 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPrefPath", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerAddMapping", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerAddMapping"); } else table[i] = (uintptr_t)
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 166 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerAddMapping", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerMappingForGUID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerMappingForGUID"); } else table[i] = (uintptr_t)
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 167 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerMappingForGUID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerMapping", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerMapping"); } else table[i] = (uintptr_t)
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 168 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerMapping", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsGameController", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsGameController"); } else table[i] = (uintptr_t)
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 169 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsGameController", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerNameForIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerNameForIndex"); } else table[i] = (uintptr_t)
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 170 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerNameForIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerOpen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerOpen"); } else table[i] = (uintptr_t)
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 171 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerOpen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerName"); } else table[i] = (uintptr_t)
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 172 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetAttached", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetAttached"); } else table[i] = (uintptr_t)
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 173 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetAttached", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetJoystick", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetJoystick"); } else table[i] = (uintptr_t)
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 174 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetJoystick", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerEventState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerEventState"); } else table[i] = (uintptr_t)
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 175 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerEventState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerUpdate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerUpdate"); } else table[i] = (uintptr_t)
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 176 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerUpdate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetAxisFromString", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetAxisFromString"); } else table[i] = (uintptr_t)
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 177 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetAxisFromString", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetStringForAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetStringForAxis"); } else table[i] = (uintptr_t)
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 178 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetStringForAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetBindForAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetBindForAxis"); } else table[i] = (uintptr_t)
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 179 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetBindForAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetAxis"); } else table[i] = (uintptr_t)
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 180 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetButtonFromString", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetButtonFromString"); } else table[i] = (uintptr_t)
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 181 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetButtonFromString", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetStringForButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetStringForButton"); } else table[i] = (uintptr_t)
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 182 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetStringForButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetBindForButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetBindForButton"); } else table[i] = (uintptr_t)
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 183 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetBindForButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetButton"); } else table[i] = (uintptr_t)
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 184 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerClose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerClose"); } else table[i] = (uintptr_t)
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 185 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerClose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RecordGesture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RecordGesture"); } else table[i] = (uintptr_t)
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 186 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RecordGesture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SaveAllDollarTemplates", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SaveAllDollarTemplates"); } else table[i] = (uintptr_t)
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 187 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SaveAllDollarTemplates", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SaveDollarTemplate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SaveDollarTemplate"); } else table[i] = (uintptr_t)
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 188 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SaveDollarTemplate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadDollarTemplates", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadDollarTemplates"); } else table[i] = (uintptr_t)
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 189 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadDollarTemplates", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_NumHaptics", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_NumHaptics"); } else table[i] = (uintptr_t)
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 190 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_NumHaptics", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticName"); } else table[i] = (uintptr_t)
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 191 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticOpen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticOpen"); } else table[i] = (uintptr_t)
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 192 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticOpen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticOpened", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticOpened"); } else table[i] = (uintptr_t)
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 193 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticOpened", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticIndex"); } else table[i] = (uintptr_t)
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 194 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MouseIsHaptic", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MouseIsHaptic"); } else table[i] = (uintptr_t)
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 195 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MouseIsHaptic", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticOpenFromMouse", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticOpenFromMouse"); } else table[i] = (uintptr_t)
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 196 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticOpenFromMouse", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickIsHaptic", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickIsHaptic"); } else table[i] = (uintptr_t)
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 197 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickIsHaptic", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticOpenFromJoystick", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticOpenFromJoystick"); } else table[i] = (uintptr_t)
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 198 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticOpenFromJoystick", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticClose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticClose"); } else table[i] = (uintptr_t)
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 199 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticClose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticNumEffects", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticNumEffects"); } else table[i] = (uintptr_t)
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 200 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticNumEffects", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticNumEffectsPlaying", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticNumEffectsPlaying"); } else table[i] = (uintptr_t)
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 201 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticNumEffectsPlaying", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticQuery", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticQuery"); } else table[i] = (uintptr_t)
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 202 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticQuery", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticNumAxes", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticNumAxes"); } else table[i] = (uintptr_t)
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 203 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticNumAxes", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticEffectSupported", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticEffectSupported"); } else table[i] = (uintptr_t)
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 204 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticEffectSupported", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticNewEffect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticNewEffect"); } else table[i] = (uintptr_t)
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 205 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticNewEffect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticUpdateEffect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticUpdateEffect"); } else table[i] = (uintptr_t)
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 206 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticUpdateEffect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticRunEffect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticRunEffect"); } else table[i] = (uintptr_t)
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 207 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticRunEffect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticStopEffect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticStopEffect"); } else table[i] = (uintptr_t)
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 208 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticStopEffect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticDestroyEffect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticDestroyEffect"); } else table[i] = (uintptr_t)
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 209 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticDestroyEffect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticGetEffectStatus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticGetEffectStatus"); } else table[i] = (uintptr_t)
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 210 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticGetEffectStatus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticSetGain", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticSetGain"); } else table[i] = (uintptr_t)
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 211 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticSetGain", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticSetAutocenter", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticSetAutocenter"); } else table[i] = (uintptr_t)
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 212 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticSetAutocenter", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticPause", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticPause"); } else table[i] = (uintptr_t)
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 213 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticPause", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticUnpause", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticUnpause"); } else table[i] = (uintptr_t)
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 214 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticUnpause", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticStopAll", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticStopAll"); } else table[i] = (uintptr_t)
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 215 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticStopAll", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticRumbleSupported", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticRumbleSupported"); } else table[i] = (uintptr_t)
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 216 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticRumbleSupported", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticRumbleInit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticRumbleInit"); } else table[i] = (uintptr_t)
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 217 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticRumbleInit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticRumblePlay", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticRumblePlay"); } else table[i] = (uintptr_t)
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 218 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticRumblePlay", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HapticRumbleStop", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HapticRumbleStop"); } else table[i] = (uintptr_t)
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 219 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HapticRumbleStop", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetHintWithPriority", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetHintWithPriority"); } else table[i] = (uintptr_t)
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 220 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetHintWithPriority", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetHint", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetHint"); } else table[i] = (uintptr_t)
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 221 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetHint", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetHint", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetHint"); } else table[i] = (uintptr_t)
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 222 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetHint", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AddHintCallback", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AddHintCallback"); } else table[i] = (uintptr_t)
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 223 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AddHintCallback", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DelHintCallback", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DelHintCallback"); } else table[i] = (uintptr_t)
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 224 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DelHintCallback", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ClearHints", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ClearHints"); } else table[i] = (uintptr_t)
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 225 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ClearHints", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_NumJoysticks", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_NumJoysticks"); } else table[i] = (uintptr_t)
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 226 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_NumJoysticks", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickNameForIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickNameForIndex"); } else table[i] = (uintptr_t)
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 227 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickNameForIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickOpen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickOpen"); } else table[i] = (uintptr_t)
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 228 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickOpen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickName"); } else table[i] = (uintptr_t)
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 229 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceGUID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceGUID"); } else table[i] = (uintptr_t)
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 230 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceGUID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetGUID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetGUID"); } else table[i] = (uintptr_t)
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 231 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetGUID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetGUIDString", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetGUIDString"); } else table[i] = (uintptr_t)
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 232 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetGUIDString", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetGUIDFromString", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetGUIDFromString"); } else table[i] = (uintptr_t)
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 233 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetGUIDFromString", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetAttached", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetAttached"); } else table[i] = (uintptr_t)
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetAttached", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickInstanceID"); } else table[i] = (uintptr_t)
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 235 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickNumAxes", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickNumAxes"); } else table[i] = (uintptr_t)
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 236 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickNumAxes", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickNumBalls", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickNumBalls"); } else table[i] = (uintptr_t)
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 237 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickNumBalls", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickNumHats", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickNumHats"); } else table[i] = (uintptr_t)
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 238 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickNumHats", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickNumButtons", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickNumButtons"); } else table[i] = (uintptr_t)
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 239 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickNumButtons", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickUpdate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickUpdate"); } else table[i] = (uintptr_t)
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 240 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickUpdate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickEventState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickEventState"); } else table[i] = (uintptr_t)
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 241 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickEventState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetAxis"); } else table[i] = (uintptr_t)
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 242 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetHat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetHat"); } else table[i] = (uintptr_t)
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 243 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetHat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetBall", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetBall"); } else table[i] = (uintptr_t)
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 244 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetBall", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetButton"); } else table[i] = (uintptr_t)
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 245 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickClose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickClose"); } else table[i] = (uintptr_t)
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 246 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickClose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetKeyboardFocus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetKeyboardFocus"); } else table[i] = (uintptr_t)
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 247 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetKeyboardFocus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetKeyboardState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetKeyboardState"); } else table[i] = (uintptr_t)
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 248 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetKeyboardState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetModState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetModState"); } else table[i] = (uintptr_t)
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 249 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetModState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetModState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetModState"); } else table[i] = (uintptr_t)
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 250 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetModState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetKeyFromScancode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetKeyFromScancode"); } else table[i] = (uintptr_t)
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 251 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetKeyFromScancode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetScancodeFromKey", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetScancodeFromKey"); } else table[i] = (uintptr_t)
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 252 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetScancodeFromKey", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetScancodeName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetScancodeName"); } else table[i] = (uintptr_t)
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 253 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetScancodeName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetScancodeFromName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetScancodeFromName"); } else table[i] = (uintptr_t)
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 254 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetScancodeFromName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetKeyName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetKeyName"); } else table[i] = (uintptr_t)
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 255 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetKeyName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetKeyFromName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetKeyFromName"); } else table[i] = (uintptr_t)
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 256 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetKeyFromName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_StartTextInput", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_StartTextInput"); } else table[i] = (uintptr_t)
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 257 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_StartTextInput", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsTextInputActive", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsTextInputActive"); } else table[i] = (uintptr_t)
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 258 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsTextInputActive", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_StopTextInput", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_StopTextInput"); } else table[i] = (uintptr_t)
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 259 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_StopTextInput", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetTextInputRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetTextInputRect"); } else table[i] = (uintptr_t)
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 260 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetTextInputRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasScreenKeyboardSupport", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasScreenKeyboardSupport"); } else table[i] = (uintptr_t)
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 261 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasScreenKeyboardSupport", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsScreenKeyboardShown", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsScreenKeyboardShown"); } else table[i] = (uintptr_t)
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 262 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsScreenKeyboardShown", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadObject", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadObject"); } else table[i] = (uintptr_t)
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 263 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadObject", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadFunction", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadFunction"); } else table[i] = (uintptr_t)
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 264 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadFunction", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnloadObject", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnloadObject"); } else table[i] = (uintptr_t)
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 265 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnloadObject", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogSetAllPriority", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogSetAllPriority"); } else table[i] = (uintptr_t)
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 266 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogSetAllPriority", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogSetPriority", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogSetPriority"); } else table[i] = (uintptr_t)
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 267 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogSetPriority", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogGetPriority", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogGetPriority"); } else table[i] = (uintptr_t)
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 268 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogGetPriority", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogResetPriorities", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogResetPriorities"); } else table[i] = (uintptr_t)
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 269 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogResetPriorities", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogMessageV", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogMessageV"); } else table[i] = (uintptr_t)
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 270 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogMessageV", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogGetOutputFunction", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogGetOutputFunction"); } else table[i] = (uintptr_t)
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 271 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogGetOutputFunction", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LogSetOutputFunction", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LogSetOutputFunction"); } else table[i] = (uintptr_t)
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 272 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LogSetOutputFunction", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetMainReady", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetMainReady"); } else table[i] = (uintptr_t)
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 273 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetMainReady", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ShowMessageBox", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ShowMessageBox"); } else table[i] = (uintptr_t)
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 274 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ShowMessageBox", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ShowSimpleMessageBox", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ShowSimpleMessageBox"); } else table[i] = (uintptr_t)
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 275 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ShowSimpleMessageBox", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetMouseFocus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetMouseFocus"); } else table[i] = (uintptr_t)
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 276 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetMouseFocus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetMouseState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetMouseState"); } else table[i] = (uintptr_t)
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 277 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetMouseState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRelativeMouseState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRelativeMouseState"); } else table[i] = (uintptr_t)
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 278 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRelativeMouseState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WarpMouseInWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WarpMouseInWindow"); } else table[i] = (uintptr_t)
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 279 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WarpMouseInWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetRelativeMouseMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetRelativeMouseMode"); } else table[i] = (uintptr_t)
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 280 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetRelativeMouseMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRelativeMouseMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRelativeMouseMode"); } else table[i] = (uintptr_t)
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 281 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRelativeMouseMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateCursor"); } else table[i] = (uintptr_t)
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 282 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateColorCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateColorCursor"); } else table[i] = (uintptr_t)
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 283 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateColorCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateSystemCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateSystemCursor"); } else table[i] = (uintptr_t)
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 284 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateSystemCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetCursor"); } else table[i] = (uintptr_t)
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 285 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCursor"); } else table[i] = (uintptr_t)
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 286 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDefaultCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDefaultCursor"); } else table[i] = (uintptr_t)
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 287 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDefaultCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeCursor"); } else table[i] = (uintptr_t)
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 288 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ShowCursor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ShowCursor"); } else table[i] = (uintptr_t)
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 289 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ShowCursor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateMutex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateMutex"); } else table[i] = (uintptr_t)
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 290 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateMutex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockMutex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockMutex"); } else table[i] = (uintptr_t)
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 291 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockMutex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_TryLockMutex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_TryLockMutex"); } else table[i] = (uintptr_t)
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 292 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_TryLockMutex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockMutex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockMutex"); } else table[i] = (uintptr_t)
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 293 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockMutex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroyMutex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroyMutex"); } else table[i] = (uintptr_t)
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 294 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroyMutex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateSemaphore", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateSemaphore"); } else table[i] = (uintptr_t)
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 295 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateSemaphore", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroySemaphore", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroySemaphore"); } else table[i] = (uintptr_t)
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 296 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroySemaphore", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SemWait", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SemWait"); } else table[i] = (uintptr_t)
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 297 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SemWait", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SemTryWait", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SemTryWait"); } else table[i] = (uintptr_t)
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 298 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SemTryWait", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SemWaitTimeout", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SemWaitTimeout"); } else table[i] = (uintptr_t)
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 299 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SemWaitTimeout", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SemPost", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SemPost"); } else table[i] = (uintptr_t)
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 300 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SemPost", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SemValue", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SemValue"); } else table[i] = (uintptr_t)
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 301 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SemValue", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateCond", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateCond"); } else table[i] = (uintptr_t)
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 302 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateCond", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroyCond", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroyCond"); } else table[i] = (uintptr_t)
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 303 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroyCond", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CondSignal", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CondSignal"); } else table[i] = (uintptr_t)
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 304 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CondSignal", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CondBroadcast", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CondBroadcast"); } else table[i] = (uintptr_t)
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 305 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CondBroadcast", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CondWait", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CondWait"); } else table[i] = (uintptr_t)
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 306 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CondWait", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CondWaitTimeout", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CondWaitTimeout"); } else table[i] = (uintptr_t)
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 307 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CondWaitTimeout", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPixelFormatName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPixelFormatName"); } else table[i] = (uintptr_t)
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 308 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPixelFormatName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_PixelFormatEnumToMasks", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_PixelFormatEnumToMasks"); } else table[i] = (uintptr_t)
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 309 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_PixelFormatEnumToMasks", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MasksToPixelFormatEnum", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MasksToPixelFormatEnum"); } else table[i] = (uintptr_t)
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 310 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MasksToPixelFormatEnum", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AllocFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AllocFormat"); } else table[i] = (uintptr_t)
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 311 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AllocFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeFormat"); } else table[i] = (uintptr_t)
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 312 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AllocPalette", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AllocPalette"); } else table[i] = (uintptr_t)
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 313 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AllocPalette", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetPixelFormatPalette", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetPixelFormatPalette"); } else table[i] = (uintptr_t)
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 314 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetPixelFormatPalette", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetPaletteColors", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetPaletteColors"); } else table[i] = (uintptr_t)
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 315 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetPaletteColors", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreePalette", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreePalette"); } else table[i] = (uintptr_t)
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 316 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreePalette", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MapRGB", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MapRGB"); } else table[i] = (uintptr_t)
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 317 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MapRGB", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MapRGBA", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MapRGBA"); } else table[i] = (uintptr_t)
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 318 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MapRGBA", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRGB", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRGB"); } else table[i] = (uintptr_t)
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 319 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRGB", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRGBA", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRGBA"); } else table[i] = (uintptr_t)
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 320 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRGBA", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CalculateGammaRamp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CalculateGammaRamp"); } else table[i] = (uintptr_t)
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 321 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CalculateGammaRamp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPlatform", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPlatform"); } else table[i] = (uintptr_t)
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 322 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPlatform", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPowerInfo", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPowerInfo"); } else table[i] = (uintptr_t)
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 323 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPowerInfo", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasIntersection", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasIntersection"); } else table[i] = (uintptr_t)
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 324 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasIntersection", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IntersectRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IntersectRect"); } else table[i] = (uintptr_t)
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 325 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IntersectRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnionRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnionRect"); } else table[i] = (uintptr_t)
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 326 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnionRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_EnclosePoints", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_EnclosePoints"); } else table[i] = (uintptr_t)
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 327 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_EnclosePoints", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IntersectRectAndLine", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IntersectRectAndLine"); } else table[i] = (uintptr_t)
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 328 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IntersectRectAndLine", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumRenderDrivers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumRenderDrivers"); } else table[i] = (uintptr_t)
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 329 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumRenderDrivers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRenderDriverInfo", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRenderDriverInfo"); } else table[i] = (uintptr_t)
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 330 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRenderDriverInfo", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateWindowAndRenderer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateWindowAndRenderer"); } else table[i] = (uintptr_t)
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 331 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateWindowAndRenderer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateRenderer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateRenderer"); } else table[i] = (uintptr_t)
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 332 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateRenderer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateSoftwareRenderer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateSoftwareRenderer"); } else table[i] = (uintptr_t)
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 333 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateSoftwareRenderer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRenderer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRenderer"); } else table[i] = (uintptr_t)
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 334 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRenderer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRendererInfo", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRendererInfo"); } else table[i] = (uintptr_t)
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 335 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRendererInfo", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRendererOutputSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRendererOutputSize"); } else table[i] = (uintptr_t)
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 336 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRendererOutputSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateTexture"); } else table[i] = (uintptr_t)
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 337 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateTextureFromSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateTextureFromSurface"); } else table[i] = (uintptr_t)
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 338 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateTextureFromSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_QueryTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_QueryTexture"); } else table[i] = (uintptr_t)
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 339 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_QueryTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetTextureColorMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetTextureColorMod"); } else table[i] = (uintptr_t)
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 340 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetTextureColorMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTextureColorMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTextureColorMod"); } else table[i] = (uintptr_t)
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 341 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTextureColorMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetTextureAlphaMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetTextureAlphaMod"); } else table[i] = (uintptr_t)
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 342 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetTextureAlphaMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTextureAlphaMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTextureAlphaMod"); } else table[i] = (uintptr_t)
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 343 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTextureAlphaMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetTextureBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetTextureBlendMode"); } else table[i] = (uintptr_t)
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 344 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetTextureBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTextureBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTextureBlendMode"); } else table[i] = (uintptr_t)
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 345 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTextureBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpdateTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpdateTexture"); } else table[i] = (uintptr_t)
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 346 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpdateTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpdateYUVTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpdateYUVTexture"); } else table[i] = (uintptr_t)
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 347 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpdateYUVTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockTexture"); } else table[i] = (uintptr_t)
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 348 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockTexture"); } else table[i] = (uintptr_t)
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 349 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderTargetSupported", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderTargetSupported"); } else table[i] = (uintptr_t)
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 350 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderTargetSupported", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetRenderTarget", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetRenderTarget"); } else table[i] = (uintptr_t)
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 351 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetRenderTarget", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRenderTarget", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRenderTarget"); } else table[i] = (uintptr_t)
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 352 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRenderTarget", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderSetLogicalSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderSetLogicalSize"); } else table[i] = (uintptr_t)
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 353 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderSetLogicalSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetLogicalSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetLogicalSize"); } else table[i] = (uintptr_t)
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 354 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetLogicalSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderSetViewport", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderSetViewport"); } else table[i] = (uintptr_t)
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 355 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderSetViewport", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetViewport", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetViewport"); } else table[i] = (uintptr_t)
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 356 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetViewport", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderSetClipRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderSetClipRect"); } else table[i] = (uintptr_t)
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 357 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderSetClipRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetClipRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetClipRect"); } else table[i] = (uintptr_t)
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 358 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetClipRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderSetScale", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderSetScale"); } else table[i] = (uintptr_t)
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 359 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderSetScale", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetScale", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetScale"); } else table[i] = (uintptr_t)
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 360 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetScale", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetRenderDrawColor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetRenderDrawColor"); } else table[i] = (uintptr_t)
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 361 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetRenderDrawColor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRenderDrawColor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRenderDrawColor"); } else table[i] = (uintptr_t)
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 362 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRenderDrawColor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetRenderDrawBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetRenderDrawBlendMode"); } else table[i] = (uintptr_t)
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 363 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetRenderDrawBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRenderDrawBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRenderDrawBlendMode"); } else table[i] = (uintptr_t)
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 364 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRenderDrawBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderClear", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderClear"); } else table[i] = (uintptr_t)
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 365 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderClear", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawPoint", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawPoint"); } else table[i] = (uintptr_t)
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 366 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawPoint", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawPoints", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawPoints"); } else table[i] = (uintptr_t)
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 367 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawPoints", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawLine", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawLine"); } else table[i] = (uintptr_t)
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 368 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawLine", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawLines", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawLines"); } else table[i] = (uintptr_t)
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 369 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawLines", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawRect"); } else table[i] = (uintptr_t)
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 370 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawRects", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawRects"); } else table[i] = (uintptr_t)
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 371 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawRects", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderFillRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderFillRect"); } else table[i] = (uintptr_t)
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 372 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderFillRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderFillRects", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderFillRects"); } else table[i] = (uintptr_t)
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 373 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderFillRects", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderCopy", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderCopy"); } else table[i] = (uintptr_t)
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 374 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderCopy", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderCopyEx", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderCopyEx"); } else table[i] = (uintptr_t)
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 375 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderCopyEx", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderReadPixels", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderReadPixels"); } else table[i] = (uintptr_t)
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 376 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderReadPixels", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderPresent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderPresent"); } else table[i] = (uintptr_t)
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 377 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderPresent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroyTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroyTexture"); } else table[i] = (uintptr_t)
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 378 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroyTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroyRenderer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroyRenderer"); } else table[i] = (uintptr_t)
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 379 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroyRenderer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_BindTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_BindTexture"); } else table[i] = (uintptr_t)
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 380 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_BindTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_UnbindTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_UnbindTexture"); } else table[i] = (uintptr_t)
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 381 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_UnbindTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWFromFile", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWFromFile"); } else table[i] = (uintptr_t)
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 382 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWFromFile", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWFromMem", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWFromMem"); } else table[i] = (uintptr_t)
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 383 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWFromMem", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWFromConstMem", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWFromConstMem"); } else table[i] = (uintptr_t)
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 384 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWFromConstMem", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AllocRW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AllocRW"); } else table[i] = (uintptr_t)
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 385 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AllocRW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeRW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeRW"); } else table[i] = (uintptr_t)
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 386 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeRW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadU8", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadU8"); } else table[i] = (uintptr_t)
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 387 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadU8", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadLE16", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadLE16"); } else table[i] = (uintptr_t)
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 388 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadLE16", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadBE16", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadBE16"); } else table[i] = (uintptr_t)
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 389 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadBE16", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadLE32", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadLE32"); } else table[i] = (uintptr_t)
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 390 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadLE32", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadBE32", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadBE32"); } else table[i] = (uintptr_t)
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 391 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadBE32", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadLE64", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadLE64"); } else table[i] = (uintptr_t)
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 392 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadLE64", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ReadBE64", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ReadBE64"); } else table[i] = (uintptr_t)
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 393 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ReadBE64", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteU8", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteU8"); } else table[i] = (uintptr_t)
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 394 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteU8", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteLE16", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteLE16"); } else table[i] = (uintptr_t)
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 395 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteLE16", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteBE16", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteBE16"); } else table[i] = (uintptr_t)
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 396 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteBE16", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteLE32", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteLE32"); } else table[i] = (uintptr_t)
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 397 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteLE32", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteBE32", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteBE32"); } else table[i] = (uintptr_t)
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 398 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteBE32", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteLE64", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteLE64"); } else table[i] = (uintptr_t)
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 399 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteLE64", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WriteBE64", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WriteBE64"); } else table[i] = (uintptr_t)
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 400 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WriteBE64", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateShapedWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateShapedWindow"); } else table[i] = (uintptr_t)
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 401 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateShapedWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsShapedWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsShapedWindow"); } else table[i] = (uintptr_t)
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 402 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsShapedWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowShape", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowShape"); } else table[i] = (uintptr_t)
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 403 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowShape", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetShapedWindowMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetShapedWindowMode"); } else table[i] = (uintptr_t)
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 404 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetShapedWindowMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_malloc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_malloc"); } else table[i] = (uintptr_t)
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 405 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_malloc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_calloc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_calloc"); } else table[i] = (uintptr_t)
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 406 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_calloc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_realloc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_realloc"); } else table[i] = (uintptr_t)
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 407 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_realloc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_free", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_free"); } else table[i] = (uintptr_t)
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 408 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_free", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_getenv", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_getenv"); } else table[i] = (uintptr_t)
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 409 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_getenv", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_setenv", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_setenv"); } else table[i] = (uintptr_t)
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 410 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_setenv", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_qsort", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_qsort"); } else table[i] = (uintptr_t)
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 411 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_qsort", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_abs", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_abs"); } else table[i] = (uintptr_t)
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 412 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_abs", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isdigit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isdigit"); } else table[i] = (uintptr_t)
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 413 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isdigit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isspace", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isspace"); } else table[i] = (uintptr_t)
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 414 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isspace", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_toupper", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_toupper"); } else table[i] = (uintptr_t)
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 415 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_toupper", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_tolower", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_tolower"); } else table[i] = (uintptr_t)
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 416 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_tolower", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_memset", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_memset"); } else table[i] = (uintptr_t)
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 417 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_memset", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_memcpy", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_memcpy"); } else table[i] = (uintptr_t)
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 418 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_memcpy", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_memmove", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_memmove"); } else table[i] = (uintptr_t)
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 419 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_memmove", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_memcmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_memcmp"); } else table[i] = (uintptr_t)
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 420 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_memcmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcslen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcslen"); } else table[i] = (uintptr_t)
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 421 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcslen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcslcpy", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcslcpy"); } else table[i] = (uintptr_t)
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 422 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcslcpy", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcslcat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcslcat"); } else table[i] = (uintptr_t)
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 423 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcslcat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strlen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strlen"); } else table[i] = (uintptr_t)
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 424 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strlen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strlcpy", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strlcpy"); } else table[i] = (uintptr_t)
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 425 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strlcpy", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_utf8strlcpy", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_utf8strlcpy"); } else table[i] = (uintptr_t)
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 426 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_utf8strlcpy", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strlcat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strlcat"); } else table[i] = (uintptr_t)
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 427 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strlcat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strdup", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strdup"); } else table[i] = (uintptr_t)
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 428 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strdup", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strrev", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strrev"); } else table[i] = (uintptr_t)
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 429 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strrev", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strupr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strupr"); } else table[i] = (uintptr_t)
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 430 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strupr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strlwr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strlwr"); } else table[i] = (uintptr_t)
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 431 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strlwr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strchr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strchr"); } else table[i] = (uintptr_t)
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 432 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strchr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strrchr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strrchr"); } else table[i] = (uintptr_t)
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 433 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strrchr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strstr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strstr"); } else table[i] = (uintptr_t)
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 434 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strstr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_itoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_itoa"); } else table[i] = (uintptr_t)
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 435 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_itoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_uitoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_uitoa"); } else table[i] = (uintptr_t)
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 436 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_uitoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ltoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ltoa"); } else table[i] = (uintptr_t)
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 437 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ltoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ultoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ultoa"); } else table[i] = (uintptr_t)
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 438 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ultoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_lltoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_lltoa"); } else table[i] = (uintptr_t)
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 439 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_lltoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ulltoa", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ulltoa"); } else table[i] = (uintptr_t)
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 440 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ulltoa", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atoi", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atoi"); } else table[i] = (uintptr_t)
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 441 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atoi", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atof", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atof"); } else table[i] = (uintptr_t)
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 442 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atof", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtol", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtol"); } else table[i] = (uintptr_t)
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 443 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtol", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtoul", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtoul"); } else table[i] = (uintptr_t)
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 444 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtoul", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtoll", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtoll"); } else table[i] = (uintptr_t)
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 445 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtoll", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtoull", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtoull"); } else table[i] = (uintptr_t)
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 446 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtoull", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtod"); } else table[i] = (uintptr_t)
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 447 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strcmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strcmp"); } else table[i] = (uintptr_t)
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 448 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strcmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strncmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strncmp"); } else table[i] = (uintptr_t)
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 449 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strncmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strcasecmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strcasecmp"); } else table[i] = (uintptr_t)
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 450 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strcasecmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strncasecmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strncasecmp"); } else table[i] = (uintptr_t)
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 451 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strncasecmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_vsnprintf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_vsnprintf"); } else table[i] = (uintptr_t)
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 452 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_vsnprintf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_acos", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_acos"); } else table[i] = (uintptr_t)
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 453 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_acos", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_asin", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_asin"); } else table[i] = (uintptr_t)
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 454 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_asin", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atan", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atan"); } else table[i] = (uintptr_t)
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 455 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atan", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atan2", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atan2"); } else table[i] = (uintptr_t)
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 456 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atan2", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ceil", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ceil"); } else table[i] = (uintptr_t)
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 457 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ceil", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_copysign", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_copysign"); } else table[i] = (uintptr_t)
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 458 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_copysign", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_cos", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_cos"); } else table[i] = (uintptr_t)
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 459 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_cos", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_cosf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_cosf"); } else table[i] = (uintptr_t)
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 460 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_cosf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_fabs", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_fabs"); } else table[i] = (uintptr_t)
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 461 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_fabs", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_floor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_floor"); } else table[i] = (uintptr_t)
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 462 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_floor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_log", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_log"); } else table[i] = (uintptr_t)
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 463 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_log", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_pow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_pow"); } else table[i] = (uintptr_t)
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 464 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_pow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_scalbn", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_scalbn"); } else table[i] = (uintptr_t)
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 465 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_scalbn", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_sin", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_sin"); } else table[i] = (uintptr_t)
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 466 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_sin", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_sinf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_sinf"); } else table[i] = (uintptr_t)
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 467 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_sinf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_sqrt", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_sqrt"); } else table[i] = (uintptr_t)
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 468 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_sqrt", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_iconv_open", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_iconv_open"); } else table[i] = (uintptr_t)
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 469 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_iconv_open", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_iconv_close", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_iconv_close"); } else table[i] = (uintptr_t)
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 470 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_iconv_close", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_iconv", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_iconv"); } else table[i] = (uintptr_t)
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 471 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_iconv", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_iconv_string", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_iconv_string"); } else table[i] = (uintptr_t)
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 472 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_iconv_string", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateRGBSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateRGBSurface"); } else table[i] = (uintptr_t)
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 473 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateRGBSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateRGBSurfaceFrom", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateRGBSurfaceFrom"); } else table[i] = (uintptr_t)
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 474 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateRGBSurfaceFrom", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeSurface"); } else table[i] = (uintptr_t)
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 475 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetSurfacePalette", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetSurfacePalette"); } else table[i] = (uintptr_t)
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 476 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetSurfacePalette", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockSurface"); } else table[i] = (uintptr_t)
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 477 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockSurface"); } else table[i] = (uintptr_t)
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 478 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadBMP_RW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadBMP_RW"); } else table[i] = (uintptr_t)
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 479 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadBMP_RW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SaveBMP_RW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SaveBMP_RW"); } else table[i] = (uintptr_t)
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 480 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SaveBMP_RW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetSurfaceRLE", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetSurfaceRLE"); } else table[i] = (uintptr_t)
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 481 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetSurfaceRLE", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetColorKey", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetColorKey"); } else table[i] = (uintptr_t)
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 482 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetColorKey", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetColorKey", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetColorKey"); } else table[i] = (uintptr_t)
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 483 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetColorKey", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetSurfaceColorMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetSurfaceColorMod"); } else table[i] = (uintptr_t)
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 484 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetSurfaceColorMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetSurfaceColorMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetSurfaceColorMod"); } else table[i] = (uintptr_t)
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 485 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetSurfaceColorMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetSurfaceAlphaMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetSurfaceAlphaMod"); } else table[i] = (uintptr_t)
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 486 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetSurfaceAlphaMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetSurfaceAlphaMod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetSurfaceAlphaMod"); } else table[i] = (uintptr_t)
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 487 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetSurfaceAlphaMod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetSurfaceBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetSurfaceBlendMode"); } else table[i] = (uintptr_t)
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 488 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetSurfaceBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetSurfaceBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetSurfaceBlendMode"); } else table[i] = (uintptr_t)
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 489 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetSurfaceBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetClipRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetClipRect"); } else table[i] = (uintptr_t)
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 490 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetClipRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetClipRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetClipRect"); } else table[i] = (uintptr_t)
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 491 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetClipRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ConvertSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ConvertSurface"); } else table[i] = (uintptr_t)
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 492 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ConvertSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ConvertSurfaceFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ConvertSurfaceFormat"); } else table[i] = (uintptr_t)
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 493 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ConvertSurfaceFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ConvertPixels", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ConvertPixels"); } else table[i] = (uintptr_t)
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 494 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ConvertPixels", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FillRect", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FillRect"); } else table[i] = (uintptr_t)
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 495 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FillRect", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FillRects", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FillRects"); } else table[i] = (uintptr_t)
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 496 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FillRects", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpperBlit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpperBlit"); } else table[i] = (uintptr_t)
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 497 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpperBlit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LowerBlit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LowerBlit"); } else table[i] = (uintptr_t)
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 498 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LowerBlit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SoftStretch", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SoftStretch"); } else table[i] = (uintptr_t)
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 499 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SoftStretch", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpperBlitScaled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpperBlitScaled"); } else table[i] = (uintptr_t)
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 500 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpperBlitScaled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LowerBlitScaled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LowerBlitScaled"); } else table[i] = (uintptr_t)
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 501 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LowerBlitScaled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowWMInfo", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowWMInfo"); } else table[i] = (uintptr_t)
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 502 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowWMInfo", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetThreadName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetThreadName"); } else table[i] = (uintptr_t)
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 503 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetThreadName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ThreadID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ThreadID"); } else table[i] = (uintptr_t)
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 504 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ThreadID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetThreadID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetThreadID"); } else table[i] = (uintptr_t)
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 505 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetThreadID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetThreadPriority", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetThreadPriority"); } else table[i] = (uintptr_t)
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 506 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetThreadPriority", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WaitThread", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WaitThread"); } else table[i] = (uintptr_t)
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 507 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WaitThread", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DetachThread", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DetachThread"); } else table[i] = (uintptr_t)
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 508 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DetachThread", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_TLSCreate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_TLSCreate"); } else table[i] = (uintptr_t)
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 509 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_TLSCreate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_TLSGet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_TLSGet"); } else table[i] = (uintptr_t)
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 510 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_TLSGet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_TLSSet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_TLSSet"); } else table[i] = (uintptr_t)
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 511 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_TLSSet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTicks", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTicks"); } else table[i] = (uintptr_t)
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 512 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTicks", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPerformanceCounter", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPerformanceCounter"); } else table[i] = (uintptr_t)
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 513 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPerformanceCounter", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPerformanceFrequency", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPerformanceFrequency"); } else table[i] = (uintptr_t)
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 514 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPerformanceFrequency", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Delay", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Delay"); } else table[i] = (uintptr_t)
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 515 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Delay", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AddTimer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AddTimer"); } else table[i] = (uintptr_t)
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 516 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AddTimer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RemoveTimer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RemoveTimer"); } else table[i] = (uintptr_t)
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 517 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RemoveTimer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumTouchDevices", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumTouchDevices"); } else table[i] = (uintptr_t)
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 518 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumTouchDevices", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTouchDevice", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTouchDevice"); } else table[i] = (uintptr_t)
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 519 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTouchDevice", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumTouchFingers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumTouchFingers"); } else table[i] = (uintptr_t)
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 520 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumTouchFingers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTouchFinger", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTouchFinger"); } else table[i] = (uintptr_t)
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 521 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTouchFinger", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetVersion", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetVersion"); } else table[i] = (uintptr_t)
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 522 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetVersion", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRevision", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRevision"); } else table[i] = (uintptr_t)
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 523 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRevision", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetRevisionNumber", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetRevisionNumber"); } else table[i] = (uintptr_t)
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 524 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetRevisionNumber", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumVideoDrivers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumVideoDrivers"); } else table[i] = (uintptr_t)
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 525 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumVideoDrivers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetVideoDriver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetVideoDriver"); } else table[i] = (uintptr_t)
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 526 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetVideoDriver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_VideoInit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_VideoInit"); } else table[i] = (uintptr_t)
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 527 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_VideoInit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_VideoQuit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_VideoQuit"); } else table[i] = (uintptr_t)
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 528 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_VideoQuit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCurrentVideoDriver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCurrentVideoDriver"); } else table[i] = (uintptr_t)
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 529 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCurrentVideoDriver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumVideoDisplays", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumVideoDisplays"); } else table[i] = (uintptr_t)
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 530 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumVideoDisplays", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayName"); } else table[i] = (uintptr_t)
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 531 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayBounds", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayBounds"); } else table[i] = (uintptr_t)
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 532 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayBounds", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumDisplayModes", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumDisplayModes"); } else table[i] = (uintptr_t)
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 533 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumDisplayModes", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayMode"); } else table[i] = (uintptr_t)
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 534 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDesktopDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDesktopDisplayMode"); } else table[i] = (uintptr_t)
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 535 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDesktopDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetCurrentDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetCurrentDisplayMode"); } else table[i] = (uintptr_t)
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 536 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetCurrentDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetClosestDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetClosestDisplayMode"); } else table[i] = (uintptr_t)
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 537 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetClosestDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowDisplayIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowDisplayIndex"); } else table[i] = (uintptr_t)
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 538 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowDisplayIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowDisplayMode"); } else table[i] = (uintptr_t)
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 539 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowDisplayMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowDisplayMode"); } else table[i] = (uintptr_t)
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 540 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowDisplayMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowPixelFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowPixelFormat"); } else table[i] = (uintptr_t)
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 541 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowPixelFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateWindow"); } else table[i] = (uintptr_t)
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 542 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateWindowFrom", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateWindowFrom"); } else table[i] = (uintptr_t)
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 543 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateWindowFrom", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowID"); } else table[i] = (uintptr_t)
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 544 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowFromID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowFromID"); } else table[i] = (uintptr_t)
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 545 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowFromID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowFlags", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowFlags"); } else table[i] = (uintptr_t)
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 546 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowFlags", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowTitle", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowTitle"); } else table[i] = (uintptr_t)
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 547 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowTitle", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowTitle", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowTitle"); } else table[i] = (uintptr_t)
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 548 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowTitle", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowIcon", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowIcon"); } else table[i] = (uintptr_t)
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 549 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowIcon", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowData", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowData"); } else table[i] = (uintptr_t)
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 550 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowData", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowData", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowData"); } else table[i] = (uintptr_t)
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 551 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowData", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowPosition", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowPosition"); } else table[i] = (uintptr_t)
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 552 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowPosition", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowPosition", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowPosition"); } else table[i] = (uintptr_t)
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 553 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowPosition", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowSize"); } else table[i] = (uintptr_t)
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 554 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowSize"); } else table[i] = (uintptr_t)
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 555 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowMinimumSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowMinimumSize"); } else table[i] = (uintptr_t)
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 556 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowMinimumSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowMinimumSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowMinimumSize"); } else table[i] = (uintptr_t)
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 557 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowMinimumSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowMaximumSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowMaximumSize"); } else table[i] = (uintptr_t)
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 558 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowMaximumSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowMaximumSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowMaximumSize"); } else table[i] = (uintptr_t)
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 559 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowMaximumSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowBordered", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowBordered"); } else table[i] = (uintptr_t)
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 560 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowBordered", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ShowWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ShowWindow"); } else table[i] = (uintptr_t)
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 561 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ShowWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HideWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HideWindow"); } else table[i] = (uintptr_t)
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 562 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HideWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RaiseWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RaiseWindow"); } else table[i] = (uintptr_t)
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 563 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RaiseWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MaximizeWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MaximizeWindow"); } else table[i] = (uintptr_t)
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 564 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MaximizeWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MinimizeWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MinimizeWindow"); } else table[i] = (uintptr_t)
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 565 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MinimizeWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RestoreWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RestoreWindow"); } else table[i] = (uintptr_t)
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 566 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RestoreWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowFullscreen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowFullscreen"); } else table[i] = (uintptr_t)
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 567 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowFullscreen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowSurface"); } else table[i] = (uintptr_t)
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 568 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpdateWindowSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpdateWindowSurface"); } else table[i] = (uintptr_t)
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 569 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpdateWindowSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpdateWindowSurfaceRects", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpdateWindowSurfaceRects"); } else table[i] = (uintptr_t)
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 570 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpdateWindowSurfaceRects", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowGrab"); } else table[i] = (uintptr_t)
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 571 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowGrab"); } else table[i] = (uintptr_t)
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 572 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowBrightness", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowBrightness"); } else table[i] = (uintptr_t)
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 573 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowBrightness", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowBrightness", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowBrightness"); } else table[i] = (uintptr_t)
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 574 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowBrightness", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowGammaRamp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowGammaRamp"); } else table[i] = (uintptr_t)
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 575 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowGammaRamp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowGammaRamp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowGammaRamp"); } else table[i] = (uintptr_t)
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 576 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowGammaRamp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DestroyWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DestroyWindow"); } else table[i] = (uintptr_t)
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 577 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DestroyWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsScreenSaverEnabled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsScreenSaverEnabled"); } else table[i] = (uintptr_t)
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 578 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsScreenSaverEnabled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_EnableScreenSaver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_EnableScreenSaver"); } else table[i] = (uintptr_t)
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 579 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_EnableScreenSaver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DisableScreenSaver", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DisableScreenSaver"); } else table[i] = (uintptr_t)
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 580 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DisableScreenSaver", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_LoadLibrary", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_LoadLibrary"); } else table[i] = (uintptr_t)
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 581 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_LoadLibrary", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetProcAddress", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetProcAddress"); } else table[i] = (uintptr_t)
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 582 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetProcAddress", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_UnloadLibrary", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_UnloadLibrary"); } else table[i] = (uintptr_t)
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 583 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_UnloadLibrary", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_ExtensionSupported", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_ExtensionSupported"); } else table[i] = (uintptr_t)
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 584 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_ExtensionSupported", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_SetAttribute", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_SetAttribute"); } else table[i] = (uintptr_t)
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 585 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_SetAttribute", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetAttribute", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetAttribute"); } else table[i] = (uintptr_t)
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 586 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetAttribute", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_CreateContext", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_CreateContext"); } else table[i] = (uintptr_t)
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 587 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_CreateContext", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_MakeCurrent", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_MakeCurrent"); } else table[i] = (uintptr_t)
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 588 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_MakeCurrent", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetCurrentWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetCurrentWindow"); } else table[i] = (uintptr_t)
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 589 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetCurrentWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetCurrentContext", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetCurrentContext"); } else table[i] = (uintptr_t)
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 590 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetCurrentContext", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetDrawableSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetDrawableSize"); } else table[i] = (uintptr_t)
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 591 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetDrawableSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_SetSwapInterval", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_SetSwapInterval"); } else table[i] = (uintptr_t)
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 592 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_SetSwapInterval", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_GetSwapInterval", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_GetSwapInterval"); } else table[i] = (uintptr_t)
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 593 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_GetSwapInterval", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_SwapWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_SwapWindow"); } else table[i] = (uintptr_t)
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 594 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_SwapWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_DeleteContext", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_DeleteContext"); } else table[i] = (uintptr_t)
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 595 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_DeleteContext", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_vsscanf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_vsscanf"); } else table[i] = (uintptr_t)
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 596 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_vsscanf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerAddMappingsFromRW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerAddMappingsFromRW"); } else table[i] = (uintptr_t)
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 597 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerAddMappingsFromRW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GL_ResetAttributes", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GL_ResetAttributes"); } else table[i] = (uintptr_t)
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 598 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GL_ResetAttributes", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasAVX", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasAVX"); } else table[i] = (uintptr_t)
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 599 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasAVX", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDefaultAssertionHandler", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDefaultAssertionHandler"); } else table[i] = (uintptr_t)
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 600 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDefaultAssertionHandler", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAssertionHandler", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAssertionHandler"); } else table[i] = (uintptr_t)
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 601 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAssertionHandler", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderIsClipEnabled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderIsClipEnabled"); } else table[i] = (uintptr_t)
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 605 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderIsClipEnabled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }





if (i < tablesize) { void *w = 
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_WarpMouseGlobal", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_WarpMouseGlobal"); } else table[i] = (uintptr_t)
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 611 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_WarpMouseGlobal", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_sqrtf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_sqrtf"); } else table[i] = (uintptr_t)
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 612 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_sqrtf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_tan", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_tan"); } else table[i] = (uintptr_t)
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 613 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_tan", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_tanf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_tanf"); } else table[i] = (uintptr_t)
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 614 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_tanf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CaptureMouse", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CaptureMouse"); } else table[i] = (uintptr_t)
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 615 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CaptureMouse", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowHitTest", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowHitTest"); } else table[i] = (uintptr_t)
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 616 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowHitTest", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetGlobalMouseState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetGlobalMouseState"); } else table[i] = (uintptr_t)
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 617 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetGlobalMouseState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasAVX2", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasAVX2"); } else table[i] = (uintptr_t)
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 618 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasAVX2", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_QueueAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_QueueAudio"); } else table[i] = (uintptr_t)
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 619 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_QueueAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetQueuedAudioSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetQueuedAudioSize"); } else table[i] = (uintptr_t)
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 620 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetQueuedAudioSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ClearQueuedAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ClearQueuedAudio"); } else table[i] = (uintptr_t)
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 621 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ClearQueuedAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetGrabbedWindow", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetGrabbedWindow"); } else table[i] = (uintptr_t)
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 622 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetGrabbedWindow", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayDPI", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayDPI"); } else table[i] = (uintptr_t)
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 626 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayDPI", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickCurrentPowerLevel", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickCurrentPowerLevel"); } else table[i] = (uintptr_t)
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 627 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickCurrentPowerLevel", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerFromInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerFromInstanceID"); } else table[i] = (uintptr_t)
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 628 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerFromInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickFromInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickFromInstanceID"); } else table[i] = (uintptr_t)
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 629 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickFromInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayUsableBounds", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayUsableBounds"); } else table[i] = (uintptr_t)
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 630 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayUsableBounds", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowBordersSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowBordersSize"); } else table[i] = (uintptr_t)
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 631 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowBordersSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowOpacity", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowOpacity"); } else table[i] = (uintptr_t)
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 632 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowOpacity", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowOpacity", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowOpacity"); } else table[i] = (uintptr_t)
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 633 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowOpacity", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowInputFocus", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowInputFocus"); } else table[i] = (uintptr_t)
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 634 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowInputFocus", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowModalFor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowModalFor"); } else table[i] = (uintptr_t)
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 635 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowModalFor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderSetIntegerScale", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderSetIntegerScale"); } else table[i] = (uintptr_t)
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 636 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderSetIntegerScale", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetIntegerScale", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetIntegerScale"); } else table[i] = (uintptr_t)
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 637 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetIntegerScale", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DequeueAudio", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DequeueAudio"); } else table[i] = (uintptr_t)
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 638 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DequeueAudio", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowResizable", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowResizable"); } else table[i] = (uintptr_t)
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 639 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowResizable", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateRGBSurfaceWithFormat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateRGBSurfaceWithFormat"); } else table[i] = (uintptr_t)
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 640 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateRGBSurfaceWithFormat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateRGBSurfaceWithFormatFrom", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateRGBSurfaceWithFormatFrom"); } else table[i] = (uintptr_t)
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 641 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateRGBSurfaceWithFormatFrom", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetHintBoolean", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetHintBoolean"); } else table[i] = (uintptr_t)
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 642 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetHintBoolean", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceVendor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceVendor"); } else table[i] = (uintptr_t)
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 643 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceVendor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceProduct", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceProduct"); } else table[i] = (uintptr_t)
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 644 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceProduct", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceProductVersion", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceProductVersion"); } else table[i] = (uintptr_t)
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 645 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceProductVersion", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetVendor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetVendor"); } else table[i] = (uintptr_t)
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 646 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetVendor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetProduct", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetProduct"); } else table[i] = (uintptr_t)
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 647 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetProduct", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetProductVersion", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetProductVersion"); } else table[i] = (uintptr_t)
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 648 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetProductVersion", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetVendor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetVendor"); } else table[i] = (uintptr_t)
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 649 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetVendor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetProduct", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetProduct"); } else table[i] = (uintptr_t)
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 650 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetProduct", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetProductVersion", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetProductVersion"); } else table[i] = (uintptr_t)
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 651 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetProductVersion", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasNEON", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasNEON"); } else table[i] = (uintptr_t)
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 652 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasNEON", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerNumMappings", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerNumMappings"); } else table[i] = (uintptr_t)
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 653 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerNumMappings", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerMappingForIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerMappingForIndex"); } else table[i] = (uintptr_t)
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 654 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerMappingForIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetAxisInitialState", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetAxisInitialState"); } else table[i] = (uintptr_t)
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 655 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetAxisInitialState", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceType"); } else table[i] = (uintptr_t)
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 656 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetType"); } else table[i] = (uintptr_t)
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 657 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MemoryBarrierReleaseFunction", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MemoryBarrierReleaseFunction"); } else table[i] = (uintptr_t)
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 658 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MemoryBarrierReleaseFunction", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_MemoryBarrierAcquireFunction", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_MemoryBarrierAcquireFunction"); } else table[i] = (uintptr_t)
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 659 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_MemoryBarrierAcquireFunction", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDeviceInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDeviceInstanceID"); } else table[i] = (uintptr_t)
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 660 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDeviceInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_utf8strlen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_utf8strlen"); } else table[i] = (uintptr_t)
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 661 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_utf8strlen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadFile_RW", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadFile_RW"); } else table[i] = (uintptr_t)
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 662 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadFile_RW", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcscmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcscmp"); } else table[i] = (uintptr_t)
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 663 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcscmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ComposeCustomBlendMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ComposeCustomBlendMode"); } else table[i] = (uintptr_t)
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 664 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ComposeCustomBlendMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_DuplicateSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_DuplicateSurface"); } else table[i] = (uintptr_t)
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 665 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_DuplicateSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_LoadLibrary", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_LoadLibrary"); } else table[i] = (uintptr_t)
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 666 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_LoadLibrary", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_GetVkGetInstanceProcAddr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_GetVkGetInstanceProcAddr"); } else table[i] = (uintptr_t)
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 667 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_GetVkGetInstanceProcAddr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_UnloadLibrary", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_UnloadLibrary"); } else table[i] = (uintptr_t)
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 668 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_UnloadLibrary", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_GetInstanceExtensions", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_GetInstanceExtensions"); } else table[i] = (uintptr_t)
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 669 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_GetInstanceExtensions", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_CreateSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_CreateSurface"); } else table[i] = (uintptr_t)
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 670 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_CreateSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Vulkan_GetDrawableSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Vulkan_GetDrawableSize"); } else table[i] = (uintptr_t)
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 671 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Vulkan_GetDrawableSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockJoysticks", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockJoysticks"); } else table[i] = (uintptr_t)
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 672 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockJoysticks", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockJoysticks", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockJoysticks"); } else table[i] = (uintptr_t)
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 673 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockJoysticks", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetMemoryFunctions", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetMemoryFunctions"); } else table[i] = (uintptr_t)
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 674 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetMemoryFunctions", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetMemoryFunctions", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetMemoryFunctions"); } else table[i] = (uintptr_t)
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 675 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetMemoryFunctions", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetNumAllocations", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetNumAllocations"); } else table[i] = (uintptr_t)
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 676 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetNumAllocations", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_NewAudioStream", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_NewAudioStream"); } else table[i] = (uintptr_t)
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 677 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_NewAudioStream", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioStreamPut", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioStreamPut"); } else table[i] = (uintptr_t)
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 678 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioStreamPut", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioStreamGet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioStreamGet"); } else table[i] = (uintptr_t)
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 679 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioStreamGet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioStreamClear", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioStreamClear"); } else table[i] = (uintptr_t)
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 680 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioStreamClear", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioStreamAvailable", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioStreamAvailable"); } else table[i] = (uintptr_t)
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 681 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioStreamAvailable", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_FreeAudioStream", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_FreeAudioStream"); } else table[i] = (uintptr_t)
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 682 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_FreeAudioStream", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_AudioStreamFlush", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_AudioStreamFlush"); } else table[i] = (uintptr_t)
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 683 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_AudioStreamFlush", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_acosf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_acosf"); } else table[i] = (uintptr_t)
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 684 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_acosf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_asinf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_asinf"); } else table[i] = (uintptr_t)
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 685 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_asinf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atanf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atanf"); } else table[i] = (uintptr_t)
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 686 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atanf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_atan2f", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_atan2f"); } else table[i] = (uintptr_t)
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 687 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_atan2f", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ceilf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ceilf"); } else table[i] = (uintptr_t)
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 688 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ceilf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_copysignf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_copysignf"); } else table[i] = (uintptr_t)
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 689 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_copysignf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_fabsf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_fabsf"); } else table[i] = (uintptr_t)
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 690 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_fabsf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_floorf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_floorf"); } else table[i] = (uintptr_t)
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 691 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_floorf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_logf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_logf"); } else table[i] = (uintptr_t)
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 692 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_logf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_powf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_powf"); } else table[i] = (uintptr_t)
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 693 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_powf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_scalbnf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_scalbnf"); } else table[i] = (uintptr_t)
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 694 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_scalbnf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_fmod", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_fmod"); } else table[i] = (uintptr_t)
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 695 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_fmod", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_fmodf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_fmodf"); } else table[i] = (uintptr_t)
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 696 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_fmodf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetYUVConversionMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetYUVConversionMode"); } else table[i] = (uintptr_t)
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 697 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetYUVConversionMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetYUVConversionMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetYUVConversionMode"); } else table[i] = (uintptr_t)
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 698 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetYUVConversionMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetYUVConversionModeForResolution", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetYUVConversionModeForResolution"); } else table[i] = (uintptr_t)
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 699 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetYUVConversionModeForResolution", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetMetalLayer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetMetalLayer"); } else table[i] = (uintptr_t)
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 700 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetMetalLayer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderGetMetalCommandEncoder", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderGetMetalCommandEncoder"); } else table[i] = (uintptr_t)
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 701 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderGetMetalCommandEncoder", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }






if (i < tablesize) { void *w = 
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_log10", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_log10"); } else table[i] = (uintptr_t)
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 708 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_log10", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_log10f", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_log10f"); } else table[i] = (uintptr_t)
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 709 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_log10f", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerMappingForDeviceIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerMappingForDeviceIndex"); } else table[i] = (uintptr_t)
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 710 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerMappingForDeviceIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasAVX512F", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasAVX512F"); } else table[i] = (uintptr_t)
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 714 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasAVX512F", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }





if (i < tablesize) { void *w = 
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_exp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_exp"); } else table[i] = (uintptr_t)
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 720 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_exp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_expf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_expf"); } else table[i] = (uintptr_t)
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 721 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_expf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcsdup", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcsdup"); } else table[i] = (uintptr_t)
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 722 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcsdup", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerRumble", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerRumble"); } else table[i] = (uintptr_t)
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 723 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerRumble", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickRumble", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickRumble"); } else table[i] = (uintptr_t)
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 724 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickRumble", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_NumSensors", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_NumSensors"); } else table[i] = (uintptr_t)
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 725 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_NumSensors", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetDeviceName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetDeviceName"); } else table[i] = (uintptr_t)
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 726 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetDeviceName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetDeviceType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetDeviceType"); } else table[i] = (uintptr_t)
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 727 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetDeviceType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetDeviceNonPortableType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetDeviceNonPortableType"); } else table[i] = (uintptr_t)
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 728 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetDeviceNonPortableType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetDeviceInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetDeviceInstanceID"); } else table[i] = (uintptr_t)
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 729 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetDeviceInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorOpen", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorOpen"); } else table[i] = (uintptr_t)
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 730 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorOpen", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorFromInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorFromInstanceID"); } else table[i] = (uintptr_t)
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 731 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorFromInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetName", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetName"); } else table[i] = (uintptr_t)
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 732 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetName", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetType"); } else table[i] = (uintptr_t)
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 733 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetNonPortableType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetNonPortableType"); } else table[i] = (uintptr_t)
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 734 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetNonPortableType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetInstanceID", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetInstanceID"); } else table[i] = (uintptr_t)
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 735 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetInstanceID", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorGetData", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorGetData"); } else table[i] = (uintptr_t)
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 736 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorGetData", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorClose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorClose"); } else table[i] = (uintptr_t)
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 737 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorClose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SensorUpdate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SensorUpdate"); } else table[i] = (uintptr_t)
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 738 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SensorUpdate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_IsTablet", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_IsTablet"); } else table[i] = (uintptr_t)
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 739 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_IsTablet", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetDisplayOrientation", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetDisplayOrientation"); } else table[i] = (uintptr_t)
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 740 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetDisplayOrientation", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasColorKey", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasColorKey"); } else table[i] = (uintptr_t)
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 741 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasColorKey", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
if (i < tablesize) { void *w = 
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_CreateThreadWithStackSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_CreateThreadWithStackSize"); } else table[i] = (uintptr_t)
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 752 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_CreateThreadWithStackSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }


if (i < tablesize) { void *w = 
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetDevicePlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetDevicePlayerIndex"); } else table[i] = (uintptr_t)
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 755 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetDevicePlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetPlayerIndex"); } else table[i] = (uintptr_t)
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 756 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetPlayerIndex"); } else table[i] = (uintptr_t)
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 757 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderFlush", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderFlush"); } else table[i] = (uintptr_t)
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 758 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderFlush", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawPointF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawPointF"); } else table[i] = (uintptr_t)
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 759 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawPointF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawPointsF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawPointsF"); } else table[i] = (uintptr_t)
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 760 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawPointsF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawLineF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawLineF"); } else table[i] = (uintptr_t)
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 761 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawLineF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawLinesF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawLinesF"); } else table[i] = (uintptr_t)
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 762 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawLinesF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawRectF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawRectF"); } else table[i] = (uintptr_t)
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 763 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawRectF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderDrawRectsF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderDrawRectsF"); } else table[i] = (uintptr_t)
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 764 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderDrawRectsF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderFillRectF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderFillRectF"); } else table[i] = (uintptr_t)
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 765 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderFillRectF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderFillRectsF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderFillRectsF"); } else table[i] = (uintptr_t)
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 766 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderFillRectsF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderCopyF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderCopyF"); } else table[i] = (uintptr_t)
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 767 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderCopyF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RenderCopyExF", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RenderCopyExF"); } else table[i] = (uintptr_t)
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 768 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RenderCopyExF", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTouchDeviceType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTouchDeviceType"); } else table[i] = (uintptr_t)
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 769 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTouchDeviceType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SIMDGetAlignment", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SIMDGetAlignment"); } else table[i] = (uintptr_t)
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 773 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SIMDGetAlignment", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SIMDAlloc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SIMDAlloc"); } else table[i] = (uintptr_t)
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 774 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SIMDAlloc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SIMDFree", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SIMDFree"); } else table[i] = (uintptr_t)
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 775 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SIMDFree", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWsize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWsize"); } else table[i] = (uintptr_t)
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 776 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWsize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWseek", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWseek"); } else table[i] = (uintptr_t)
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 777 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWseek", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWtell", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWtell"); } else table[i] = (uintptr_t)
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 778 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWtell", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWread", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWread"); } else table[i] = (uintptr_t)
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 779 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWread", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWwrite", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWwrite"); } else table[i] = (uintptr_t)
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 780 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWwrite", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_RWclose", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_RWclose"); } else table[i] = (uintptr_t)
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 781 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_RWclose", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LoadFile", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LoadFile"); } else table[i] = (uintptr_t)
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 782 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LoadFile", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Metal_CreateView", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Metal_CreateView"); } else table[i] = (uintptr_t)
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 783 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Metal_CreateView", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Metal_DestroyView", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Metal_DestroyView"); } else table[i] = (uintptr_t)
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 784 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Metal_DestroyView", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockTextureToSurface", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockTextureToSurface"); } else table[i] = (uintptr_t)
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 785 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockTextureToSurface", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasARMSIMD", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasARMSIMD"); } else table[i] = (uintptr_t)
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 786 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasARMSIMD", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_strtokr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_strtokr"); } else table[i] = (uintptr_t)
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 787 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_strtokr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcsstr", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcsstr"); } else table[i] = (uintptr_t)
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 788 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcsstr", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcsncmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcsncmp"); } else table[i] = (uintptr_t)
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 789 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcsncmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerTypeForIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerTypeForIndex"); } else table[i] = (uintptr_t)
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 790 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerTypeForIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetType", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetType"); } else table[i] = (uintptr_t)
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 791 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetType", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerFromPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerFromPlayerIndex"); } else table[i] = (uintptr_t)
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 792 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerFromPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerSetPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerSetPlayerIndex"); } else table[i] = (uintptr_t)
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 793 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerSetPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickFromPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickFromPlayerIndex"); } else table[i] = (uintptr_t)
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 794 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickFromPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickSetPlayerIndex", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickSetPlayerIndex"); } else table[i] = (uintptr_t)
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 795 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickSetPlayerIndex", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetTextureScaleMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetTextureScaleMode"); } else table[i] = (uintptr_t)
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 796 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetTextureScaleMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetTextureScaleMode", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetTextureScaleMode"); } else table[i] = (uintptr_t)
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 797 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetTextureScaleMode", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationWillTerminate", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationWillTerminate"); } else table[i] = (uintptr_t)
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 798 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationWillTerminate", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationDidReceiveMemoryWarning", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationDidReceiveMemoryWarning"); } else table[i] = (uintptr_t)
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 799 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationDidReceiveMemoryWarning", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationWillResignActive", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationWillResignActive"); } else table[i] = (uintptr_t)
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 800 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationWillResignActive", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationDidEnterBackground", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationDidEnterBackground"); } else table[i] = (uintptr_t)
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 801 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationDidEnterBackground", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationWillEnterForeground", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationWillEnterForeground"); } else table[i] = (uintptr_t)
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 802 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationWillEnterForeground", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OnApplicationDidBecomeActive", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OnApplicationDidBecomeActive"); } else table[i] = (uintptr_t)
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 803 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OnApplicationDidBecomeActive", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }






if (i < tablesize) { void *w = 
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isupper", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isupper"); } else table[i] = (uintptr_t)
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 810 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isupper", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_islower", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_islower"); } else table[i] = (uintptr_t)
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 811 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_islower", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickAttachVirtual", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickAttachVirtual"); } else table[i] = (uintptr_t)
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 812 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickAttachVirtual", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickDetachVirtual", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickDetachVirtual"); } else table[i] = (uintptr_t)
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 813 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickDetachVirtual", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickIsVirtual", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickIsVirtual"); } else table[i] = (uintptr_t)
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 814 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickIsVirtual", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickSetVirtualAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickSetVirtualAxis"); } else table[i] = (uintptr_t)
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 815 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickSetVirtualAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickSetVirtualButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickSetVirtualButton"); } else table[i] = (uintptr_t)
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 816 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickSetVirtualButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickSetVirtualHat", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickSetVirtualHat"); } else table[i] = (uintptr_t)
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 817 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickSetVirtualHat", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetErrorMsg", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetErrorMsg"); } else table[i] = (uintptr_t)
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 818 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetErrorMsg", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_LockSensors", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_LockSensors"); } else table[i] = (uintptr_t)
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 819 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_LockSensors", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UnlockSensors", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UnlockSensors"); } else table[i] = (uintptr_t)
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 820 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UnlockSensors", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Metal_GetLayer", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Metal_GetLayer"); } else table[i] = (uintptr_t)
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 821 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Metal_GetLayer", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_Metal_GetDrawableSize", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_Metal_GetDrawableSize"); } else table[i] = (uintptr_t)
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 822 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_Metal_GetDrawableSize", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_trunc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_trunc"); } else table[i] = (uintptr_t)
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 823 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_trunc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_truncf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_truncf"); } else table[i] = (uintptr_t)
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 824 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_truncf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetPreferredLocales", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetPreferredLocales"); } else table[i] = (uintptr_t)
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 825 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetPreferredLocales", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SIMDRealloc", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SIMDRealloc"); } else table[i] = (uintptr_t)
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 826 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SIMDRealloc", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_OpenURL", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_OpenURL"); } else table[i] = (uintptr_t)
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 830 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_OpenURL", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_HasSurfaceRLE", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_HasSurfaceRLE"); } else table[i] = (uintptr_t)
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 831 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_HasSurfaceRLE", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerHasLED", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerHasLED"); } else table[i] = (uintptr_t)
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 832 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerHasLED", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerSetLED", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerSetLED"); } else table[i] = (uintptr_t)
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 833 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerSetLED", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickHasLED", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickHasLED"); } else table[i] = (uintptr_t)
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 834 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickHasLED", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickSetLED", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickSetLED"); } else table[i] = (uintptr_t)
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 835 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickSetLED", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerRumbleTriggers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerRumbleTriggers"); } else table[i] = (uintptr_t)
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 836 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerRumbleTriggers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickRumbleTriggers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickRumbleTriggers"); } else table[i] = (uintptr_t)
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 837 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickRumbleTriggers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerHasAxis", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerHasAxis"); } else table[i] = (uintptr_t)
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 838 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerHasAxis", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerHasButton", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerHasButton"); } else table[i] = (uintptr_t)
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 839 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerHasButton", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetNumTouchpads", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetNumTouchpads"); } else table[i] = (uintptr_t)
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 840 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetNumTouchpads", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetNumTouchpadFingers", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetNumTouchpadFingers"); } else table[i] = (uintptr_t)
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 841 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetNumTouchpadFingers", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetTouchpadFinger", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetTouchpadFinger"); } else table[i] = (uintptr_t)
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 842 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetTouchpadFinger", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_crc32", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_crc32"); } else table[i] = (uintptr_t)
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 843 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_crc32", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetSerial", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetSerial"); } else table[i] = (uintptr_t)
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 844 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetSerial", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_JoystickGetSerial", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_JoystickGetSerial"); } else table[i] = (uintptr_t)
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 845 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_JoystickGetSerial", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerHasSensor", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerHasSensor"); } else table[i] = (uintptr_t)
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 846 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerHasSensor", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerSetSensorEnabled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerSetSensorEnabled"); } else table[i] = (uintptr_t)
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 847 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerSetSensorEnabled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerIsSensorEnabled", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerIsSensorEnabled"); } else table[i] = (uintptr_t)
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 848 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerIsSensorEnabled", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GameControllerGetSensorData", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GameControllerGetSensorData"); } else table[i] = (uintptr_t)
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 849 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GameControllerGetSensorData", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcscasecmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcscasecmp"); } else table[i] = (uintptr_t)
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 850 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcscasecmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_wcsncasecmp", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_wcsncasecmp"); } else table[i] = (uintptr_t)
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 851 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_wcsncasecmp", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_round", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_round"); } else table[i] = (uintptr_t)
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 852 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_round", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_roundf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_roundf"); } else table[i] = (uintptr_t)
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 853 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_roundf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_lround", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_lround"); } else table[i] = (uintptr_t)
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 854 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_lround", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_lroundf", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_lroundf"); } else table[i] = (uintptr_t)
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 855 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_lroundf", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SoftStretchLinear", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SoftStretchLinear"); } else table[i] = (uintptr_t)
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 856 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SoftStretchLinear", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_UpdateNVTexture", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_UpdateNVTexture"); } else table[i] = (uintptr_t)
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 860 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_UpdateNVTexture", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowKeyboardGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowKeyboardGrab"); } else table[i] = (uintptr_t)
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 861 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowKeyboardGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_SetWindowMouseGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_SetWindowMouseGrab"); } else table[i] = (uintptr_t)
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 862 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_SetWindowMouseGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowKeyboardGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowKeyboardGrab"); } else table[i] = (uintptr_t)
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 863 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowKeyboardGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetWindowMouseGrab", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetWindowMouseGrab"); } else table[i] = (uintptr_t)
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 864 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetWindowMouseGrab", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isalpha", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isalpha"); } else table[i] = (uintptr_t)
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 865 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isalpha", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isalnum", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isalnum"); } else table[i] = (uintptr_t)
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 866 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isalnum", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isblank", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isblank"); } else table[i] = (uintptr_t)
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 867 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isblank", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_iscntrl", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_iscntrl"); } else table[i] = (uintptr_t)
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 868 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_iscntrl", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isxdigit", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isxdigit"); } else table[i] = (uintptr_t)
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 869 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isxdigit", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_ispunct", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_ispunct"); } else table[i] = (uintptr_t)
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 870 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_ispunct", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isprint", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isprint"); } else table[i] = (uintptr_t)
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 871 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isprint", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_isgraph", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_isgraph"); } else table[i] = (uintptr_t)
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 872 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_isgraph", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }



if (i < tablesize) { void *w = 
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_GetAudioDeviceSpec", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_GetAudioDeviceSpec"); } else table[i] = (uintptr_t)
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 876 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_GetAudioDeviceSpec", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
if (i < tablesize) { void *w = 
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; void *f = 
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; if (get_sdl_priv(emu, "SDL_TLSCleanup", &w, &f)) { table[i] = AddCheckBridge(my_lib->w.bridge, w, f, 0, "SDL_TLSCleanup"); } else table[i] = (uintptr_t)
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h" 3 4
((void *)0)
# 877 "/home/ssd/pico/code/box86/src/wrapped/SDL_dynapi_procs.h"
; do {if((2)<=box86_log) {fprintf(ftrace, "SDL_DYNAPI_entry: %s => %p (%p)\n", "SDL_TLSCleanup", (void*)table[i], f); fflush(ftrace);}} while(0); i++; }
# 610 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
    return 0;
}

__attribute__((visibility("default"))) void *my2_SDL_CreateWindow(x86emu_t* emu, const char *title, int x, int y, int w, int h, uint32_t flags)
{
# 623 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
    const char *force_es = getenv("BOX86_FORCE_ES");
    if (force_es && *force_es && (force_es[0] != '0')) {






        if (!
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
            force_es[0]
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
            ))] & (unsigned short int) _ISdigit) 
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                 || (force_es[1] != '\0' && !
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                             ((*__ctype_b_loc ())[(int) ((
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                             force_es[1]
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                             ))] & (unsigned short int) _ISdigit)
# 631 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                                                 )) {
            do {if((0)<=box86_log) {fprintf(ftrace, "Warning: ignoring malformed BOX86_FORCE_ES.\n"); fflush(ftrace);}} while(0);
        } else {
            int (*SDL_GL_SetAttribute_p)(uint32_t, int) = dlsym(emu->context->sdl2lib->w.lib, "SDL_GL_SetAttribute");
            SDL_GL_SetAttribute_p(21, 4);
            SDL_GL_SetAttribute_p(17, force_es[0] - '0');
            SDL_GL_SetAttribute_p(18, force_es[1] ? (force_es[1] - '0') : 0);
            flags |= 2;
        }
    }

    return my->SDL_CreateWindow((void*)title, x, y, w, h, flags);
}

char __attribute__((visibility("default"))) *my2_SDL_GetBasePath(x86emu_t* emu) {
    char* p = strdup(emu->context->fullpath);
    char* b = strrchr(p, '/');
    if(b)
        *(b+1) = '\0';
    return p;
}

__attribute__((visibility("default"))) void my2_SDL_LogCritical(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 6, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_LogError(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 5, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_LogWarn(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 4, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_LogInfo(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 3, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_LogDebug(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 2, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_LogVerbose(x86emu_t* emu, int32_t cat, void* fmt, void *b) {






    (void)emu;
    my->SDL_LogMessageV(cat, 1, fmt, b);

}

__attribute__((visibility("default"))) void my2_SDL_Log(x86emu_t* emu, void* fmt, void *b) {







    (void)emu;
    my->SDL_LogMessageV(0, 3, fmt, b);

}

__attribute__((visibility("default"))) void* my2_SDL_GL_GetProcAddress(x86emu_t* emu, void* name)
{
    khint_t k;
    const char* rname = (const char*)name;
    void* ret = getGLProcAddress(emu, (glprocaddress_t)my->SDL_GL_GetProcAddress, rname);

    static int lib_checked = 0;
    if(!lib_checked) {
        lib_checked = 1;

        if(!my_glhandle && !GetLibInternal(box86_libGL?box86_libGL:"libGL.so.1"))

            my_glhandle = my_dlopen(emu, box86_libGL?box86_libGL:"libGL.so.1", 
# 750 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                                              0x00001
# 750 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                                                       |
# 750 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                                                                        0x00100
# 750 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                                                                                   );
    }

    return ret;
}


typedef void(*sdl2_tls_dtor)(void*);
static uintptr_t dtor_emu[16] = {0};
static void tls_dtor_callback(int n, void* a)
{
 if(dtor_emu[n]) {
        RunFunctionFmt(dtor_emu[n], "p", a);
 }
}






void tls_dtor_callback_0(void* a) { tls_dtor_callback(0, a); }
void tls_dtor_callback_1(void* a) { tls_dtor_callback(1, a); }
void tls_dtor_callback_2(void* a) { tls_dtor_callback(2, a); }
void tls_dtor_callback_3(void* a) { tls_dtor_callback(3, a); }
void tls_dtor_callback_4(void* a) { tls_dtor_callback(4, a); }
void tls_dtor_callback_5(void* a) { tls_dtor_callback(5, a); }
void tls_dtor_callback_6(void* a) { tls_dtor_callback(6, a); }
void tls_dtor_callback_7(void* a) { tls_dtor_callback(7, a); }
void tls_dtor_callback_8(void* a) { tls_dtor_callback(8, a); }
void tls_dtor_callback_9(void* a) { tls_dtor_callback(9, a); }
void tls_dtor_callback_10(void* a) { tls_dtor_callback(10, a); }
void tls_dtor_callback_11(void* a) { tls_dtor_callback(11, a); }
void tls_dtor_callback_12(void* a) { tls_dtor_callback(12, a); }
void tls_dtor_callback_13(void* a) { tls_dtor_callback(13, a); }
void tls_dtor_callback_14(void* a) { tls_dtor_callback(14, a); }
void tls_dtor_callback_15(void* a) { tls_dtor_callback(15, a); }

static const sdl2_tls_dtor dtor_cb[16] = {
  tls_dtor_callback_0, tls_dtor_callback_1, tls_dtor_callback_2, tls_dtor_callback_3
 ,tls_dtor_callback_4, tls_dtor_callback_5, tls_dtor_callback_6, tls_dtor_callback_7
 ,tls_dtor_callback_8, tls_dtor_callback_9, tls_dtor_callback_10,tls_dtor_callback_11
 ,tls_dtor_callback_12,tls_dtor_callback_13,tls_dtor_callback_14,tls_dtor_callback_15
};
__attribute__((visibility("default"))) int32_t my2_SDL_TLSSet(x86emu_t* emu, uint32_t id, void* value, void* dtor)
{
    (void)emu;
 if(!dtor)
  return my->SDL_TLSSet(id, value, 
# 798 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
                                  ((void *)0)
# 798 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
                                      );
 int n = 0;
 while (n<16) {
  if(!dtor_emu[n] || (dtor_emu[n])==((uintptr_t)dtor)) {
   dtor_emu[n] = (uintptr_t)dtor;
   return my->SDL_TLSSet(id, value, dtor_cb[n]);
  }
  ++n;
 }
 do {if((0)<=box86_log) {fprintf(ftrace, "Error: SDL2 SDL_TLSSet with destructor: no more slot!\n"); fflush(ftrace);}} while(0);

 return -1;
}

__attribute__((visibility("default"))) void* my2_SDL_JoystickGetDeviceGUID(x86emu_t* emu, void* p, int32_t idx)
{
    (void)emu;
    *(SDL_JoystickGUID*)p = my->SDL_JoystickGetDeviceGUID(idx);
    return p;
}

__attribute__((visibility("default"))) void* my2_SDL_JoystickGetGUID(x86emu_t* emu, void* p, void* joystick)
{
    (void)emu;
    *(SDL_JoystickGUID*)p = my->SDL_JoystickGetGUID(joystick);
    return p;
}

__attribute__((visibility("default"))) void* my2_SDL_JoystickGetGUIDFromString(x86emu_t* emu, void* p, void* pchGUID)
{
    (void)emu;
    *(SDL_JoystickGUID*)p = my->SDL_JoystickGetGUIDFromString(pchGUID);
    return p;
}

__attribute__((visibility("default"))) void* my2_SDL_GameControllerGetBindForAxis(x86emu_t* emu, void* p, void* controller, int32_t axis)
{
    (void)emu;
    *(SDL_GameControllerButtonBind*)p = my->SDL_GameControllerGetBindForAxis(controller, axis);
    return p;
}

__attribute__((visibility("default"))) void* my2_SDL_GameControllerGetBindForButton(x86emu_t* emu, void* p, void* controller, int32_t button)
{
    (void)emu;
    *(SDL_GameControllerButtonBind*)p = my->SDL_GameControllerGetBindForButton(controller, button);
    return p;
}

__attribute__((visibility("default"))) void my2_SDL_AddEventWatch(x86emu_t* emu, void* p, void* userdata)
{
    (void)emu;
    my->SDL_AddEventWatch(find_eventfilter_Fct(p), userdata);
}
__attribute__((visibility("default"))) void my2_SDL_DelEventWatch(x86emu_t* emu, void* p, void* userdata)
{
    (void)emu;
    my->SDL_DelEventWatch(find_eventfilter_Fct(p), userdata);
}

__attribute__((visibility("default"))) void* my2_SDL_LoadObject(x86emu_t* emu, void* sofile)
{
    return my_dlopen(emu, sofile, 0);
}
__attribute__((visibility("default"))) void my2_SDL_UnloadObject(x86emu_t* emu, void* handle)
{
    my_dlclose(emu, handle);
}
__attribute__((visibility("default"))) void* my2_SDL_LoadFunction(x86emu_t* emu, void* handle, void* name)
{
    return my_dlsym(emu, handle, name);
}

__attribute__((visibility("default"))) void my2_SDL_GetJoystickGUIDInfo(x86emu_t* emu, uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint16_t* vendor, uint16_t* product, uint16_t* version, uint16_t* crc16)
{
    (void)emu;
    uint16_t dummy = 0;
    SDL_JoystickGUID_Helper guid;
    guid.u[0] = a;
    guid.u[1] = b;
    guid.u[2] = c;
    guid.u[3] = d;
    if(my->SDL_GetJoystickGUIDInfo) {
        my->SDL_GetJoystickGUIDInfo(guid.guid, vendor, product, version, box86_sdl2_jguid?(&dummy):crc16);
    } else {

        if (guid.u16[1]==0x0000 && guid.u16[3]==0x0000 && guid.u16[5]==0x0000)
            {
            if(vendor) *vendor = guid.u16[2];
            if(product) *product = guid.u16[4];
            if(version) *version = guid.u16[6];
        } else {
            if(vendor) *vendor = 0;
            if(product) *product = 0;
            if(version) *version = 0;
        }
    }
}

__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickPS4(x86emu_t* emu, uint16_t vendor, uint16_t product_id)
{
    (void)emu;
    if(my->SDL_IsJoystickPS4)
        return my->SDL_IsJoystickPS4(vendor, product_id);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickNintendoSwitchPro(x86emu_t* emu, uint16_t vendor, uint16_t product_id)
{
    (void)emu;
    if(my->SDL_IsJoystickNintendoSwitchPro)
        return my->SDL_IsJoystickNintendoSwitchPro(vendor, product_id);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickSteamController(x86emu_t* emu, uint16_t vendor, uint16_t product_id)
{
    (void)emu;
    if(my->SDL_IsJoystickSteamController)
        return my->SDL_IsJoystickSteamController(vendor, product_id);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickXbox360(x86emu_t* emu, uint16_t vendor, uint16_t product_id)
{
    (void)emu;
    if(my->SDL_IsJoystickXbox360)
        return my->SDL_IsJoystickXbox360(vendor, product_id);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickXboxOne(x86emu_t* emu, uint16_t vendor, uint16_t product_id)
{
    (void)emu;
    if(my->SDL_IsJoystickXboxOne)
        return my->SDL_IsJoystickXboxOne(vendor, product_id);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickXInput(x86emu_t* emu, SDL_JoystickGUID p)
{
    (void)emu;
    if(my->SDL_IsJoystickXInput)
        return my->SDL_IsJoystickXInput(p);

    return 0;
}
__attribute__((visibility("default"))) int32_t my2_SDL_IsJoystickHIDAPI(x86emu_t* emu, SDL_JoystickGUID p)
{
    (void)emu;
    if(my->SDL_IsJoystickHIDAPI)
        return my->SDL_IsJoystickHIDAPI(p);

    return 0;
}

void* my_vkGetInstanceProcAddr(x86emu_t* emu, void* device, void* name);
__attribute__((visibility("default"))) void* my2_SDL_Vulkan_GetVkGetInstanceProcAddr(x86emu_t* emu)
{
    if(!emu->context->vkprocaddress)
        emu->context->vkprocaddress = (vkprocaddress_t)my->SDL_Vulkan_GetVkGetInstanceProcAddr();

    if(emu->context->vkprocaddress)
        return (void*)AddCheckBridge(my_lib->w.bridge, pFEpp, my_vkGetInstanceProcAddr, 0, "vkGetInstanceProcAddr");
    return 
# 962 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 3 4
          ((void *)0)
# 962 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
              ;
}
# 987 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c"
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 1





# 1 "/home/ssd/pico/code/box86/src/librarian/library_inner.h" 1



void WrappedLib_CommonInit(library_t* lib);
void WrappedLib_FinishFini(library_t* lib);
# 7 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
# 55 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onesymbol_t sdl2symbolmap[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
{"SDL_abs", iFi, 0},
{"SDL_acos", dFd, 0},
{"SDL_acosf", fFf, 0},



{"SDL_AllocFormat", pFu, 0},
{"SDL_AllocPalette", pFi, 0},
{"SDL_AllocRW", pFv, 0},
{"SDL_asin", dFd, 0},
{"SDL_asinf", fFf, 0},
{"SDL_atan", dFd, 0},
{"SDL_atan2", dFdd, 0},
{"SDL_atan2f", fFff, 0},
{"SDL_atanf", fFf, 0},
{"SDL_atof", dFp, 0},
{"SDL_atoi", iFp, 0},
{"SDL_AtomicAdd", iFpi, 0},
{"SDL_AtomicCAS", iFpii, 0},
{"SDL_AtomicCASPtr", iFppp, 0},
{"SDL_AtomicGet", iFp, 0},
{"SDL_AtomicGetPtr", pFp, 0},
{"SDL_AtomicLock", vFp, 0},
{"SDL_AtomicSet", iFpi, 0},
{"SDL_AtomicSetPtr", pFpp, 0},
{"SDL_AtomicTryLock", iFp, 0},
{"SDL_AtomicUnlock", vFp, 0},
{"SDL_AudioInit", iFp, 0},
{"SDL_AudioQuit", vFv, 0},
{"SDL_AudioStreamAvailable", iFp, 0},
{"SDL_AudioStreamClear", vFp, 0},
{"SDL_AudioStreamFlush", iFp, 0},
{"SDL_AudioStreamGet", iFppi, 0},
{"SDL_AudioStreamPut", iFppi, 0},
{"SDL_BuildAudioCVT", iFpuuiuui, 0},
{"SDL_CalculateGammaRamp", vFfp, 0},
{"SDL_calloc", pFuu, 0},
{"SDL_CaptureMouse", iFi, 0},
{"SDL_ceil", dFd, 0},
{"SDL_ceilf", fFf, 0},
{"SDL_ClearError", vFv, 0},
{"SDL_ClearHints", vFv, 0},
{"SDL_ClearQueuedAudio", vFu, 0},
{"SDL_CloseAudio", vFv, 0},
{"SDL_CloseAudioDevice", vFi, 0},
{"SDL_ComposeCustomBlendMode", iFiiiiii, 0},
{"SDL_CondBroadcast", iFp, 0},
{"SDL_CondSignal", iFp, 0},
{"SDL_CondWait", iFpp, 0},
{"SDL_CondWaitTimeout", iFppu, 0},
{"SDL_ConvertAudio", iFp, 0},
{"SDL_ConvertPixels", iFiiupiupi, 0},
{"SDL_ConvertSurface", pFppu, 0},
{"SDL_ConvertSurfaceFormat", pFpuu, 0},
{"SDL_copysign", dFdd, 0},
{"SDL_copysignf", fFff, 0},
{"SDL_cos", dFd, 0},
{"SDL_cosf", fFf, 0},
{"SDL_CreateColorCursor", pFpii, 0},
{"SDL_CreateCond", pFv, 0},
{"SDL_CreateCursor", pFppiiii, 0},
{"SDL_CreateMutex", pFv, 0},
{"SDL_CreateRenderer", pFpiu, 0},
{"SDL_CreateRGBSurface", pFuiiiuuuu, 0},
{"SDL_CreateRGBSurfaceFrom", pFpiiiiuuuu, 0},
{"SDL_CreateRGBSurfaceWithFormat", pFuiiiu, 0},
{"SDL_CreateRGBSurfaceWithFormatFrom", pFpiiiiu, 0},
{"SDL_CreateSemaphore", pFu, 0},
{"SDL_CreateShapedWindow", pFpuuuuu, 0},
{"SDL_CreateSoftwareRenderer", pFp, 0},
{"SDL_CreateSystemCursor", pFu, 0},
{"SDL_CreateTexture", pFpuiii, 0},
{"SDL_CreateTextureFromSurface", pFpp, 0},



{"SDL_CreateWindowAndRenderer", iFiiupp, 0},
{"SDL_CreateWindowFrom", pFp, 0},
{"SDL_Delay", vFu, 0},


{"SDL_DequeueAudio", uFupu, 0},
{"SDL_DestroyCond", vFp, 0},
{"SDL_DestroyMutex", vFp, 0},
{"SDL_DestroyRenderer", vFp, 0},
{"SDL_DestroySemaphore", vFp, 0},
{"SDL_DestroyTexture", vFp, 0},
{"SDL_DestroyWindow", vFp, 0},
{"SDL_DetachThread", vFp, 0},
{"SDL_DisableScreenSaver", vFv, 0},
{"SDL_DuplicateSurface", pFp, 0},

{"SDL_EnableScreenSaver", vFv, 0},
{"SDL_EnclosePoints", iFpipp, 0},
{"SDL_Error", iFi, 0},
{"SDL_EventState", CFui, 0},
{"SDL_exp", dFd, 0},
{"SDL_expf", fFf, 0},
{"SDL_fabs", dFd, 0},
{"SDL_fabsf", fFf, 0},
{"SDL_FillRect", iFppu, 0},
{"SDL_FillRects", iFppiu, 0},

{"SDL_floor", dFd, 0},
{"SDL_floorf", fFf, 0},
{"SDL_FlushEvent", vFu, 0},
{"SDL_FlushEvents", vFuu, 0},
{"SDL_fmod", dFdd, 0},
{"SDL_fmodf", fFff, 0},
{"SDL_free", vFp, 0},
{"SDL_FreeAudioStream", vFp, 0},
{"SDL_FreeCursor", vFp, 0},
{"SDL_FreeFormat", vFp, 0},
{"SDL_FreePalette", vFp, 0},
{"SDL_FreeRW", vFp, 0},
{"SDL_FreeSurface", vFp, 0},
{"SDL_FreeWAV", vFp, 0},
{"SDL_GameControllerAddMapping", iFp, 0},

{"SDL_GameControllerClose", vFp, 0},
{"SDL_GameControllerEventState", iFi, 0},
{"SDL_GameControllerFromInstanceID", pFi, 0},
{"SDL_GameControllerGetAttached", iFp, 0},
{"SDL_GameControllerGetAxis", iFpi, 0},
{"SDL_GameControllerGetAxisFromString", uFp, 0},


{"SDL_GameControllerGetButton", uFpi, 0},
{"SDL_GameControllerGetButtonFromString", uFp, 0},
{"SDL_GameControllerGetJoystick", pFp, 0},
{"SDL_GameControllerGetPlayerIndex", iFp, 0},
{"SDL_GameControllerGetProduct", WFp, 0},
{"SDL_GameControllerGetProductVersion", WFp, 0},
{"SDL_GameControllerGetSerial", pFp, 0},
{"SDL_GameControllerGetStringForAxis", pFp, 0},
{"SDL_GameControllerGetStringForButton", pFu, 0},
{"SDL_GameControllerGetType", iFp, 0},
{"SDL_GameControllerGetVendor", WFp, 0},
{"SDL_GameControllerHasLED", iFp, 0},
{"SDL_GameControllerHasSensor", iFpi, 0},
{"SDL_GameControllerMapping", pFp, 0},
{"SDL_GameControllerMappingForDeviceIndex", pFi, 0},
{"SDL_GameControllerMappingForGUID", pFuuuu, 0},
{"SDL_GameControllerMappingForIndex", pFi, 0},
{"SDL_GameControllerName", pFp, 0},
{"SDL_GameControllerNameForIndex", pFi, 0},
{"SDL_GameControllerNumMappings", iFv, 0},
{"SDL_GameControllerOpen", pFi, 0},
{"SDL_GameControllerRumble", iFpWWu, 0},
{"SDL_GameControllerRumbleTriggers", iFpWWu, 0},
{"SDL_GameControllerSetLED", iFpCCC, 0},
{"SDL_GameControllerSetPlayerIndex", vFpi, 0},
{"SDL_GameControllerSetSensorEnabled", iFpii, 0},
{"SDL_GameControllerTypeForIndex", iFi, 0},
{"SDL_GameControllerUpdate", vFv, 0},

{"SDL_GetAssertionReport", pFv, 0},
{"SDL_GetAudioDeviceName", pFii, 0},
{"SDL_GetAudioDeviceStatus", iFi, 0},
{"SDL_GetAudioDriver", pFi, 0},
{"SDL_GetAudioStatus", iFv, 0},

{"SDL_GetClipboardText", pFv, 0},
{"SDL_GetClipRect", vFpp, 0},
{"SDL_GetClosestDisplayMode", pFipp, 0},
{"SDL_GetColorKey", iFpp, 0},
{"SDL_GetCPUCacheLineSize", iFv, 0},
{"SDL_GetCPUCount", iFv, 0},
{"SDL_GetCurrentAudioDriver", pFv, 0},
{"SDL_GetCurrentDisplayMode", iFip, 0},
{"SDL_GetCurrentVideoDriver", pFv, 0},
{"SDL_GetCursor", pFv, 0},

{"SDL_GetDefaultCursor", pFv, 0},
{"SDL_GetDesktopDisplayMode", iFip, 0},
{"SDL_GetDisplayBounds", iFip, 0},
{"SDL_GetDisplayDPI", iFippp, 0},
{"SDL_GetDisplayMode", iFiip, 0},
{"SDL_GetDisplayName", pFi, 0},
{"SDL_GetDisplayOrientation", iFi, 0},
{"SDL_GetDisplayUsableBounds", iFip, 0},
{"SDL_getenv", pFp, 0},
{"SDL_GetError", pFv, 0},

{"SDL_GetGlobalMouseState", uFpp, 0},
{"SDL_GetGrabbedWindow", pFv, 0},
{"SDL_GetHint", pFp, 0},
{"SDL_GetHintBoolean", iFpi, 0},

{"SDL_GetKeyboardFocus", pFv, 0},
{"SDL_GetKeyboardState", pFp, 0},
{"SDL_GetKeyFromName", pFp, 0},
{"SDL_GetKeyFromScancode", uFu, 0},
{"SDL_GetKeyName", pFu, 0},
{"SDL_GetMemoryFunctions", iFpi, 0},
{"SDL_GetModState", pFv, 0},
{"SDL_GetMouseFocus", pFv, 0},
{"SDL_GetMouseState", uFpp, 0},
{"SDL_GetNumAllocations", iFv, 0},
{"SDL_GetNumAudioDevices", iFi, 0},
{"SDL_GetNumAudioDrivers", iFv, 0},
{"SDL_GetNumDisplayModes", iFi, 0},
{"SDL_GetNumRenderDrivers", iFv, 0},
{"SDL_GetNumTouchDevices", iFv, 0},
{"SDL_GetNumTouchFingers", iFu, 0},
{"SDL_GetNumVideoDisplays", iFv, 0},
{"SDL_GetNumVideoDrivers", iFv, 0},
{"SDL_GetPerformanceCounter", UFv, 0},
{"SDL_GetPerformanceFrequency", UFv, 0},
{"SDL_GetPixelFormatName", pFu, 0},
{"SDL_GetPlatform", pFv, 0},
{"SDL_GetPreferredLocales", pFv, 0},
{"SDL_GetPowerInfo", iFpp, 0},
{"SDL_GetPrefPath", pFpp, 0},
{"SDL_GetQueuedAudioSize", uFi, 0},
{"SDL_GetRelativeMouseMode", iFv, 0},
{"SDL_GetRelativeMouseState", uFpp, 0},
{"SDL_GetRenderDrawBlendMode", iFpp, 0},
{"SDL_GetRenderDrawColor", iFppppp, 0},
{"SDL_GetRenderDriverInfo", iFip, 0},
{"SDL_GetRenderer", pFp, 0},
{"SDL_GetRendererInfo", iFpp, 0},
{"SDL_GetRendererOutputSize", iFppp, 0},
{"SDL_GetRenderTarget", pFp, 0},
{"SDL_GetRevision", pFv, 0},
{"SDL_GetRevisionNumber", iFv, 0},
{"SDL_GetRGB", vFupppp, 0},
{"SDL_GetRGBA", vFuppppp, 0},
{"SDL_GetScancodeFromKey", uFu, 0},
{"SDL_GetScancodeFromName", iFp, 0},
{"SDL_GetScancodeName", pFu, 0},
{"SDL_GetShapedWindowMode", iFpp, 0},
{"SDL_GetSurfaceAlphaMod", iFpp, 0},
{"SDL_GetSurfaceBlendMode", iFpp, 0},
{"SDL_GetSurfaceColorMod", iFpppp, 0},
{"SDL_GetSystemRAM", iFv, 0},
{"SDL_GetTextureAlphaMod", iFpp, 0},
{"SDL_GetTextureBlendMode", iFpp, 0},
{"SDL_GetTextureColorMod", iFpppp, 0},
{"SDL_GetThreadID", uFp, 0},
{"SDL_GetThreadName", pFp, 0},
{"SDL_GetTicks", uFv, 0},
{"SDL_GetTouchDevice", uFi, 0},
{"SDL_GetTouchDeviceType", iFi, 0},
{"SDL_GetTouchFinger", pFui, 0},
{"SDL_GetVersion", vFp, 0},
{"SDL_GetVideoDriver", pFi, 0},
{"SDL_GetWindowBordersSize", iFppppp, 0},
{"SDL_GetWindowBrightness", fFp, 0},
{"SDL_GetWindowData", pFpp, 0},
{"SDL_GetWindowDisplayIndex", iFp, 0},
{"SDL_GetWindowDisplayMode", iFpp, 0},
{"SDL_GetWindowFlags", uFp, 0},
{"SDL_GetWindowFromID", pFu, 0},
{"SDL_GetWindowGammaRamp", iFpppp, 0},
{"SDL_GetWindowGrab", iFp, 0},
{"SDL_GetWindowID", uFp, 0},
{"SDL_GetWindowMaximumSize", vFppp, 0},
{"SDL_GetWindowMinimumSize", vFppp, 0},
{"SDL_GetWindowOpacity", iFpp, 0},
{"SDL_GetWindowPixelFormat", uFp, 0},
{"SDL_GetWindowPosition", vFppp, 0},
{"SDL_GetWindowSize", vFppp, 0},
{"SDL_GetWindowSurface", pFp, 0},
{"SDL_GetWindowTitle", pFp, 0},
{"SDL_GetWindowWMInfo", iFpp, 0},
{"SDL_GetYUVConversionMode", iFv, 0},
{"SDL_GetYUVConversionModeForResolution", iFii, 0},
{"SDL_GL_BindTexture", iFppp, 0},
{"SDL_GL_CreateContext", pFp, 0},
{"SDL_GL_DeleteContext", vFp, 0},
{"SDL_GL_ExtensionSupported", iFp, 0},
{"SDL_GL_GetAttribute", iFup, 0},
{"SDL_GL_GetCurrentContext", pFv, 0},
{"SDL_GL_GetCurrentWindow", pFv, 0},
{"SDL_GL_GetDrawableSize", vFppp, 0},

{"SDL_GL_GetSwapInterval", iFv, 0},
{"SDL_GL_LoadLibrary", iFp, 0},
{"SDL_GL_MakeCurrent", iFpp, 0},
{"SDL_GL_ResetAttributes", vFv, 0},
{"SDL_GL_SetAttribute", iFui, 0},
{"SDL_GL_SetSwapInterval", iFi, 0},
{"SDL_GL_SwapWindow", vFp, 0},
{"SDL_GL_UnbindTexture", iFp, 0},
{"SDL_GL_UnloadLibrary", vFv, 0},
{"SDL_HapticClose", vFp, 0},
{"SDL_HapticDestroyEffect", vFpi, 0},
{"SDL_HapticEffectSupported", iFpp, 0},
{"SDL_HapticGetEffectStatus", iFpi, 0},
{"SDL_HapticIndex", iFp, 0},
{"SDL_HapticName", pFi, 0},
{"SDL_HapticNewEffect", iFpp, 0},
{"SDL_HapticNumAxes", iFp, 0},
{"SDL_HapticNumEffects", iFp, 0},
{"SDL_HapticNumEffectsPlaying", iFp, 0},
{"SDL_HapticOpen", pFi, 0},
{"SDL_HapticOpened", iFi, 0},
{"SDL_HapticOpenFromJoystick", pFp, 0},
{"SDL_HapticOpenFromMouse", pFv, 0},
{"SDL_HapticPause", iFp, 0},
{"SDL_HapticQuery", uFp, 0},
{"SDL_HapticRumbleInit", iFp, 0},
{"SDL_HapticRumblePlay", iFpfu, 0},
{"SDL_HapticRumbleStop", iFp, 0},
{"SDL_HapticRumbleSupported", iFp, 0},
{"SDL_HapticRunEffect", iFpiu, 0},
{"SDL_HapticSetAutocenter", iFpi, 0},
{"SDL_HapticSetGain", iFpi, 0},
{"SDL_HapticStopAll", iFp, 0},
{"SDL_HapticStopEffect", iFpi, 0},
{"SDL_HapticUnpause", iFp, 0},
{"SDL_HapticUpdateEffect", iFpip, 0},





{"SDL_HasClipboardText", iFv, 0},
{"SDL_HasColorKey", iFv, 0},
{"SDL_HasEvent", iFv, 0},
{"SDL_HasEvents", iFv, 0},
{"SDL_HasIntersection", iFpp, 0},



{"SDL_HasScreenKeyboardSupport", iFv, 0},





{"SDL_HideWindow", vFp, 0},
{"SDL_iconv", LFppppp, 0},
{"SDL_iconv_close", iFp, 0},
{"SDL_iconv_open", pFpp, 0},
{"SDL_iconv_string", pFpppL, 0},
{"SDL_Init", iFu, 0},
{"SDL_InitSubSystem", iFu, 0},
{"SDL_IntersectRect", iFppp, 0},
{"SDL_IntersectRectAndLine", iFppppp, 0},
{"SDL_isdigit", iFi, 0},
{"SDL_IsGameController", iFi, 0},
{"SDL_IsScreenKeyboardShown", iFp, 0},
{"SDL_IsScreenSaverEnabled", iFv, 0},
{"SDL_IsShapedWindow", iFp, 0},
{"SDL_isspace", iFi, 0},
{"SDL_IsTablet", iFv, 0},
{"SDL_IsTextInputActive", iFv, 0},
{"SDL_itoa", pFipi, 0},
{"SDL_JoystickClose", vFp, 0},
{"SDL_JoystickCurrentPowerLevel", iFp, 0},
{"SDL_JoystickEventState", iFi, 0},
{"SDL_JoystickFromInstanceID", pFi, 0},
{"SDL_JoystickGetAttached", iFp, 0},
{"SDL_JoystickGetAxis", iFpi, 0},
{"SDL_JoystickGetAxisInitialState", iFpip, 0},
{"SDL_JoystickGetBall", iFpipp, 0},
{"SDL_JoystickGetButton", CFpi, 0},

{"SDL_JoystickGetDeviceInstanceID", iFi, 0},
{"SDL_JoystickGetDevicePlayerIndex", iFi, 0},
{"SDL_JoystickGetDeviceProduct", WFi, 0},
{"SDL_JoystickGetDeviceProductVersion", WFi, 0},
{"SDL_JoystickGetDeviceType", iFi, 0},
{"SDL_JoystickGetDeviceVendor", WFi, 0},


{"SDL_JoystickGetGUIDString", vFUUpi, 0},
{"SDL_JoystickGetHat", CFpi, 0},
{"SDL_JoystickGetPlayerIndex", iFp, 0},
{"SDL_JoystickGetProduct", WFp, 0},
{"SDL_JoystickGetProductVersion", WFp, 0},
{"SDL_JoystickGetSerial", pFp, 0},
{"SDL_JoystickGetType", iFp, 0},
{"SDL_JoystickGetVendor", WFp, 0},
{"SDL_JoystickInstanceID", iFp, 0},
{"SDL_JoystickIsHaptic", iFp, 0},
{"SDL_JoystickName", pFp, 0},
{"SDL_JoystickNameForIndex", pFi, 0},
{"SDL_JoystickNumAxes", iFp, 0},
{"SDL_JoystickNumBalls", iFp, 0},
{"SDL_JoystickNumButtons", iFp, 0},
{"SDL_JoystickNumHats", iFp, 0},
{"SDL_JoystickOpen", pFi, 0},
{"SDL_JoystickRumble", iFpWWu, 0},
{"SDL_JoystickRumbleTriggers", iFpWWu, 0},
{"SDL_JoystickUpdate", vFv, 0},
{"SDL_LinuxSetThreadPriority", iFIi, 0},
{"SDL_lltoa", pFIpi, 0},

{"SDL_LoadDollarTemplates", iFip, 0},




{"SDL_LockAudio", vFv, 0},
{"SDL_LockAudioDevice", vFi, 0},
{"SDL_LockJoysticks", vFv, 0},
{"SDL_LockMutex", iFp, 0},
{"SDL_LockSurface", iFp, 0},
{"SDL_LockTexture", iFpppp, 0},
{"SDL_log", dFd, 0},

{"SDL_log10", dFd, 0},
{"SDL_log10f", fFf, 0},



{"SDL_logf", fFf, 0},

{"SDL_LogGetPriority", iFi, 0},


{"SDL_LogMessageV", vFiupV, 0},
{"SDL_LogResetPriorities", vFv, 0},
{"SDL_LogSetAllPriority", vFu, 0},

{"SDL_LogSetPriority", vFiu, 0},


{"SDL_LowerBlit", iFpppp, 0},
{"SDL_LowerBlitScaled", iFpppp, 0},
{"SDL_ltoa", pFlp, 0},
{"SDL_malloc", pFu, 0},
{"SDL_MapRGB", uFpCCC, 0},
{"SDL_MapRGBA", uFpCCCC, 0},
{"SDL_MasksToPixelFormatEnum", uFiuuuu, 0},
{"SDL_MaximizeWindow", vFp, 0},
{"SDL_memcmp", iFppu, 0},
{"SDL_memcpy", pFppu, 0},
{"SDL_memmove", pFppu, 0},
{"SDL_MemoryBarrierAcquireFunction", vFv, 0},
{"SDL_MemoryBarrierReleaseFunction", vFv, 0},
{"SDL_memset", pFpiu, 0},
{"SDL_MinimizeWindow", vFp, 0},
{"SDL_MixAudio", vFppui, 0},
{"SDL_MixAudioFormat", vFppWui, 0},
{"SDL_MouseIsHaptic", iFv, 0},
{"SDL_NewAudioStream", pFiCiiCi, 0},
{"SDL_NumHaptics", iFv, 0},
{"SDL_NumJoysticks", iFv, 0},
{"SDL_NumSensors", iFv, 0},


{"SDL_PauseAudio", vFi, 0},
{"SDL_PauseAudioDevice", vFii, 0},
{"SDL_PeepEvents", iFpiiuu, 0},
{"SDL_PixelFormatEnumToMasks", iFuppppp, 0},
{"SDL_PollEvent", iFp, 0},
{"SDL_pow", dFdd, 0},
{"SDL_powf", fFff, 0},
{"SDL_PumpEvents", vFv, 0},
{"SDL_PushEvent", iFp, 0},

{"SDL_QueryTexture", iFppppp, 0},
{"SDL_QueueAudio", iFipu, 0},
{"SDL_Quit", vFv, 0},
{"SDL_QuitSubSystem", vFu, 0},
{"SDL_RaiseWindow", vFp, 0},







{"SDL_realloc", pFpu, 0},
{"SDL_RecordGesture", iFi, 0},
{"SDL_RegisterEvents", uFi, 0},

{"SDL_RenderClear", iFp, 0},
{"SDL_RenderCopy", iFpppp, 0},
{"SDL_RenderCopyEx", iFppppdpi, 0},


{"SDL_RenderDrawLine", iFpiiii, 0},

{"SDL_RenderDrawLines", iFppi, 0},

{"SDL_RenderDrawPoint", iFpii, 0},

{"SDL_RenderDrawPoints", iFppi, 0},

{"SDL_RenderDrawRect", iFpp, 0},

{"SDL_RenderDrawRects", iFppi, 0},

{"SDL_RenderFillRect", iFpp, 0},

{"SDL_RenderFillRects", iFppi, 0},


{"SDL_RenderGetClipRect", vFpp, 0},
{"SDL_RenderGetIntegerScale", iFp, 0},
{"SDL_RenderGetLogicalSize", vFppp, 0},


{"SDL_RenderGetScale", vFppp, 0},
{"SDL_RenderGetViewport", vFpp, 0},
{"SDL_RenderIsClipEnabled", iFp, 0},
{"SDL_RenderPresent", vFp, 0},
{"SDL_RenderReadPixels", iFppupi, 0},
{"SDL_RenderSetClipRect", iFpp, 0},
{"SDL_RenderSetIntegerScale", iFpi, 0},
{"SDL_RenderSetLogicalSize", iFpii, 0},
{"SDL_RenderSetScale", iFpff, 0},
{"SDL_RenderSetViewport", iFpp, 0},
{"SDL_RenderTargetSupported", iFp, 0},
{"SDL_ReportAssertion", uFpppi, 0},
{"SDL_ResetAssertionReport", vFv, 0},
{"SDL_ResetKeyboard", vFv, 0},
{"SDL_RestoreWindow", vFp, 0},







{"SDL_scalbn", dFdi, 0},

{"SDL_SemPost", iFp, 0},
{"SDL_SemTryWait", iFp, 0},
{"SDL_SemValue", uFp, 0},
{"SDL_SemWait", iFp, 0},
{"SDL_SemWaitTimeout", iFpu, 0},
# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"
{"SDL_SetClipboardText", iFp, 0},
{"SDL_SetClipRect", iFpp, 0},
{"SDL_SetColorKey", iFpiu, 0},
{"SDL_SetCursor", vFp, 0},
{"SDL_setenv", iFppi, 0},
{"SDL_SetError", iFppppp, 0},

{"SDL_SetHint", iFpp, 0},
{"SDL_SetHintWithPriority", iFppi, 0},
{"SDL_SetMainReady", vFv, 0},

{"SDL_SetModState", vFi, 0},
{"SDL_SetPaletteColors", iFppii, 0},

{"SDL_SetRelativeMouseMode", iFi, 0},
{"SDL_SetRenderDrawBlendMode", iFpu, 0},
{"SDL_SetRenderDrawColor", iFpCCCC, 0},
{"SDL_SetRenderTarget", iFpp, 0},
{"SDL_SetSurfaceAlphaMod", iFpC, 0},
{"SDL_SetSurfaceBlendMode", iFpu, 0},

{"SDL_SetSurfacePalette", iFpp, 0},
{"SDL_SetSurfaceRLE", iFpi, 0},
{"SDL_SetTextInputRect", vFp, 0},
{"SDL_SetTextureAlphaMod", iFpC, 0},
{"SDL_SetTextureBlendMode", iFpu, 0},
{"SDL_SetTextureColorMod", iFpCCC, 0},
{"SDL_SetThreadPriority", iFu, 0},
{"SDL_SetWindowBordered", vFpi, 0},
{"SDL_SetWindowBrightness", iFpf, 0},
{"SDL_SetWindowData", pFppp, 0},
{"SDL_SetWindowDisplayMode", iFpp, 0},
{"SDL_SetWindowFullscreen", iFpu, 0},
{"SDL_SetWindowGammaRamp", iFpppp, 0},
{"SDL_SetWindowGrab", vFpi, 0},

{"SDL_SetWindowIcon", vFpp, 0},

{"SDL_SetWindowMaximumSize", vFpii, 0},
{"SDL_SetWindowMinimumSize", vFpii, 0},


{"SDL_SetWindowPosition", vFpii, 0},
{"SDL_SetWindowResizable", vFpi, 0},
{"SDL_SetWindowShape", iFppp, 0},
{"SDL_SetWindowSize", vFpii, 0},
{"SDL_SetWindowTitle", vFpp, 0},

{"SDL_ShowCursor", iFi, 0},
{"SDL_ShowMessageBox", iFpp, 0},
{"SDL_ShowSimpleMessageBox", iFuppp, 0},
{"SDL_ShowWindow", vFp, 0},
{"SDL_sin", dFd, 0},
{"SDL_sinf", fFf, 0},

{"SDL_SoftStretch", iFpppp, 0},
{"SDL_sqrt", dFd, 0},
{"SDL_sqrtf", fFf, 0},

{"SDL_StartTextInput", vFv, 0},
{"SDL_StopTextInput", vFv, 0},
{"SDL_strcasecmp", iFpp, 0},
{"SDL_strchr", pFpi, 0},
{"SDL_strcmp", iFpp, 0},
{"SDL_strdup", pFp, 0},
{"SDL_strlcat", uFppu, 0},
{"SDL_strlcpy", uFppu, 0},
{"SDL_strlen", uFp, 0},
{"SDL_strlwr", pFp, 0},
{"SDL_strncasecmp", iFppu, 0},
{"SDL_strncmp", iFppu, 0},
{"SDL_strrchr", pFpi, 0},
{"SDL_strrev", pFp, 0},
{"SDL_strstr", pFpp, 0},
{"SDL_strtod", dFpp, 0},
{"SDL_strtokr", pFppp, 0},
{"SDL_strtol", iFppi, 0},
{"SDL_strtoll", IFppi, 0},
{"SDL_strtoul", uFppi, 0},
{"SDL_strtoull", UFppi, 0},
{"SDL_strupr", pFp, 0},
{"SDL_tan", dFd, 0},
{"SDL_tanf", fFf, 0},
{"SDL_ThreadID", uFv, 0},
{"SDL_TLSCreate", uFv, 0},
{"SDL_TLSGet", pFu, 0},

{"SDL_tolower", iFi, 0},
{"SDL_toupper", iFi, 0},
{"SDL_TryLockMutex", iFp, 0},
{"SDL_uitoa", pFupi, 0},
{"SDL_ulltoa", pFUpi, 0},
{"SDL_ultoa", pFupi, 0},
{"SDL_UnionRect", vFppp, 0},

{"SDL_UnlockAudio", vFv, 0},
{"SDL_UnlockAudioDevice", vFi, 0},
{"SDL_UnlockJoysticks", vFv, 0},
{"SDL_UnlockMutex", iFp, 0},
{"SDL_UnlockSurface", vFp, 0},
{"SDL_UnlockTexture", vFp, 0},
{"SDL_UpdateTexture", iFpppi, 0},
{"SDL_UpdateWindowSurface", iFp, 0},
{"SDL_UpdateWindowSurfaceRects", iFppi, 0},
{"SDL_UpdateYUVTexture", iFpppipipi, 0},
{"SDL_UpperBlit", iFpppp, 0},
{"SDL_UpperBlitScaled", iFpppp, 0},
{"SDL_utf8strlcpy", uFppu, 0},

{"SDL_VideoInit", iFp, 0},
{"SDL_VideoQuit", vFv, 0},


{"SDL_Vulkan_CreateSurface", iFppp, 0},
{"SDL_Vulkan_GetDrawableSize", vFppp, 0},
{"SDL_Vulkan_GetInstanceExtensions", iFppp, 0},

{"SDL_Vulkan_LoadLibrary", iFp, 0},
{"SDL_Vulkan_UnloadLibrary", vFv, 0},
{"SDL_WaitEvent", iFp, 0},
{"SDL_WaitEventTimeout", iFpi, 0},
{"SDL_WaitThread", vFpp, 0},
{"SDL_WarpMouseGlobal", iFii, 0},
{"SDL_WarpMouseInWindow", vFpii, 0},
{"SDL_WasInit", uFu, 0},




{"SDL_wcslen", uFp, 0},


















{"SDL_doesntexist", IFpIi, 0},








# 57 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 66 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onesymbol_t sdl2mysymbolmap[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"



{"SDL_AddEventWatch", vFEpp, 0},

{"SDL_AddTimer", pFEupp, 0},



































































{"SDL_CreateThread", pFEppp, 0},

{"SDL_CreateWindow", pFEpiiiiu, 0},



{"SDL_DelEventWatch", vFEpp, 0},











{"SDL_DYNAPI_entry", iFEupu, 0},


























{"SDL_GameControllerAddMappingsFromRW", iFEpi, 0},










































{"SDL_GetBasePath", pFEv, 0},





















{"SDL_GetEventFilter", iFEpp, 0},




{"SDL_GetJoystickGUIDInfo", vFEuuuupppp, 0},























































































{"SDL_GL_GetProcAddress", pFEp, 0},




































{"SDL_Has3DNow", iFv, 0},
{"SDL_HasAltiVec", iFv, 0},
{"SDL_HasAVX", iFv, 0},
{"SDL_HasAVX2", iFv, 0},
{"SDL_HasAVX512F", iFv, 0},





{"SDL_HasMMX", iFv, 0},
{"SDL_HasNEON", iFv, 0},
{"SDL_HasRDTSC", iFv, 0},

{"SDL_HasSSE", iFv, 0},
{"SDL_HasSSE2", iFv, 0},
{"SDL_HasSSE3", iFv, 0},
{"SDL_HasSSE41", iFv, 0},
{"SDL_HasSSE42", iFv, 0},


























































{"SDL_LoadBMP_RW", pFEpi, 0},

{"SDL_LoadFile_RW", pFEppi, 0},
{"SDL_LoadFunction", pFEpp, 0},
{"SDL_LoadObject", pFEp, 0},
{"SDL_LoadWAV_RW", pFEpippp, 0},







{"SDL_Log", vFEpV, 0},


{"SDL_LogCritical", vFEipV, 0},
{"SDL_LogDebug", vFEipV, 0},
{"SDL_LogError", vFEipV, 0},

{"SDL_LogGetOutputFunction", vFEpp, 0},

{"SDL_LogInfo", vFEipV, 0},




{"SDL_LogSetOutputFunction", vFEpp, 0},

{"SDL_LogVerbose", vFEipV, 0},
{"SDL_LogWarn", vFEipV, 0},






















{"SDL_OpenAudio", iFEpp, 0},
{"SDL_OpenAudioDevice", iFEpippi, 0},















{"SDL_ReadBE16", uFEp, 0},
{"SDL_ReadBE32", uFEp, 0},
{"SDL_ReadBE64", UFEp, 0},
{"SDL_ReadLE16", uFEp, 0},
{"SDL_ReadLE32", uFEp, 0},
{"SDL_ReadLE64", UFEp, 0},
{"SDL_ReadU8", uFEp, 0},



{"SDL_RemoveTimer", iFEp, 0},










































{"SDL_RWFromConstMem", pFEpi, 0},
{"SDL_RWFromFP", pFEpi, 0},
{"SDL_RWFromFile", pFEpp, 0},
{"SDL_RWFromMem", pFEpi, 0},
{"SDL_SaveAllDollarTemplates", iFEp, 0},
{"SDL_SaveBMP_RW", iFEppi, 0},
{"SDL_SaveDollarTemplate", iFEip, 0},







# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"






{"SDL_SetEventFilter", vFEpp, 0},















































{"SDL_snprintf", iFEpupV, 0},































{"SDL_TLSSet", iFEupp, 0},







{"SDL_UnloadObject", vFEp, 0},
















{"SDL_vsnprintf", iFEpupp, 0},




{"SDL_Vulkan_GetVkGetInstanceProcAddr", pFEv, 0},













{"SDL_WriteBE16", uFEpW, 0},
{"SDL_WriteBE32", uFEpu, 0},
{"SDL_WriteBE64", uFEpU, 0},
{"SDL_WriteLE16", uFEpW, 0},
{"SDL_WriteLE32", uFEpu, 0},
{"SDL_WriteLE64", uFEpU, 0},
{"SDL_WriteU8", uFEpu, 0},

{"SDL_RWseek", IFEpIi, 0},
{"SDL_RWtell", IFEp, 0},
{"SDL_RWsize", IFEp, 0},
{"SDL_RWread", uFEppuu, 0},
{"SDL_RWwrite", uFEppuu, 0},
{"SDL_RWclose", iFEp, 0},






{"SDL_IsJoystickPS4", iFEWW, 0},
{"SDL_IsJoystickNintendoSwitchPro", iFEWW, 0},
{"SDL_IsJoystickSteamController", iFEWW, 0},
{"SDL_IsJoystickXbox360", iFEWW, 0},
{"SDL_IsJoystickXboxOne", iFEWW, 0},
{"SDL_IsJoystickXInput", iFEuuuu, 0},
{"SDL_IsJoystickHIDAPI", iFEuuuu, 0},
# 68 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 77 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onesymbol_t sdl2stsymbolmap[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"





























































































































{"SDL_GameControllerGetBindForAxis", pFEppi, 0},
{"SDL_GameControllerGetBindForButton", pFEppi, 0},








































































































































































































































{"SDL_JoystickGetDeviceGUID", pFEpi, 0},






{"SDL_JoystickGetGUID", pFEpp, 0},
{"SDL_JoystickGetGUIDFromString", pFEpp, 0},































































































































































# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"





























































































































































# 79 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 88 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onesymbol2_t sdl2symbol2map[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"





























































































































































































































































































































































































































{"SDL_LogMessage", vFiupV, 0, "SDL_LogMessageV"},








































{"SDL_qsort", vFEpuup, 0, "my_qsort"},








































































# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"


























































{"SDL_sscanf", iFppV, 0, "SDL_vsscanf"},






















































































{"SDL_mutexP", iFp, 0, "SDL_LockMutex"},
{"SDL_mutexV", iFp, 0, "SDL_UnlockMutex"},










# 90 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 101 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onedata_t sdl2datamap[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"















































































































































































































































































































































































































































































































































# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"





























































































































































# 103 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 114 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
static const map_onedata_t sdl2mydatamap[] = {
# 1 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h" 1
# 10 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"















































































































































































































































































































































































































































































































































# 551 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2_private.h"





























































































































































# 116 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2
};
# 132 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
# 1 "/home/ssd/pico/code/box86/src/wrapped/generated/wrappedsdl2undefs.h" 1
# 133 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 2





int wrappedsdl2_init(library_t* lib, box86context_t* box86)
{
    (void)box86;


    free(lib->path); lib->path=
# 143 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
                              ((void *)0)
# 143 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
                                  ;



    {
        lib->w.lib = dlopen(sdl2Name, 
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
                                          0x00001 
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
                                                    | 
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
                                                      0x00100
# 148 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
                                                                 );
        if(!lib->w.lib) {
# 159 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
                return -1;




        } else lib->path = box_strdup(sdl2Name);
    }
    WrappedLib_CommonInit(lib);

    khint_t k;
    int ret;
    int cnt;
# 188 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
 cnt = sizeof(sdl2symbolmap)/sizeof(map_onesymbol_t); for (int i = 0; i < cnt; ++i) { if (sdl2symbolmap[i].weak) { k = kh_put_symbolmap(lib->w.wsymbolmap, sdl2symbolmap[i].name, &ret); ((lib->w.wsymbolmap)->vals[k]).w = sdl2symbolmap[i].w; ((lib->w.wsymbolmap)->vals[k]).resolved = 0; } else { k = kh_put_symbolmap(lib->w.symbolmap, sdl2symbolmap[i].name, &ret); ((lib->w.symbolmap)->vals[k]).w = sdl2symbolmap[i].w; ((lib->w.symbolmap)->vals[k]).resolved = 0; } if (strchr(sdl2symbolmap[i].name, '@')) AddDictionnary(box86->versym, sdl2symbolmap[i].name); }
 cnt = sizeof(sdl2mysymbolmap)/sizeof(map_onesymbol_t); for (int i = 0; i < cnt; ++i) { if (sdl2mysymbolmap[i].weak) { k = kh_put_symbolmap(lib->w.wmysymbolmap, sdl2mysymbolmap[i].name, &ret); ((lib->w.wmysymbolmap)->vals[k]).w = sdl2mysymbolmap[i].w; ((lib->w.wmysymbolmap)->vals[k]).resolved = 0; } else { k = kh_put_symbolmap(lib->w.mysymbolmap, sdl2mysymbolmap[i].name, &ret); ((lib->w.mysymbolmap)->vals[k]).w = sdl2mysymbolmap[i].w; ((lib->w.mysymbolmap)->vals[k]).resolved = 0; } if (strchr(sdl2mysymbolmap[i].name, '@')) AddDictionnary(box86->versym, sdl2mysymbolmap[i].name); }

    cnt = sizeof(sdl2stsymbolmap)/sizeof(map_onesymbol_t);
    for (int i=0; i<cnt; ++i) {
        k = kh_put_symbolmap(lib->w.stsymbolmap, sdl2stsymbolmap[i].name, &ret);
        ((lib->w.stsymbolmap)->vals[k]).w = sdl2stsymbolmap[i].w;
        ((lib->w.stsymbolmap)->vals[k]).resolved = 0;
        if(strchr(sdl2stsymbolmap[i].name, '@'))
            AddDictionnary(box86->versym, sdl2stsymbolmap[i].name);
    }
    cnt = sizeof(sdl2symbol2map)/sizeof(map_onesymbol2_t);
    for (int i=0; i<cnt; ++i) {
        k = kh_put_symbol2map(lib->w.symbol2map, sdl2symbol2map[i].name, &ret);
        ((lib->w.symbol2map)->vals[k]).name = sdl2symbol2map[i].name2;
        ((lib->w.symbol2map)->vals[k]).w = sdl2symbol2map[i].w;
        ((lib->w.symbol2map)->vals[k]).weak = sdl2symbol2map[i].weak;
        ((lib->w.symbol2map)->vals[k]).resolved = 0;
        if(strchr(sdl2symbol2map[i].name, '@'))
            AddDictionnary(box86->versym, sdl2symbol2map[i].name);
    }
    cnt = sizeof(sdl2datamap)/sizeof(map_onedata_t);
    for (int i=0; i<cnt; ++i) {
        if(sdl2datamap[i].weak) {
            k = kh_put_datamap(lib->w.wdatamap, sdl2datamap[i].name, &ret);
            ((lib->w.wdatamap)->vals[k]) = sdl2datamap[i].sz;
        } else {
            k = kh_put_datamap(lib->w.datamap, sdl2datamap[i].name, &ret);
            ((lib->w.datamap)->vals[k]) = sdl2datamap[i].sz;
        }
    }
    cnt = sizeof(sdl2mydatamap)/sizeof(map_onedata_t);
    for (int i=0; i<cnt; ++i) {
        k = kh_put_datamap(lib->w.mydatamap, sdl2mydatamap[i].name, &ret);
        ((lib->w.mydatamap)->vals[k]) = sdl2mydatamap[i].sz;
    }

    box86->sdl2lib = lib; getMy(lib); box86->sdl2allocrw = my->SDL_AllocRW; box86->sdl2freerw = my->SDL_FreeRW; lib->w.altmy = box_strdup("my2_"); setNeededLibs(lib, 4, "libdl.so.2", "libm.so.6", "librt.so.1", "libpthread.so.0");


    return 0;
}

void wrappedsdl2_fini(library_t* lib)
{

    my->SDL_Quit(); if(my_glhandle) my_dlclose(thread_get_emu(), my_glhandle); my_glhandle = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
   ((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
   ; freeMy(); my_context->sdl2lib = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
   ((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
   ; my_context->sdl2allocrw = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
   ((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
   ; my_context->sdl2freerw = 
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h" 3 4
   ((void *)0)
# 234 "/home/ssd/pico/code/box86/src/wrapped/wrappedlib_init.h"
   ;

    WrappedLib_FinishFini(lib);
}
# 988 "/home/ssd/pico/code/box86/src/wrapped/wrappedsdl2.c" 2
